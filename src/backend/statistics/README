Extended statistics
===================

When estimating various quantities (e.g. condition selectivities) the default
approach relies on the assumption of independence. In practice that's often
not true, resulting in estimation errors.

Extended statistics track different types of dependencies between the columns,
hopefully improving the estimates and producing better plans.


Types of statistics
-------------------

Currently we only have two kinds of extended statistics

    (a) ndistinct coefficients

    (b) soft functional dependencies (README.dependencies)


Compatible clause types
-----------------------

Each type of statistics may be used to estimate some subset of clause types.

    (a) functional dependencies - equality clauses (AND), possibly IS NULL

Currently only simple operator clauses (Var op Const) are supported, but it's
possible to support more complex clause types, e.g. (Var op Var).


Complex clauses
---------------

We also support estimating more complex clauses - essentially AND/OR clauses
with (Var op Const) as leaves, as long as all the referenced attributes are
covered by a single statistics.

For example this condition

    (a=1) AND ((b=2) OR ((c=3) AND (d=4)))

may be estimated using statistics on (a,b,c,d). If we only have statistics on
(b,c,d) we may estimate the second part, and estimate (a=1) using simple stats.

If we only have statistics on (a,b,c) we can't apply it at all at this point,
but it's worth pointing out clauselist_selectivity() works recursively and when
handling the second part (the OR-clause), we'll be able to apply the statistics.

Note: The multi-statistics estimation patch also makes it possible to pass some
clauses as 'conditions' into the deeper parts of the expression tree.


Selectivity estimation
----------------------

When estimating selectivity, we aim to achieve several things:

    (a) maximize the estimate accuracy

    (b) minimize the overhead, especially when no suitable extended statistics
        exist (so if you are not using extended stats, there's no overhead)

This clauselist_selectivity() performs several inexpensive checks first, before
even attempting to do the more expensive estimation.

    (1) check if there are extended stats on the relation

    (2) check there are at least two attributes referenced by clauses compatible
        with extended statistics (equality clauses for func. dependencies)

    (3) perform reduction of equality clauses using func. dependencies

    (4) estimate the reduced list of clauses using regular statistics

Whenever we find there are no suitable stats, we skip the expensive steps.


Size of sample in ANALYZE
-------------------------
When performing ANALYZE, the number of rows to sample is determined as

    (300 * statistics_target)

That works reasonably well for statistics on individual columns, but perhaps
it's not enough for extended statistics. Papers analyzing estimation errors
all use samples proportional to the table (usually finding that 1-3% of the
table is enough to build accurate stats).

The requested accuracy (number of MCV items or histogram bins) should also
be considered when determining the sample size, and in extended statistics
those are not necessarily limited by statistics_target.

This however merits further discussion, because collecting the sample is quite
expensive and increasing it further would make ANALYZE even more painful.
Judging by the experiments with the current implementation, the fixed size
seems to work reasonably well for now, so we leave this as a future work.
