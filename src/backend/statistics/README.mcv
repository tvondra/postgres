MCV lists
=========

Multivariate MCV (most-common values) lists are a straightforward extension of
regular MCV list, tracking most frequent combinations of values for a group of
attributes.

This works particularly well for columns with a small number of distinct values,
as the list may include all the combinations and approximate the distribution
very accurately.

For columns with large number of distinct values (e.g. those with continuous
domains), the list will only track the most frequent combinations. If the
distribution is mostly uniform (all combinations about equally frequent), the
MCV list will be empty.

Estimates of some clauses (e.g. equality) based on MCV lists are more accurate
than when using histograms.

Also, MCV lists don't necessarily require sorting of the values (the fact that
we use sorting when building them is implementation detail), but even more
importantly the ordering is not built into the approximation (while histograms
are built on ordering). So MCV lists work well even for attributes where the
ordering of the data type is disconnected from the meaning of the data. For
example we know how to sort strings, but it's unlikely to make much sense for
city names (or other label-like attributes).


Selectivity estimation
----------------------

The estimation, implemented in clauselist_mv_selectivity_mcvlist(), is quite
simple in principle - we need to identify MCV items matching all the clauses
and sum frequencies of all those items.

Currently MCV lists support estimation of the following clause types:

    (a) equality clauses    WHERE (a = 1) AND (b = 2)
    (b) inequality clauses  WHERE (a < 1) AND (b >= 2)
    (c) NULL clauses        WHERE (a IS NULL) AND (b IS NOT NULL)
    (d) OR clauses          WHERE (a < 1) OR (b >= 2)

It's possible to add support for additional clauses, for example:

    (e) multi-var clauses   WHERE (a > b)

and possibly others. These are tasks for the future, not yet implemented.


Estimating equality clauses
---------------------------

When computing selectivity estimate for equality clauses

    (a = 1) AND (b = 2)

we can do this estimate pretty exactly assuming that two conditions are met:

    (1) there's an equality condition on all attributes of the statistic

    (2) we find a matching item in the MCV list

In this case we know the MCV item represents all tuples matching the clauses,
and the selectivity estimate is complete (i.e. we don't need to perform
estimation using the histogram). This is what we call 'full match'.

When only (1) holds, but there's no matching MCV item, we don't know whether
there are no such rows or just are not very frequent. We can however use the
frequency of the least frequent MCV item as an upper bound for the selectivity.

For a combination of equality conditions (not full-match case) we can clamp the
selectivity by the minimum of selectivities for each condition. For example if
we know the number of distinct values for each column, we can use 1/ndistinct
as a per-column estimate. Or rather 1/ndistinct + selectivity derived from the
MCV list.

We should also probably only use the 'residual ndistinct' by exluding the items
included in the MCV list (and also residual frequency):

     f = (1.0 - sum(MCV frequencies)) / (ndistinct - ndistinct(MCV list))

but it's worth pointing out the ndistinct values are multi-variate for the
columns referenced by the equality conditions.

Note: Only the "full match" limit is currently implemented.


Hashed MCV (not yet implemented)
--------------------------------

Regular MCV lists have to include actual values for each item, so if those items
are large the list may be quite large. This is especially true for multi-variate
MCV lists, although the current implementation partially mitigates this by
performing de-duplicating the values before storing them on disk.

It's possible to only store hashes (32-bit values) instead of the actual values,
significantly reducing the space requirements. Obviously, this would only make
the MCV lists useful for estimating equality conditions (assuming the 32-bit
hashes make the collisions rare enough).

This might also complicate matching the columns to available stats.


TODO Consider implementing hashed MCV list, storing just 32-bit hashes instead
     of the actual values. This type of MCV list will be useful only for
     estimating equality clauses, and will reduce space requirements for large
     varlena types (in such cases we usually only want equality anyway).

TODO Currently there's no logic to consider building only a MCV list (and not
     building the histogram at all), except for doing this decision manually in
     ADD STATISTICS.


Inspecting the MCV list
-----------------------

Inspecting the regular (per-attribute) MCV lists is trivial, as it's enough
to select the columns from pg_stats - the data is encoded as anyarrays, so we
simply get the text representation of the arrays.

With multivariate MCV lits it's not that simple due to the possible mix of
data types. It might be possible to produce similar array-like representation,
but that'd unnecessarily complicate further processing and analysis of the MCV
list. Instead, there's a SRF function providing values, frequencies etc.

    SELECT * FROM pg_mcv_list_items();

It has two input parameters:

    oid   - OID of the MCV list (pg_statistic_ext.staoid)

and produces a table with these columns:

    - item ID (0...nitems-1)
    - values (string array)
    - nulls only (boolean array)
    - frequency (double precision)
