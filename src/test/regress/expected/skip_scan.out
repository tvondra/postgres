set work_mem='100MB';
set effective_cache_size='24GB';
set random_page_cost=2.0;
set track_io_timing to off;
set enable_seqscan to off;
set client_min_messages=error;
-- set skipscan_skipsupport_enabled=false;
-- set skipscan_prefix_cols=0;
set vacuum_freeze_min_age = 0;
set cursor_tuple_fraction=1.000;
create extension if not exists pageinspect; -- just to have it
-- set statement_timeout='4s';
reset client_min_messages;
-- Set log_btree_verbosity to 1 without depending on having that patch
-- applied (HACK, just sets commit_siblings instead when we don't have that
-- patch available):
select set_config((select coalesce((select name from pg_settings where name = 'log_btree_verbosity'), 'commit_siblings')), '1', false);
 set_config 
------------
 1
(1 row)

select set_config((select coalesce((select name from pg_settings where name = 'enable_indexscan_prefetch'), 'enable_tidscan')), 'false', false);
 set_config 
------------
 off
(1 row)

-- Establish if this server is master or the patch -- want to skip stress
-- tests if it's the latter
--
-- Reminder: Don't vary the database state between master and patch (just the
-- tests run, which must be read-only)
select (setting = '5432') as testing_patch from pg_settings where name = 'port'
       \gset
-- Quick sanity check, to make it obvious when you forgot to initdb correctly:
-- Shows the available skip support routines in the database
select
  amp.oid as skip_proc_oid,
  amp.amproc::regproc as proc,
  opf.opfname as opfamily_name,
  opc.opcname as opclass_name,
  opc.opcintype::regtype as opcintype
from pg_am as am
join pg_opclass as opc on opc.opcmethod = am.oid
join pg_opfamily as opf on opc.opcfamily = opf.oid
join pg_amproc as amp on amp.amprocfamily = opf.oid and
    amp.amproclefttype = opc.opcintype and amp.amprocnum = 6
where am.amname = 'btree'
order by 1, 2, 3, 4;
 skip_proc_oid |         proc          | opfamily_name |  opclass_name   |          opcintype          
---------------+-----------------------+---------------+-----------------+-----------------------------
         10004 | btboolskipsupport     | bool_ops      | bool_ops        | boolean
         10014 | btcharskipsupport     | char_ops      | char_ops        | "char"
         10018 | date_skipsupport      | datetime_ops  | date_ops        | date
         10024 | timestamp_skipsupport | datetime_ops  | timestamp_ops   | timestamp without time zone
         10030 | timestamp_skipsupport | datetime_ops  | timestamptz_ops | timestamp with time zone
         10050 | btint2skipsupport     | integer_ops   | int2_ops        | smallint
         10059 | btint4skipsupport     | integer_ops   | int4_ops        | integer
         10068 | btint8skipsupport     | integer_ops   | int8_ops        | bigint
         10083 | btoidskipsupport      | oid_ops       | oid_ops         | oid
         10115 | uuid_skipsupport      | uuid_ops      | uuid_ops        | uuid
(10 rows)

set client_min_messages=error;
drop table if exists fuzz_skip_scan;
reset client_min_messages;
\getenv abs_srcdir PG_ABS_SRCDIR
\set filename :abs_srcdir '/data/fuzz_table.sql'
\i :filename;
CREATE TABLE public.fuzz_skip_scan (
    id integer NOT NULL,
    a integer,
    b integer,
    c integer,
    d integer
);
ALTER TABLE public.fuzz_skip_scan OWNER TO pg;
create index fuzz_skip_scan_abcd on public.fuzz_skip_scan(a, b, c, d);
create index fuzz_skip_scan_abcd_nullsfirst on public.fuzz_skip_scan(a nulls first, b nulls first, c nulls first, d nulls first);
CREATE SEQUENCE public.fuzz_skip_scan_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE public.fuzz_skip_scan_id_seq OWNER TO pg;
ALTER SEQUENCE public.fuzz_skip_scan_id_seq OWNED BY public.fuzz_skip_scan.id;
ALTER TABLE ONLY public.fuzz_skip_scan ALTER COLUMN id SET DEFAULT nextval('public.fuzz_skip_scan_id_seq'::regclass);
COPY public.fuzz_skip_scan (id, a, b, c, d) FROM stdin;
SELECT pg_catalog.setval('public.fuzz_skip_scan_id_seq', 150000, true);
 setval 
--------
 150000
(1 row)

-- Force index scan
set enable_bitmapscan to off;
set enable_indexonlyscan to off;
set enable_indexscan to on;
-- Forward can test case for bug where we neglected to make NULL tuple values always advance skip arrays
--
-- Recall that this is the initial bug that Mark Dilger found, where we don't
-- return tuples with NULLs.  It was fixed by commit b75fedca.
select *
from fuzz_skip_scan
where b = 12 and d < 16
order by a, b, c, d;
   id   | a  | b  | c  | d  
--------+----+----+----+----
 147468 |  3 | 12 | 32 | 10
 111578 |  9 | 12 | 30 | 12
 141698 |  9 | 12 | 99 |  9
 141109 | 11 | 12 |  4 |  7
 127313 | 12 | 12 | 22 |  5
  78631 | 16 | 12 | 83 | 12
 133908 | 16 | 12 |    | 15
  87105 | 20 | 12 | 49 |  9
  55610 | 20 | 12 |    |  7
  23673 |    | 12 | 11 |  3
(10 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where b = 12 and d < 16
order by a, b, c, d;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Index Scan using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..3617.89 rows=267 width=20) (actual rows=10.00 loops=1)
   Index Cond: ((b = 12) AND (d < 16))
   Index Searches: 23
   Buffers: shared hit=124
(4 rows)

-- Test case associated with failure to call _bt_start_array_keys() query #1:
select *
from fuzz_skip_scan
where
  a in (9, 10) and b < 3 and c > 42
order by a desc, b desc, c desc, d desc;
   id   | a  | b |  c  |  d   
--------+----+---+-----+------
  54139 | 10 | 2 | 100 | 8018
  39155 | 10 | 2 | 100 | 7475
  92848 | 10 | 2 | 100 | 7153
 108579 | 10 | 2 | 100 | 6677
  40789 | 10 | 2 | 100 | 3512
  87806 | 10 | 2 | 100 | 2160
 118327 | 10 | 2 |  99 |     
  53744 | 10 | 2 |  99 | 5224
  27032 | 10 | 2 |  99 | 5149
  71746 | 10 | 2 |  98 | 9899
 136222 | 10 | 2 |  98 | 6350
  62647 | 10 | 2 |  98 | 5701
   2751 | 10 | 2 |  98 | 1357
    996 | 10 | 2 |  98 | 1192
  61145 | 10 | 2 |  97 | 9347
  86667 | 10 | 2 |  97 | 4850
  60958 | 10 | 2 |  97 | 2862
 120758 | 10 | 2 |  96 | 6412
 117831 | 10 | 2 |  96 | 5101
  14309 | 10 | 2 |  96 | 4536
  72791 | 10 | 2 |  96 | 1592
  18804 | 10 | 2 |  95 |     
  74228 | 10 | 2 |  95 | 2768
 109542 | 10 | 2 |  95 | 1962
  23097 | 10 | 2 |  94 | 5977
  49846 | 10 | 2 |  94 | 4708
  91735 | 10 | 2 |  93 | 7274
 142917 | 10 | 2 |  93 | 5179
  48214 | 10 | 2 |  93 |  239
  69908 | 10 | 2 |  91 |  589
 102295 | 10 | 2 |  90 | 2589
 109400 | 10 | 2 |  90 | 2060
 114879 | 10 | 2 |  89 | 9503
  46209 | 10 | 2 |  89 | 2105
  61604 | 10 | 2 |  88 |     
  90808 | 10 | 2 |  88 | 9358
  80484 | 10 | 2 |  88 | 7252
 104663 | 10 | 2 |  88 |   64
 126579 | 10 | 2 |  87 | 5974
  17759 | 10 | 2 |  87 |   84
   3446 | 10 | 2 |  86 | 4186
  54751 | 10 | 2 |  86 | 2232
  94091 | 10 | 2 |  86 | 1372
  61573 | 10 | 2 |  85 | 6380
  64585 | 10 | 2 |  85 | 3790
 124551 | 10 | 2 |  85 | 3285
  46301 | 10 | 2 |  84 | 4390
  32284 | 10 | 2 |  84 | 2857
  85633 | 10 | 2 |  84 |  254
  13436 | 10 | 2 |  83 | 7911
 131277 | 10 | 2 |  83 | 3893
  17068 | 10 | 2 |  83 | 1270
 105602 | 10 | 2 |  83 |  564
 122306 | 10 | 2 |  82 | 9640
   8770 | 10 | 2 |  82 | 9426
  89555 | 10 | 2 |  82 | 2770
  67668 | 10 | 2 |  81 | 5263
 102354 | 10 | 2 |  80 | 1897
  93206 | 10 | 2 |  78 | 9957
  34863 | 10 | 2 |  77 |     
 113016 | 10 | 2 |  77 | 8864
  65469 | 10 | 2 |  76 | 8418
  71357 | 10 | 2 |  76 | 6933
 136367 | 10 | 2 |  76 | 4091
  57492 | 10 | 2 |  76 | 3197
  53795 | 10 | 2 |  75 | 9647
  50176 | 10 | 2 |  75 | 3838
  64187 | 10 | 2 |  75 | 2236
  94826 | 10 | 2 |  75 |  443
  95286 | 10 | 2 |  74 | 8206
  24310 | 10 | 2 |  74 | 7342
 107467 | 10 | 2 |  74 | 4460
  12416 | 10 | 2 |  74 | 3033
 118414 | 10 | 2 |  74 | 1812
  99613 | 10 | 2 |  73 | 5045
 149299 | 10 | 2 |  73 | 3330
  19629 | 10 | 2 |  73 | 2912
 109190 | 10 | 2 |  73 | 2760
 105247 | 10 | 2 |  73 | 2452
 139604 | 10 | 2 |  73 |  194
   1029 | 10 | 2 |  72 | 9366
  35650 | 10 | 2 |  72 | 1781
  41538 | 10 | 2 |  72 |  939
  26750 | 10 | 2 |  71 | 9203
  83649 | 10 | 2 |  71 | 8337
 123420 | 10 | 2 |  71 | 1546
 106400 | 10 | 2 |  71 |  553
 110792 | 10 | 2 |  71 |   49
  31048 | 10 | 2 |  70 | 7810
  16841 | 10 | 2 |  69 | 8522
 132776 | 10 | 2 |  69 | 4891
   6150 | 10 | 2 |  69 |  792
 125848 | 10 | 2 |  68 | 8063
  95111 | 10 | 2 |  67 |     
  91620 | 10 | 2 |  67 | 3278
 135349 | 10 | 2 |  67 |  688
  42441 | 10 | 2 |  66 | 3310
  10718 | 10 | 2 |  65 | 9042
 102867 | 10 | 2 |  65 | 8590
  85751 | 10 | 2 |  65 | 8294
  55956 | 10 | 2 |  65 | 6842
  70067 | 10 | 2 |  65 | 5740
 121549 | 10 | 2 |  65 | 5641
  32418 | 10 | 2 |  65 | 2073
  79728 | 10 | 2 |  64 | 4550
  78617 | 10 | 2 |  64 |  296
 147178 | 10 | 2 |  64 |  268
  75871 | 10 | 2 |  63 | 7319
 106776 | 10 | 2 |  63 | 2982
  68331 | 10 | 2 |  63 | 2139
  16834 | 10 | 2 |  62 |     
 133356 | 10 | 2 |  62 | 3098
  39402 | 10 | 2 |  61 | 7053
  38114 | 10 | 2 |  61 | 2616
   4262 | 10 | 2 |  61 | 2205
  21288 | 10 | 2 |  61 |  535
  24642 | 10 | 2 |  60 | 7323
  52649 | 10 | 2 |  60 | 7200
 101132 | 10 | 2 |  60 | 3124
  66515 | 10 | 2 |  59 | 8520
   8864 | 10 | 2 |  59 |  833
  11181 | 10 | 2 |  59 |   82
 105139 | 10 | 2 |  57 | 9832
 131879 | 10 | 2 |  57 | 9335
 131354 | 10 | 2 |  57 | 4843
  84479 | 10 | 2 |  55 |     
 103332 | 10 | 2 |  55 | 8934
  90133 | 10 | 2 |  54 | 2365
  79329 | 10 | 2 |  54 | 1612
   9779 | 10 | 2 |  53 | 9174
  57505 | 10 | 2 |  53 | 7014
  66208 | 10 | 2 |  53 | 6723
  71904 | 10 | 2 |  53 | 5921
  63491 | 10 | 2 |  53 | 3062
   8330 | 10 | 2 |  53 | 1029
  25975 | 10 | 2 |  52 | 3024
  71874 | 10 | 2 |  51 |     
 132162 | 10 | 2 |  51 | 7750
   9964 | 10 | 2 |  51 | 3312
  81390 | 10 | 2 |  51 | 1620
  33104 | 10 | 2 |  50 |     
   9752 | 10 | 2 |  50 | 6348
  67252 | 10 | 2 |  49 | 9170
  19360 | 10 | 2 |  49 | 8022
   2872 | 10 | 2 |  49 | 6275
  87087 | 10 | 2 |  49 | 3716
  54987 | 10 | 2 |  49 |  253
  46473 | 10 | 2 |  48 | 2647
  30658 | 10 | 2 |  47 | 7549
 103425 | 10 | 2 |  46 |     
  28137 | 10 | 2 |  46 | 9187
  43031 | 10 | 2 |  46 | 3818
  39223 | 10 | 2 |  46 | 2799
 124180 | 10 | 2 |  45 | 9799
  33220 | 10 | 2 |  45 | 9425
  27269 | 10 | 2 |  45 | 8200
 113645 | 10 | 2 |  45 | 2901
  76731 | 10 | 2 |  44 | 5402
  91099 | 10 | 2 |  43 | 2993
  18742 | 10 | 2 |  43 | 1137
  26919 | 10 | 1 | 100 | 8152
 147966 | 10 | 1 | 100 |  675
 101209 | 10 | 1 |  99 |     
  65347 | 10 | 1 |  99 | 8787
 145304 | 10 | 1 |  99 | 5278
   9283 | 10 | 1 |  99 | 3010
 114497 | 10 | 1 |  99 | 1533
 137942 | 10 | 1 |  97 | 4348
  75132 | 10 | 1 |  97 |  717
  14435 | 10 | 1 |  96 | 8992
  32881 | 10 | 1 |  96 | 8657
 131959 | 10 | 1 |  96 | 7107
 110892 | 10 | 1 |  96 | 6851
  52335 | 10 | 1 |  95 | 9236
  82331 | 10 | 1 |  95 | 7470
  70767 | 10 | 1 |  95 | 6373
  66348 | 10 | 1 |  95 | 4938
 118787 | 10 | 1 |  95 | 4187
  29832 | 10 | 1 |  95 | 3524
  16655 | 10 | 1 |  95 | 2635
 137183 | 10 | 1 |  95 | 1663
  86605 | 10 | 1 |  94 | 6419
 106457 | 10 | 1 |  94 | 2783
  49070 | 10 | 1 |  93 | 9437
  56834 | 10 | 1 |  93 | 9184
  52709 | 10 | 1 |  93 | 3316
 132034 | 10 | 1 |  93 | 2932
 141175 | 10 | 1 |  92 | 8425
  25480 | 10 | 1 |  92 | 8084
  83265 | 10 | 1 |  92 | 4252
  20249 | 10 | 1 |  91 | 1715
  31722 | 10 | 1 |  90 |     
  73202 | 10 | 1 |  90 | 9073
 103807 | 10 | 1 |  90 | 6920
  76192 | 10 | 1 |  90 | 2184
  52909 | 10 | 1 |  89 | 9502
  57329 | 10 | 1 |  89 | 9270
 100670 | 10 | 1 |  89 | 7624
  62208 | 10 | 1 |  89 | 5890
  43203 | 10 | 1 |  89 | 4138
  23303 | 10 | 1 |  88 | 8025
  10764 | 10 | 1 |  88 | 6471
 133812 | 10 | 1 |  88 | 5300
  10712 | 10 | 1 |  86 | 8074
  83095 | 10 | 1 |  86 | 4968
  81533 | 10 | 1 |  86 | 4560
  92787 | 10 | 1 |  85 |     
  69263 | 10 | 1 |  85 | 5984
 137044 | 10 | 1 |  85 | 4102
  39299 | 10 | 1 |  85 | 2174
  19731 | 10 | 1 |  83 | 8939
  34563 | 10 | 1 |  83 | 5056
  26420 | 10 | 1 |  83 | 3134
  67417 | 10 | 1 |  83 |  520
 130619 | 10 | 1 |  82 |     
 143306 | 10 | 1 |  82 | 8956
 115801 | 10 | 1 |  82 | 5554
  88006 | 10 | 1 |  82 | 3673
 144895 | 10 | 1 |  82 | 2731
  54505 | 10 | 1 |  82 | 2353
  57517 | 10 | 1 |  81 | 8700
  25061 | 10 | 1 |  81 | 5589
  17572 | 10 | 1 |  81 | 3011
 133546 | 10 | 1 |  81 | 1872
  91857 | 10 | 1 |  81 |  210
  86753 | 10 | 1 |  80 | 9729
  99888 | 10 | 1 |  80 | 9345
  54075 | 10 | 1 |  80 | 8900
  81297 | 10 | 1 |  80 | 4765
 105194 | 10 | 1 |  79 | 9303
 114258 | 10 | 1 |  79 | 5541
  63330 | 10 | 1 |  79 | 3598
  45948 | 10 | 1 |  79 | 2263
  12463 | 10 | 1 |  78 | 5965
  33742 | 10 | 1 |  78 | 4812
  93189 | 10 | 1 |  78 | 2401
   6582 | 10 | 1 |  77 | 6802
  91719 | 10 | 1 |  77 | 2747
  41091 | 10 | 1 |  77 | 1767
 125870 | 10 | 1 |  76 | 7941
  49501 | 10 | 1 |  76 | 7459
 118727 | 10 | 1 |  76 | 5360
  62763 | 10 | 1 |  76 | 3609
  66498 | 10 | 1 |  76 | 2842
  14920 | 10 | 1 |  76 | 1078
 121381 | 10 | 1 |  75 | 9513
 131278 | 10 | 1 |  75 | 6860
  12306 | 10 | 1 |  75 | 4565
 115168 | 10 | 1 |  75 | 4151
 117616 | 10 | 1 |  74 | 9636
  74571 | 10 | 1 |  74 | 8906
  59799 | 10 | 1 |  74 | 8454
 110224 | 10 | 1 |  74 | 6755
  63638 | 10 | 1 |  74 |  256
  25932 | 10 | 1 |  73 | 7211
  37996 | 10 | 1 |  72 | 9769
  51919 | 10 | 1 |  71 | 9901
  45310 | 10 | 1 |  71 | 9873
  19825 | 10 | 1 |  71 | 8497
  71300 | 10 | 1 |  71 | 6741
 143798 | 10 | 1 |  71 | 2694
 137344 | 10 | 1 |  71 | 1132
  79783 | 10 | 1 |  70 | 6083
   6785 | 10 | 1 |  70 |  655
  76144 | 10 | 1 |  69 | 9050
  15712 | 10 | 1 |  69 | 6764
 103062 | 10 | 1 |  69 | 3455
  20965 | 10 | 1 |  68 | 2841
 104494 | 10 | 1 |  67 |     
  77326 | 10 | 1 |  67 | 9971
 119818 | 10 | 1 |  67 | 2158
  81838 | 10 | 1 |  67 |  205
   6887 | 10 | 1 |  66 |     
  77384 | 10 | 1 |  66 |     
  80613 | 10 | 1 |  66 | 4853
 104491 | 10 | 1 |  66 | 2615
 100248 | 10 | 1 |  66 | 2420
  76786 | 10 | 1 |  66 |  601
  75924 | 10 | 1 |  65 | 7724
  56005 | 10 | 1 |  65 | 5820
  22649 | 10 | 1 |  64 | 7966
  44929 | 10 | 1 |  64 | 3817
 111817 | 10 | 1 |  64 | 1433
  16511 | 10 | 1 |  64 | 1289
    940 | 10 | 1 |  63 | 4487
  46817 | 10 | 1 |  62 | 8810
 141059 | 10 | 1 |  62 | 5643
  98507 | 10 | 1 |  62 | 4823
  66789 | 10 | 1 |  62 | 2841
  94583 | 10 | 1 |  62 | 1677
 144302 | 10 | 1 |  61 | 6978
  86468 | 10 | 1 |  61 | 5285
 117471 | 10 | 1 |  61 | 4135
  42483 | 10 | 1 |  61 | 3916
 115981 | 10 | 1 |  61 | 3348
 140621 | 10 | 1 |  61 |  443
  24787 | 10 | 1 |  60 |     
  57125 | 10 | 1 |  60 | 9909
 135796 | 10 | 1 |  60 | 9872
  45137 | 10 | 1 |  59 | 8611
   2811 | 10 | 1 |  59 | 8547
  78883 | 10 | 1 |  59 | 8521
  24114 | 10 | 1 |  59 | 5955
   5625 | 10 | 1 |  59 | 5331
  52599 | 10 | 1 |  59 |   19
 138623 | 10 | 1 |  58 | 8728
 121683 | 10 | 1 |  58 | 4840
   7316 | 10 | 1 |  58 | 4113
 133436 | 10 | 1 |  58 | 1740
  79501 | 10 | 1 |  57 | 8323
 123471 | 10 | 1 |  57 | 1196
 136079 | 10 | 1 |  56 | 7629
  63338 | 10 | 1 |  56 | 6863
  23171 | 10 | 1 |  55 | 8472
  49876 | 10 | 1 |  55 | 6915
 122792 | 10 | 1 |  55 | 4663
 121206 | 10 | 1 |  55 | 1837
  32098 | 10 | 1 |  55 |  599
  60513 | 10 | 1 |  54 | 6118
 132053 | 10 | 1 |  54 | 5089
  71909 | 10 | 1 |  53 |     
    310 | 10 | 1 |  53 | 9162
 101478 | 10 | 1 |  53 | 5145
 140521 | 10 | 1 |  53 | 3497
  52352 | 10 | 1 |  53 | 1838
 113481 | 10 | 1 |  53 | 1112
  95594 | 10 | 1 |  52 | 2636
  61126 | 10 | 1 |  52 | 1546
 140239 | 10 | 1 |  51 | 4038
  11288 | 10 | 1 |  51 | 2866
 115516 | 10 | 1 |  51 | 2338
  21400 | 10 | 1 |  51 |  561
   2082 | 10 | 1 |  50 | 5481
 137169 | 10 | 1 |  50 | 2017
  70716 | 10 | 1 |  49 | 9138
  67985 | 10 | 1 |  49 | 8711
  34768 | 10 | 1 |  49 | 6835
  46204 | 10 | 1 |  49 | 4921
 136815 | 10 | 1 |  49 | 3489
  74459 | 10 | 1 |  48 | 9468
  39082 | 10 | 1 |  48 | 8230
 111320 | 10 | 1 |  48 | 7036
  34645 | 10 | 1 |  48 | 6937
  58467 | 10 | 1 |  47 |   31
 114359 | 10 | 1 |  46 | 9161
 105738 | 10 | 1 |  46 | 5575
 144292 | 10 | 1 |  46 | 5219
 117170 | 10 | 1 |  46 | 1633
 121447 | 10 | 1 |  45 | 8803
  84766 | 10 | 1 |  45 | 8076
 145447 | 10 | 1 |  45 | 1836
  25296 | 10 | 1 |  44 | 9470
  64628 | 10 | 1 |  44 | 7368
  57122 | 10 | 1 |  43 | 9769
  10019 | 10 | 1 |  43 | 4559
  88324 | 10 | 1 |  43 | 2959
  99381 |  9 | 2 | 100 |     
 113909 |  9 | 2 | 100 | 8954
 113765 |  9 | 2 | 100 |   51
 100401 |  9 | 2 |  99 | 3266
  45418 |  9 | 2 |  99 | 2324
 101998 |  9 | 2 |  98 |     
  68905 |  9 | 2 |  98 | 9293
  60657 |  9 | 2 |  98 | 7513
   8099 |  9 | 2 |  98 |  719
 131017 |  9 | 2 |  97 | 7403
 108362 |  9 | 2 |  97 | 2578
  54584 |  9 | 2 |  96 | 7252
  78308 |  9 | 2 |  96 | 6779
  75706 |  9 | 2 |  96 | 4339
 120508 |  9 | 2 |  96 | 2761
  64755 |  9 | 2 |  95 | 8267
  84838 |  9 | 2 |  95 | 2722
 113862 |  9 | 2 |  95 |  566
 125346 |  9 | 2 |  94 | 8844
 102069 |  9 | 2 |  93 | 1689
   4767 |  9 | 2 |  92 |     
  57047 |  9 | 2 |  92 | 8552
  96528 |  9 | 2 |  92 | 5579
  59881 |  9 | 2 |  91 | 9108
  56155 |  9 | 2 |  91 | 7154
  52755 |  9 | 2 |  91 | 5561
 128628 |  9 | 2 |  91 | 1718
  98752 |  9 | 2 |  90 | 9924
  84696 |  9 | 2 |  90 | 5565
 143060 |  9 | 2 |  90 | 1325
   1402 |  9 | 2 |  89 | 4925
  80694 |  9 | 2 |  89 | 1200
  12452 |  9 | 2 |  88 | 6855
 112135 |  9 | 2 |  87 | 6394
  65583 |  9 | 2 |  87 | 4716
  46114 |  9 | 2 |  87 | 4083
  76017 |  9 | 2 |  86 | 9879
 131991 |  9 | 2 |  86 | 7674
 118030 |  9 | 2 |  85 | 7870
  92720 |  9 | 2 |  85 | 4874
 134624 |  9 | 2 |  84 | 9400
  58692 |  9 | 2 |  84 | 8231
 120034 |  9 | 2 |  84 | 5754
 142339 |  9 | 2 |  84 | 3889
  21335 |  9 | 2 |  84 | 3635
  67463 |  9 | 2 |  83 | 6805
  83449 |  9 | 2 |  83 | 6242
  16788 |  9 | 2 |  83 | 5370
 144306 |  9 | 2 |  83 | 5349
 116013 |  9 | 2 |  82 | 6447
   1511 |  9 | 2 |  81 | 5283
 117566 |  9 | 2 |  81 |  773
  57229 |  9 | 2 |  80 | 2715
 118772 |  9 | 2 |  80 |  309
  16552 |  9 | 2 |  79 | 3456
  11898 |  9 | 2 |  79 | 2688
  55846 |  9 | 2 |  79 | 1279
 134808 |  9 | 2 |  78 |     
  22879 |  9 | 2 |  78 | 9142
  92667 |  9 | 2 |  78 | 7655
  81933 |  9 | 2 |  78 | 4867
  35260 |  9 | 2 |  78 | 4162
  87575 |  9 | 2 |  78 | 1478
  61336 |  9 | 2 |  77 | 4947
  46089 |  9 | 2 |  77 | 3989
   2848 |  9 | 2 |  77 | 2402
  63938 |  9 | 2 |  76 | 6956
 114891 |  9 | 2 |  76 | 6680
  33775 |  9 | 2 |  76 | 6505
 114117 |  9 | 2 |  75 | 6186
  12209 |  9 | 2 |  75 | 6064
  90795 |  9 | 2 |  74 | 9931
  13972 |  9 | 2 |  74 | 6554
  49163 |  9 | 2 |  74 | 4033
 108673 |  9 | 2 |  74 | 2807
 110366 |  9 | 2 |  74 | 1559
  96687 |  9 | 2 |  73 | 6087
  50333 |  9 | 2 |  73 | 3770
 105010 |  9 | 2 |  72 | 5700
 105571 |  9 | 2 |  72 | 4561
  31148 |  9 | 2 |  72 | 4515
  97349 |  9 | 2 |  72 | 2690
  73602 |  9 | 2 |  71 | 3488
 128558 |  9 | 2 |  70 | 1395
 144216 |  9 | 2 |  69 |     
  36996 |  9 | 2 |  69 | 3319
 119493 |  9 | 2 |  68 | 8760
  11580 |  9 | 2 |  68 | 4065
 101608 |  9 | 2 |  67 | 7164
  18143 |  9 | 2 |  66 | 6853
  18844 |  9 | 2 |  66 | 6832
 140363 |  9 | 2 |  66 | 4215
  80500 |  9 | 2 |  65 | 2828
 147032 |  9 | 2 |  64 | 7197
 140981 |  9 | 2 |  64 | 6352
 124406 |  9 | 2 |  64 | 5832
   7661 |  9 | 2 |  64 | 3496
   9362 |  9 | 2 |  63 |     
 104194 |  9 | 2 |  63 | 9959
 119989 |  9 | 2 |  62 | 9079
  81431 |  9 | 2 |  62 | 5188
 130363 |  9 | 2 |  62 | 2795
 112939 |  9 | 2 |  61 | 6956
  69428 |  9 | 2 |  61 | 6487
  61118 |  9 | 2 |  60 | 9532
  72973 |  9 | 2 |  60 | 6593
  40959 |  9 | 2 |  60 | 5610
  98020 |  9 | 2 |  60 | 4866
  79711 |  9 | 2 |  60 |  141
  84252 |  9 | 2 |  59 |     
 121269 |  9 | 2 |  59 | 9412
 139575 |  9 | 2 |  59 | 9309
  17512 |  9 | 2 |  59 | 5249
  83289 |  9 | 2 |  58 | 7418
  70555 |  9 | 2 |  58 | 7321
    439 |  9 | 2 |  58 | 6778
  21192 |  9 | 2 |  58 | 5429
 149130 |  9 | 2 |  57 | 9010
  74302 |  9 | 2 |  57 | 3059
  90450 |  9 | 2 |  57 | 1910
  18943 |  9 | 2 |  56 | 7172
  14199 |  9 | 2 |  56 | 3533
 107824 |  9 | 2 |  55 | 3885
  71698 |  9 | 2 |  54 | 9873
 120473 |  9 | 2 |  54 | 9775
 132536 |  9 | 2 |  54 | 6941
  69586 |  9 | 2 |  54 | 3075
  31541 |  9 | 2 |  54 |   43
 102757 |  9 | 2 |  53 | 8739
  11238 |  9 | 2 |  52 | 6703
 137281 |  9 | 2 |  52 | 5128
  35985 |  9 | 2 |  52 | 1985
  56011 |  9 | 2 |  51 | 1807
  57099 |  9 | 2 |  50 | 9471
 133590 |  9 | 2 |  50 | 8383
  58149 |  9 | 2 |  50 | 7333
  58816 |  9 | 2 |  50 | 3550
  88416 |  9 | 2 |  50 | 1932
  45734 |  9 | 2 |  50 | 1582
 121437 |  9 | 2 |  49 | 9009
 117585 |  9 | 2 |  49 | 4028
  37599 |  9 | 2 |  49 |  895
 103858 |  9 | 2 |  49 |   92
   4140 |  9 | 2 |  48 |     
 127784 |  9 | 2 |  48 | 5897
 126479 |  9 | 2 |  48 | 5410
  18594 |  9 | 2 |  48 | 5171
 116006 |  9 | 2 |  48 | 1388
 123928 |  9 | 2 |  48 |  621
 142886 |  9 | 2 |  47 | 1203
  57888 |  9 | 2 |  46 |     
  99102 |  9 | 2 |  46 | 9108
 128334 |  9 | 2 |  46 | 4929
  91101 |  9 | 2 |  46 | 4725
 133401 |  9 | 2 |  46 | 2658
 141104 |  9 | 2 |  45 | 9342
 132667 |  9 | 2 |  45 | 5550
  87159 |  9 | 2 |  45 | 5528
  30886 |  9 | 2 |  44 | 1042
    429 |  9 | 2 |  44 |  430
  12988 |  9 | 2 |  43 | 8208
  15668 |  9 | 2 |  43 | 7837
 105802 |  9 | 2 |  43 | 1921
  95897 |  9 | 1 | 100 | 8817
 102691 |  9 | 1 | 100 | 7733
  97740 |  9 | 1 | 100 | 3042
  46139 |  9 | 1 | 100 | 1768
  11965 |  9 | 1 | 100 | 1545
 144480 |  9 | 1 | 100 | 1366
 108724 |  9 | 1 | 100 |  957
  73151 |  9 | 1 | 100 |  629
 121917 |  9 | 1 |  99 | 5601
    160 |  9 | 1 |  99 | 5115
 114979 |  9 | 1 |  98 | 5313
 112185 |  9 | 1 |  98 | 5110
  19447 |  9 | 1 |  98 | 1159
  26884 |  9 | 1 |  97 | 4628
 131035 |  9 | 1 |  97 | 4465
 123427 |  9 | 1 |  97 | 1218
 119541 |  9 | 1 |  96 | 7524
  70437 |  9 | 1 |  96 | 4527
  23796 |  9 | 1 |  96 | 1936
  46725 |  9 | 1 |  96 |  648
 110586 |  9 | 1 |  96 |  639
 149420 |  9 | 1 |  95 | 7675
  58558 |  9 | 1 |  95 | 7325
  70416 |  9 | 1 |  95 | 1735
  99873 |  9 | 1 |  94 | 8693
 117881 |  9 | 1 |  94 | 7441
  64847 |  9 | 1 |  94 | 4015
  74453 |  9 | 1 |  94 | 3566
  24479 |  9 | 1 |  94 |  741
  89279 |  9 | 1 |  93 | 9239
  23156 |  9 | 1 |  93 | 9110
 105214 |  9 | 1 |  93 | 4589
 145466 |  9 | 1 |  92 | 8651
 145177 |  9 | 1 |  92 | 8078
  23795 |  9 | 1 |  92 | 7696
 137128 |  9 | 1 |  92 | 5134
 145175 |  9 | 1 |  92 | 4599
 117604 |  9 | 1 |  91 | 7990
  40751 |  9 | 1 |  91 | 7644
 148252 |  9 | 1 |  90 | 7236
  49228 |  9 | 1 |  90 | 4565
  12029 |  9 | 1 |  89 | 9386
  36595 |  9 | 1 |  89 | 3573
  37290 |  9 | 1 |  89 | 2366
  68839 |  9 | 1 |  88 |     
  81908 |  9 | 1 |  88 | 6991
 111923 |  9 | 1 |  88 | 2307
    688 |  9 | 1 |  87 | 9657
 142267 |  9 | 1 |  87 | 8087
  51414 |  9 | 1 |  87 | 3151
  77034 |  9 | 1 |  87 |  142
  95638 |  9 | 1 |  86 | 8276
  76195 |  9 | 1 |  86 | 8115
 121791 |  9 | 1 |  86 | 6993
 104595 |  9 | 1 |  86 | 6380
 119429 |  9 | 1 |  85 |     
 114282 |  9 | 1 |  85 | 9747
   2617 |  9 | 1 |  85 | 8483
  85398 |  9 | 1 |  85 | 8310
 140329 |  9 | 1 |  85 | 5818
  10735 |  9 | 1 |  85 | 4522
   3810 |  9 | 1 |  85 | 4229
 115811 |  9 | 1 |  84 | 7580
 125550 |  9 | 1 |  84 | 7243
  41651 |  9 | 1 |  84 | 4606
  41712 |  9 | 1 |  84 | 1638
  56408 |  9 | 1 |  83 | 2950
  83851 |  9 | 1 |  83 |  766
 108326 |  9 | 1 |  82 | 7003
 113613 |  9 | 1 |  82 | 6983
 130653 |  9 | 1 |  82 | 6606
 146930 |  9 | 1 |  82 | 2678
  12981 |  9 | 1 |  82 | 1604
   9265 |  9 | 1 |  81 | 7260
  29667 |  9 | 1 |  81 | 6763
  24541 |  9 | 1 |  81 | 6529
  57562 |  9 | 1 |  81 | 6440
  41511 |  9 | 1 |  81 | 3966
  87678 |  9 | 1 |  80 | 8727
  49670 |  9 | 1 |  80 | 4019
  42598 |  9 | 1 |  80 |  760
  75762 |  9 | 1 |  79 | 8373
  28950 |  9 | 1 |  79 | 7087
  96106 |  9 | 1 |  79 | 2342
 138440 |  9 | 1 |  78 | 8608
   1463 |  9 | 1 |  78 | 5227
  59450 |  9 | 1 |  78 | 3689
  58305 |  9 | 1 |  77 | 8615
 131395 |  9 | 1 |  77 | 5982
  88001 |  9 | 1 |  76 | 8490
  25349 |  9 | 1 |  76 | 8071
 128102 |  9 | 1 |  76 | 7573
  56457 |  9 | 1 |  76 | 7517
  91535 |  9 | 1 |  76 | 5883
  50466 |  9 | 1 |  75 | 4400
  56540 |  9 | 1 |  75 | 4059
 113191 |  9 | 1 |  75 |  709
  13655 |  9 | 1 |  75 |  533
 122256 |  9 | 1 |  74 |     
  21307 |  9 | 1 |  74 | 9975
   7765 |  9 | 1 |  74 | 8744
  25229 |  9 | 1 |  74 | 6714
  87571 |  9 | 1 |  74 | 5210
 101494 |  9 | 1 |  74 | 1181
 144501 |  9 | 1 |  74 |  743
 123549 |  9 | 1 |  73 | 8924
  78919 |  9 | 1 |  73 | 8305
   3017 |  9 | 1 |  73 | 5823
 128537 |  9 | 1 |  73 | 3868
 128482 |  9 | 1 |  72 | 6763
 100859 |  9 | 1 |  72 | 5707
 110247 |  9 | 1 |  72 | 2960
  29108 |  9 | 1 |  72 | 2521
 120009 |  9 | 1 |  72 | 1845
 136954 |  9 | 1 |  71 | 8355
  21597 |  9 | 1 |  71 | 6835
  85670 |  9 | 1 |  71 | 6308
  90148 |  9 | 1 |  71 | 5226
 111717 |  9 | 1 |  71 | 2516
  81159 |  9 | 1 |  71 | 1915
 142697 |  9 | 1 |  71 | 1662
 109065 |  9 | 1 |  71 | 1568
  39707 |  9 | 1 |  70 | 8462
    588 |  9 | 1 |  70 | 5750
  20877 |  9 | 1 |  70 | 1724
 125930 |  9 | 1 |  69 | 7122
  25490 |  9 | 1 |  69 | 3828
  75074 |  9 | 1 |  69 |  427
  84623 |  9 | 1 |  68 | 9102
  44805 |  9 | 1 |  68 | 8327
  72029 |  9 | 1 |  68 | 8195
 118604 |  9 | 1 |  68 | 7189
  69943 |  9 | 1 |  68 | 5893
 114796 |  9 | 1 |  68 | 4276
    352 |  9 | 1 |  68 | 2275
  61120 |  9 | 1 |  67 | 7623
  65716 |  9 | 1 |  67 | 1174
 109131 |  9 | 1 |  66 | 8140
 145639 |  9 | 1 |  66 | 3811
  21122 |  9 | 1 |  64 | 9937
  37097 |  9 | 1 |  64 | 7385
 132406 |  9 | 1 |  64 | 5474
  43092 |  9 | 1 |  64 | 4384
  43535 |  9 | 1 |  63 | 7048
  19555 |  9 | 1 |  62 |     
  89477 |  9 | 1 |  62 | 1214
  54638 |  9 | 1 |  61 | 8850
   1949 |  9 | 1 |  61 | 7617
  55569 |  9 | 1 |  61 | 4922
  22374 |  9 | 1 |  61 | 4609
  21008 |  9 | 1 |  61 | 4290
  23639 |  9 | 1 |  60 | 2610
 104632 |  9 | 1 |  60 | 1199
  18902 |  9 | 1 |  60 |  969
 130111 |  9 | 1 |  59 | 7258
  43652 |  9 | 1 |  59 | 6193
  96861 |  9 | 1 |  59 | 4620
 146538 |  9 | 1 |  59 | 3656
 111125 |  9 | 1 |  59 | 3655
  79825 |  9 | 1 |  59 | 2970
 113279 |  9 | 1 |  58 | 6235
  76431 |  9 | 1 |  58 | 4475
  77435 |  9 | 1 |  58 | 3974
  24543 |  9 | 1 |  58 | 2925
 118514 |  9 | 1 |  58 | 1869
 114111 |  9 | 1 |  58 |  929
  98606 |  9 | 1 |  57 | 9444
 144315 |  9 | 1 |  57 | 5984
 126792 |  9 | 1 |  57 | 2673
  22702 |  9 | 1 |  56 | 9179
   6863 |  9 | 1 |  56 | 8270
   3340 |  9 | 1 |  56 | 6632
 147802 |  9 | 1 |  56 | 6388
 121062 |  9 | 1 |  56 | 1186
  38580 |  9 | 1 |  55 | 4440
 134238 |  9 | 1 |  54 | 8805
  39061 |  9 | 1 |  54 | 4151
  67522 |  9 | 1 |  54 | 2498
 118152 |  9 | 1 |  54 |  936
 103482 |  9 | 1 |  54 |  576
 129513 |  9 | 1 |  53 | 9194
  15333 |  9 | 1 |  53 | 5786
  32954 |  9 | 1 |  53 | 2896
  12529 |  9 | 1 |  53 |  328
 148292 |  9 | 1 |  52 | 7213
  66302 |  9 | 1 |  52 | 5527
  54077 |  9 | 1 |  51 | 7857
 123106 |  9 | 1 |  51 | 1172
 132462 |  9 | 1 |  50 | 7246
 114066 |  9 | 1 |  50 |  647
 138387 |  9 | 1 |  49 | 6283
  75811 |  9 | 1 |  49 | 3415
  86711 |  9 | 1 |  49 | 1702
  57101 |  9 | 1 |  49 |  581
 136656 |  9 | 1 |  48 |     
  37080 |  9 | 1 |  48 | 7827
  45997 |  9 | 1 |  48 | 4721
 114211 |  9 | 1 |  48 |  587
   3025 |  9 | 1 |  48 |  446
  16161 |  9 | 1 |  47 |     
 134511 |  9 | 1 |  47 | 5599
  76506 |  9 | 1 |  47 | 5110
 109599 |  9 | 1 |  47 | 3720
  67624 |  9 | 1 |  47 | 3376
  83104 |  9 | 1 |  47 | 1764
 146923 |  9 | 1 |  46 | 8027
  66718 |  9 | 1 |  46 | 1243
  11964 |  9 | 1 |  45 | 2928
  90472 |  9 | 1 |  45 | 1219
 110234 |  9 | 1 |  45 |  578
  87838 |  9 | 1 |  44 | 8030
  73201 |  9 | 1 |  44 | 6173
 130364 |  9 | 1 |  44 | 5600
  33658 |  9 | 1 |  44 | 1315
  98328 |  9 | 1 |  43 | 9938
  56742 |  9 | 1 |  43 | 4452
(735 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where
  a in (9, 10) and b < 3 and c > 42
order by a desc, b desc, c desc, d desc;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..343.30 rows=178 width=20) (actual rows=735.00 loops=1)
   Index Cond: ((a = ANY ('{9,10}'::integer[])) AND (b < 3) AND (c > 42))
   Index Searches: 2
   Buffers: shared hit=748
(4 rows)

-- Test case associated with failure to call _bt_start_array_keys() query #2:
select *
from fuzz_skip_scan
where b in (12, 13) and c >= 59 and d < 1887
order by a desc, b desc, c desc, d desc;
   id   | a  | b  |  c  |  d   
--------+----+----+-----+------
  13966 |    | 13 |  97 | 1524
  92652 |    | 13 |  94 | 1745
  65543 |    | 13 |  93 | 1725
 103850 |    | 13 |  93 |  312
 119562 |    | 13 |  88 |  526
 108388 |    | 13 |  88 |  272
 125970 |    | 13 |  86 | 1008
  62873 |    | 13 |  85 |  709
  11143 |    | 13 |  85 |  111
   9310 |    | 13 |  84 | 1843
  12097 |    | 13 |  84 |  307
 116176 |    | 13 |  83 |  766
  36220 |    | 13 |  83 |  558
  14153 |    | 13 |  81 |  661
  71688 |    | 13 |  79 | 1172
   2066 |    | 13 |  79 |  439
 134258 |    | 13 |  77 | 1737
  58636 |    | 13 |  77 |  312
 106304 |    | 13 |  76 |  164
  21752 |    | 13 |  76 |   52
 125830 |    | 13 |  76 |   15
 123446 |    | 13 |  72 |  653
  78453 |    | 13 |  72 |  600
  63362 |    | 13 |  71 | 1195
  44809 |    | 13 |  71 |  747
  36977 |    | 13 |  71 |  302
  60954 |    | 13 |  70 | 1197
   1666 |    | 13 |  70 |  307
  86960 |    | 13 |  67 | 1030
 102885 |    | 13 |  66 |  187
 111786 |    | 13 |  64 |  442
  38936 |    | 13 |  62 |  682
 119707 |    | 13 |  62 |  546
 129745 |    | 13 |  61 |  892
 115269 |    | 13 |  60 |  182
 147766 |    | 13 |  59 |  673
 124075 |    | 12 |  93 |  202
  65132 |    | 12 |  91 |  456
 107234 |    | 12 |  91 |  417
  37394 |    | 12 |  88 |  314
 148442 |    | 12 |  82 | 1456
  94741 |    | 12 |  81 | 1210
 122438 |    | 12 |  80 | 1540
 117255 |    | 12 |  80 | 1331
  60557 |    | 12 |  79 |  648
  74434 |    | 12 |  73 | 1329
  97495 |    | 12 |  71 | 1250
  53913 |    | 12 |  68 |  164
  59016 |    | 12 |  65 |  525
  83447 |    | 12 |  61 |  619
 111671 |    | 12 |  60 |  288
  45263 | 20 | 13 | 100 | 1019
  26575 | 20 | 13 |  98 | 1229
  98853 | 20 | 13 |  98 |   49
 117146 | 20 | 13 |  97 | 1425
  52608 | 20 | 13 |  95 |  788
 114381 | 20 | 13 |  93 | 1664
 107513 | 20 | 13 |  93 | 1310
  69364 | 20 | 13 |  92 | 1672
  49187 | 20 | 13 |  92 |  152
   9527 | 20 | 13 |  89 | 1724
 138857 | 20 | 13 |  89 |  366
 144379 | 20 | 13 |  88 | 1203
  58077 | 20 | 13 |  83 | 1721
  92606 | 20 | 13 |  79 |  152
  39271 | 20 | 13 |  78 |  435
   1232 | 20 | 13 |  77 | 1813
 145590 | 20 | 13 |  75 |  673
  48464 | 20 | 13 |  73 |  647
  41244 | 20 | 13 |  72 | 1016
  23834 | 20 | 13 |  71 |  811
 136380 | 20 | 13 |  69 | 1813
 137617 | 20 | 13 |  69 |  552
  72837 | 20 | 13 |  68 |  218
   8818 | 20 | 13 |  66 | 1701
  82572 | 20 | 13 |  66 | 1668
 107385 | 20 | 13 |  66 | 1197
  75202 | 20 | 13 |  62 |  903
 129752 | 20 | 13 |  61 | 1626
 125501 | 20 | 13 |  59 |  568
 144062 | 20 | 12 | 100 |  350
 130521 | 20 | 12 |  99 |  517
  38487 | 20 | 12 |  95 | 1265
  92212 | 20 | 12 |  95 |  683
  71657 | 20 | 12 |  95 |  584
 140990 | 20 | 12 |  92 |  682
  29372 | 20 | 12 |  92 |  615
  16742 | 20 | 12 |  91 | 1390
 146672 | 20 | 12 |  89 |  722
  12061 | 20 | 12 |  86 | 1482
  91502 | 20 | 12 |  86 |  220
  95259 | 20 | 12 |  83 | 1805
  79590 | 20 | 12 |  82 | 1754
   9167 | 20 | 12 |  82 | 1260
 118612 | 20 | 12 |  81 | 1172
  64426 | 20 | 12 |  80 | 1561
  89615 | 20 | 12 |  79 |  366
 120064 | 20 | 12 |  78 | 1143
 123078 | 20 | 12 |  76 | 1869
  30027 | 20 | 12 |  74 |  140
 142966 | 20 | 12 |  73 |  704
  76721 | 20 | 12 |  71 |  325
  76106 | 20 | 12 |  65 |   94
  84082 | 20 | 12 |  62 | 1101
  55533 | 20 | 12 |  59 | 1744
 134335 | 19 | 13 |  98 | 1008
  50615 | 19 | 13 |  98 |  237
  97321 | 19 | 13 |  98 |  136
 133822 | 19 | 13 |  95 | 1875
  69323 | 19 | 13 |  95 |  898
 130680 | 19 | 13 |  95 |  333
  50582 | 19 | 13 |  94 | 1638
 135607 | 19 | 13 |  93 | 1361
  26092 | 19 | 13 |  89 | 1353
  68272 | 19 | 13 |  88 |  741
  66269 | 19 | 13 |  85 |  437
   8750 | 19 | 13 |  85 |  118
  81956 | 19 | 13 |  84 |  708
  72286 | 19 | 13 |  81 | 1424
  83347 | 19 | 13 |  81 | 1260
 121192 | 19 | 13 |  78 |  839
  96348 | 19 | 13 |  78 |  463
  66564 | 19 | 13 |  78 |   36
  35400 | 19 | 13 |  74 | 1097
 125057 | 19 | 13 |  73 |  539
  79247 | 19 | 13 |  73 |  303
  35740 | 19 | 13 |  68 |  868
  17396 | 19 | 13 |  68 |  825
 107852 | 19 | 13 |  66 | 1758
  65385 | 19 | 13 |  66 |   12
  97177 | 19 | 13 |  65 | 1490
  34118 | 19 | 13 |  65 |  807
  61743 | 19 | 13 |  65 |  714
  51448 | 19 | 13 |  64 | 1396
  72832 | 19 | 13 |  64 | 1203
  63893 | 19 | 13 |  62 | 1045
 100700 | 19 | 13 |  61 | 1569
 143845 | 19 | 12 | 100 |  763
  71090 | 19 | 12 |  94 |  606
 111129 | 19 | 12 |  92 | 1181
 143539 | 19 | 12 |  89 | 1380
 125136 | 19 | 12 |  87 | 1074
  38739 | 19 | 12 |  87 |  836
  59019 | 19 | 12 |  86 | 1139
  29696 | 19 | 12 |  85 |  807
  43093 | 19 | 12 |  83 | 1488
  76970 | 19 | 12 |  83 |  602
 133122 | 19 | 12 |  79 |  168
  27668 | 19 | 12 |  75 | 1312
 112616 | 19 | 12 |  75 |   79
  99413 | 19 | 12 |  74 | 1150
 147431 | 19 | 12 |  72 | 1311
  87256 | 19 | 12 |  71 | 1471
  42113 | 19 | 12 |  67 | 1666
  26998 | 19 | 12 |  67 |  391
 137047 | 19 | 12 |  66 |  201
  52630 | 19 | 12 |  65 |  573
  17386 | 19 | 12 |  63 | 1036
  26706 | 19 | 12 |  62 | 1834
  86588 | 19 | 12 |  62 |  651
  60078 | 19 | 12 |  61 |  732
  86398 | 18 | 13 | 100 | 1308
  89721 | 18 | 13 |  98 |  953
  11159 | 18 | 13 |  95 | 1407
  82786 | 18 | 13 |  91 | 1130
   4212 | 18 | 13 |  89 | 1026
  73830 | 18 | 13 |  87 | 1599
  64691 | 18 | 13 |  87 |  571
  78248 | 18 | 13 |  86 | 1848
  94589 | 18 | 13 |  86 |  870
  82737 | 18 | 13 |  83 |  642
 139450 | 18 | 13 |  80 | 1609
  71426 | 18 | 13 |  78 |  168
  90142 | 18 | 13 |  75 | 1448
 143192 | 18 | 13 |  74 | 1297
 104433 | 18 | 13 |  72 |  829
  93102 | 18 | 13 |  70 | 1650
 100682 | 18 | 13 |  70 |   86
 127637 | 18 | 13 |  69 | 1885
  72577 | 18 | 13 |  64 |  388
 108179 | 18 | 13 |  63 | 1753
 103699 | 18 | 12 |  93 | 1253
  71544 | 18 | 12 |  92 |  676
  83757 | 18 | 12 |  86 | 1316
  68401 | 18 | 12 |  85 |  800
  50067 | 18 | 12 |  83 |  541
 106614 | 18 | 12 |  82 | 1246
 141846 | 18 | 12 |  80 | 1440
 133149 | 18 | 12 |  80 | 1034
 133012 | 18 | 12 |  73 | 1528
  68590 | 18 | 12 |  73 | 1433
   3780 | 18 | 12 |  71 | 1198
 126669 | 18 | 12 |  67 | 1615
 138565 | 18 | 12 |  67 | 1312
  35837 | 18 | 12 |  65 |  274
  54197 | 18 | 12 |  64 |  854
  56639 | 18 | 12 |  62 | 1536
  92783 | 17 | 13 |  99 |   24
  97468 | 17 | 13 |  97 |  127
 100243 | 17 | 13 |  95 | 1439
  55970 | 17 | 13 |  94 |  442
  28111 | 17 | 13 |  93 | 1064
  36859 | 17 | 13 |  93 |  987
  88385 | 17 | 13 |  91 |  792
 135345 | 17 | 13 |  89 | 1853
 114240 | 17 | 13 |  89 | 1319
  31512 | 17 | 13 |  87 |  204
 136990 | 17 | 13 |  85 |  864
  50423 | 17 | 13 |  83 |  465
  43877 | 17 | 13 |  82 | 1356
  99931 | 17 | 13 |  81 | 1347
  27555 | 17 | 13 |  80 | 1280
  83922 | 17 | 13 |  79 | 1540
  33837 | 17 | 13 |  74 | 1080
 121141 | 17 | 13 |  72 |  396
 105039 | 17 | 13 |  68 | 1810
  45611 | 17 | 13 |  68 | 1266
  24715 | 17 | 13 |  68 | 1084
  96393 | 17 | 13 |  68 | 1005
  98607 | 17 | 13 |  67 |   59
 106181 | 17 | 13 |  66 |  187
 142366 | 17 | 13 |  64 |  439
 143895 | 17 | 13 |  63 | 1836
 140762 | 17 | 13 |  61 |  128
  54920 | 17 | 12 |  99 |  386
  19674 | 17 | 12 |  98 | 1006
 131638 | 17 | 12 |  98 |  205
  41618 | 17 | 12 |  97 | 1330
 142474 | 17 | 12 |  94 | 1634
  13740 | 17 | 12 |  94 | 1518
 118906 | 17 | 12 |  93 |  823
   1460 | 17 | 12 |  92 |  343
  19799 | 17 | 12 |  91 | 1886
 111386 | 17 | 12 |  91 |  677
  77762 | 17 | 12 |  91 |   79
 119971 | 17 | 12 |  90 | 1244
  17936 | 17 | 12 |  88 |  139
  53664 | 17 | 12 |  86 |  911
  59179 | 17 | 12 |  85 |  641
  54140 | 17 | 12 |  83 |   72
 115926 | 17 | 12 |  80 | 1114
  62125 | 17 | 12 |  78 | 1327
  94211 | 17 | 12 |  77 |  377
  18997 | 17 | 12 |  73 | 1842
  72612 | 17 | 12 |  71 |  291
    925 | 17 | 12 |  70 | 1573
  16250 | 17 | 12 |  70 | 1033
  21655 | 17 | 12 |  65 | 1491
 125405 | 17 | 12 |  63 |  671
 129214 | 17 | 12 |  62 |   21
  76308 | 17 | 12 |  61 |  303
  11728 | 17 | 12 |  60 | 1425
  13074 | 16 | 13 | 100 |  482
 141454 | 16 | 13 |  97 | 1771
  35620 | 16 | 13 |  97 |  632
 100524 | 16 | 13 |  96 | 1331
 124306 | 16 | 13 |  95 | 1364
 138884 | 16 | 13 |  94 |  511
 115106 | 16 | 13 |  93 | 1058
 142082 | 16 | 13 |  91 |  586
   8516 | 16 | 13 |  90 |  468
 122674 | 16 | 13 |  88 |  390
  89224 | 16 | 13 |  86 |  211
 114770 | 16 | 13 |  78 |  620
  53807 | 16 | 13 |  75 |   32
 142965 | 16 | 13 |  74 | 1879
  20361 | 16 | 13 |  74 | 1145
  82392 | 16 | 13 |  72 |   43
 113204 | 16 | 13 |  63 | 1191
  47432 | 16 | 13 |  63 |  706
 116349 | 16 | 13 |  62 |  659
  40377 | 16 | 13 |  60 |  601
  23999 | 16 | 12 |  96 | 1370
  77623 | 16 | 12 |  96 | 1128
   1580 | 16 | 12 |  96 |  374
 127057 | 16 | 12 |  94 | 1093
 122576 | 16 | 12 |  92 | 1679
 133004 | 16 | 12 |  92 |   50
  13604 | 16 | 12 |  88 | 1813
  62266 | 16 | 12 |  87 | 1332
   4184 | 16 | 12 |  87 |  207
  78631 | 16 | 12 |  83 |   12
 109633 | 16 | 12 |  78 | 1157
  40955 | 16 | 12 |  77 |  884
 131963 | 16 | 12 |  76 | 1349
 141837 | 16 | 12 |  76 |  975
  13809 | 16 | 12 |  73 |  426
  94057 | 16 | 12 |  72 |  223
 126923 | 16 | 12 |  71 |  455
  34557 | 16 | 12 |  68 | 1319
 110663 | 16 | 12 |  66 | 1836
  40515 | 16 | 12 |  66 |  781
  71549 | 16 | 12 |  66 |  120
  89831 | 16 | 12 |  63 | 1135
 112250 | 16 | 12 |  60 | 1764
 134705 | 16 | 12 |  60 |  896
  78155 | 15 | 13 | 100 | 1264
  79435 | 15 | 13 | 100 |  617
  83661 | 15 | 13 |  97 | 1495
  97920 | 15 | 13 |  97 |  149
    744 | 15 | 13 |  94 |  795
  37675 | 15 | 13 |  91 | 1814
  57923 | 15 | 13 |  86 | 1306
  12290 | 15 | 13 |  85 |  806
  55293 | 15 | 13 |  85 |  142
 131733 | 15 | 13 |  82 |  927
 119590 | 15 | 13 |  82 |  590
  59725 | 15 | 13 |  82 |  192
 135199 | 15 | 13 |  81 | 1750
  28469 | 15 | 13 |  80 | 1804
 138397 | 15 | 13 |  79 | 1169
 111559 | 15 | 13 |  76 | 1077
 128724 | 15 | 13 |  73 | 1780
  79906 | 15 | 13 |  73 | 1430
  39376 | 15 | 13 |  73 |  982
 113524 | 15 | 13 |  73 |  576
  25245 | 15 | 13 |  71 | 1009
  30343 | 15 | 13 |  70 |  817
  43350 | 15 | 13 |  67 |  705
 117739 | 15 | 13 |  64 | 1576
  95543 | 15 | 13 |  60 | 1486
  57490 | 15 | 13 |  60 |  808
 121017 | 15 | 12 | 100 |  722
  47066 | 15 | 12 |  99 | 1696
  90620 | 15 | 12 |  96 | 1367
  63500 | 15 | 12 |  93 | 1433
  25996 | 15 | 12 |  86 | 1680
 148136 | 15 | 12 |  85 | 1301
 137251 | 15 | 12 |  84 | 1278
  24174 | 15 | 12 |  83 | 1161
 114912 | 15 | 12 |  83 |  976
 106513 | 15 | 12 |  82 |  660
 137500 | 15 | 12 |  82 |  475
 105438 | 15 | 12 |  81 | 1335
   7280 | 15 | 12 |  80 | 1850
  71143 | 15 | 12 |  80 |  464
  82810 | 15 | 12 |  79 | 1392
 122462 | 15 | 12 |  79 |  243
  71123 | 15 | 12 |  77 |  546
   2797 | 15 | 12 |  76 | 1858
 101116 | 15 | 12 |  76 | 1741
 133394 | 15 | 12 |  76 | 1692
  48325 | 15 | 12 |  74 |  837
  89369 | 15 | 12 |  73 |  779
  77660 | 15 | 12 |  72 |  813
  75340 | 15 | 12 |  72 |   35
  44149 | 15 | 12 |  71 |  424
   7444 | 15 | 12 |  70 | 1090
  95939 | 15 | 12 |  67 | 1172
  63798 | 15 | 12 |  67 |   96
   2816 | 15 | 12 |  66 | 1684
 137588 | 15 | 12 |  64 | 1489
 137940 | 14 | 13 |  99 | 1852
  65671 | 14 | 13 |  98 | 1366
  74120 | 14 | 13 |  98 |  387
 124589 | 14 | 13 |  92 |  518
  76309 | 14 | 13 |  91 | 1844
 129614 | 14 | 13 |  89 | 1147
  46565 | 14 | 13 |  89 |  541
  99551 | 14 | 13 |  87 | 1051
  85507 | 14 | 13 |  85 | 1646
 130323 | 14 | 13 |  84 | 1233
 144604 | 14 | 13 |  83 |  431
  71065 | 14 | 13 |  79 |  885
  30916 | 14 | 13 |  78 |   79
  52977 | 14 | 13 |  76 |  736
  16446 | 14 | 13 |  74 | 1199
 108691 | 14 | 13 |  72 |  309
  54257 | 14 | 13 |  68 |  623
  24420 | 14 | 13 |  68 |  309
  12931 | 14 | 13 |  67 |  675
 113845 | 14 | 13 |  67 |  246
 112228 | 14 | 13 |  66 |  618
 122920 | 14 | 13 |  63 | 1195
  81241 | 14 | 13 |  62 | 1872
  97984 | 14 | 12 | 100 |  903
 135926 | 14 | 12 |  99 | 1548
 149647 | 14 | 12 |  96 |  368
  12862 | 14 | 12 |  95 | 1211
  56052 | 14 | 12 |  95 |  281
  44018 | 14 | 12 |  94 |  215
   2207 | 14 | 12 |  93 | 1370
  89797 | 14 | 12 |  92 |  821
  46947 | 14 | 12 |  85 |  103
 135466 | 14 | 12 |  85 |   45
 148383 | 14 | 12 |  82 | 1210
  95609 | 14 | 12 |  76 |  947
  98299 | 14 | 12 |  72 | 1550
 113215 | 14 | 12 |  69 | 1492
   1988 | 14 | 12 |  69 |  530
  91698 | 14 | 12 |  67 | 1666
  13613 | 14 | 12 |  67 |  626
  33194 | 14 | 12 |  63 | 1736
   1567 | 14 | 12 |  62 | 1138
 145839 | 14 | 12 |  61 |  379
  37870 | 14 | 12 |  59 | 1543
  49630 | 13 | 13 |  98 | 1392
  16459 | 13 | 13 |  97 | 1811
 143976 | 13 | 13 |  96 | 1523
 101875 | 13 | 13 |  96 |  787
 113070 | 13 | 13 |  96 |  473
 115523 | 13 | 13 |  95 |  691
 135454 | 13 | 13 |  94 | 1266
 129243 | 13 | 13 |  94 |  374
  25825 | 13 | 13 |  91 | 1158
 119457 | 13 | 13 |  88 |  753
 107811 | 13 | 13 |  87 |  505
 108566 | 13 | 13 |  84 | 1760
  57065 | 13 | 13 |  84 |  763
 148406 | 13 | 13 |  74 | 1018
 110190 | 13 | 13 |  73 |  825
  53827 | 13 | 13 |  73 |  232
  82180 | 13 | 13 |  72 |   22
  52332 | 13 | 13 |  71 | 1755
   5152 | 13 | 13 |  70 |  639
  89960 | 13 | 13 |  68 | 1376
  26393 | 13 | 13 |  67 |  848
 104469 | 13 | 13 |  61 | 1819
 126794 | 13 | 12 | 100 | 1886
  40579 | 13 | 12 |  95 |  904
 117810 | 13 | 12 |  95 |  542
 145955 | 13 | 12 |  88 | 1782
  49096 | 13 | 12 |  86 | 1728
  64751 | 13 | 12 |  84 | 1763
  87418 | 13 | 12 |  80 | 1456
  50689 | 13 | 12 |  79 | 1357
  96916 | 13 | 12 |  79 |  174
  18407 | 13 | 12 |  75 | 1297
   4417 | 13 | 12 |  73 | 1551
 129184 | 13 | 12 |  73 | 1145
 134734 | 13 | 12 |  71 | 1816
 111364 | 13 | 12 |  71 |  584
  36551 | 13 | 12 |  69 |  439
  79445 | 13 | 12 |  68 | 1264
 131654 | 13 | 12 |  68 | 1163
  76773 | 13 | 12 |  66 | 1324
 141447 | 13 | 12 |  66 |  191
  29063 | 13 | 12 |  64 | 1849
  28690 | 13 | 12 |  64 |  831
    290 | 13 | 12 |  62 |  728
   6832 | 13 | 12 |  61 |  741
 146608 | 13 | 12 |  59 |  304
 144850 | 12 | 13 |  97 |  136
  22000 | 12 | 13 |  97 |   39
  99625 | 12 | 13 |  96 |  319
 119724 | 12 | 13 |  91 | 1867
 123340 | 12 | 13 |  85 | 1601
  32296 | 12 | 13 |  84 | 1567
  47047 | 12 | 13 |  81 |  812
 116107 | 12 | 13 |  80 |  324
  76567 | 12 | 13 |  79 | 1406
   1079 | 12 | 13 |  76 |  223
  55905 | 12 | 13 |  75 | 1306
 121594 | 12 | 13 |  74 |  921
 106074 | 12 | 13 |  74 |  497
  42694 | 12 | 13 |  74 |  429
 113825 | 12 | 13 |  71 | 1736
 134365 | 12 | 13 |  69 |  438
 116551 | 12 | 13 |  68 |  927
  62997 | 12 | 13 |  63 |  355
 108548 | 12 | 13 |  62 |  746
  52226 | 12 | 13 |  61 | 1796
 136784 | 12 | 13 |  60 | 1843
  28780 | 12 | 13 |  59 |  539
  36022 | 12 | 12 | 100 | 1720
 123911 | 12 | 12 |  99 |  462
   7854 | 12 | 12 |  90 |  550
 109487 | 12 | 12 |  86 | 1830
  27095 | 12 | 12 |  84 | 1752
  39258 | 12 | 12 |  84 |  353
   8968 | 12 | 12 |  78 | 1515
  62236 | 12 | 12 |  74 |  581
  24085 | 12 | 12 |  69 | 1298
  96587 | 12 | 12 |  69 | 1243
  81335 | 12 | 12 |  65 | 1389
 118223 | 12 | 12 |  65 | 1180
  32989 | 12 | 12 |  62 | 1347
 121018 | 12 | 12 |  60 | 1058
  20074 | 12 | 12 |  60 |  590
  32853 | 11 | 13 |  99 |   97
   5683 | 11 | 13 |  98 | 1428
  30054 | 11 | 13 |  98 |  865
  16180 | 11 | 13 |  97 | 1356
 133972 | 11 | 13 |  97 | 1355
 140394 | 11 | 13 |  95 |  370
  72728 | 11 | 13 |  94 |   92
  41928 | 11 | 13 |  88 |  552
    468 | 11 | 13 |  86 | 1681
  16345 | 11 | 13 |  81 | 1664
 104357 | 11 | 13 |  81 |  473
 121779 | 11 | 13 |  78 |  451
  22011 | 11 | 13 |  75 | 1235
  12861 | 11 | 13 |  75 |  924
 121370 | 11 | 13 |  73 |  130
 143939 | 11 | 13 |  69 | 1768
 147436 | 11 | 13 |  69 | 1646
  73965 | 11 | 13 |  68 |  415
 136665 | 11 | 13 |  67 | 1806
  24091 | 11 | 13 |  66 |  227
 144656 | 11 | 13 |  59 | 1385
 137854 | 11 | 12 |  97 | 1131
   7953 | 11 | 12 |  94 | 1231
 105212 | 11 | 12 |  94 | 1210
  96680 | 11 | 12 |  92 | 1786
  48800 | 11 | 12 |  92 | 1762
 141167 | 11 | 12 |  90 | 1723
  59460 | 11 | 12 |  90 | 1177
  77140 | 11 | 12 |  89 | 1580
  34503 | 11 | 12 |  88 | 1258
  78269 | 11 | 12 |  86 | 1670
 135564 | 11 | 12 |  83 | 1884
  98349 | 11 | 12 |  83 |   62
  49416 | 11 | 12 |  81 |  289
  47755 | 11 | 12 |  79 |   63
  68091 | 11 | 12 |  77 | 1841
 120750 | 11 | 12 |  73 |   31
  77902 | 11 | 12 |  71 | 1286
  66500 | 11 | 12 |  63 |  265
  46400 | 11 | 12 |  59 | 1660
  13179 | 10 | 13 |  98 | 1024
  30182 | 10 | 13 |  98 |  665
  35866 | 10 | 13 |  98 |  169
 133391 | 10 | 13 |  92 | 1872
  72883 | 10 | 13 |  92 |  625
 123589 | 10 | 13 |  91 | 1468
  43387 | 10 | 13 |  89 |  121
 148602 | 10 | 13 |  88 | 1775
  76181 | 10 | 13 |  88 |   71
  23779 | 10 | 13 |  87 | 1177
 130949 | 10 | 13 |  85 | 1071
  81415 | 10 | 13 |  85 |  898
  81921 | 10 | 13 |  85 |  296
  81110 | 10 | 13 |  83 | 1609
  92207 | 10 | 13 |  83 |  282
   8291 | 10 | 13 |  83 |  257
  42517 | 10 | 13 |  75 |  570
  73692 | 10 | 13 |  73 |   10
  84362 | 10 | 13 |  70 |  476
  89621 | 10 | 13 |  67 |  439
 128908 | 10 | 13 |  67 |  114
 102893 | 10 | 13 |  66 | 1576
  15605 | 10 | 13 |  65 |  646
      3 | 10 | 13 |  63 |   84
 104382 | 10 | 13 |  62 | 1671
 149709 | 10 | 13 |  59 | 1392
  15284 | 10 | 12 |  99 |  652
  55654 | 10 | 12 |  99 |  625
  41485 | 10 | 12 |  96 |  943
  87753 | 10 | 12 |  94 |  454
 149490 | 10 | 12 |  93 | 1405
 123219 | 10 | 12 |  92 | 1251
  76405 | 10 | 12 |  85 | 1529
 145634 | 10 | 12 |  84 | 1076
 144738 | 10 | 12 |  81 |  738
 120191 | 10 | 12 |  81 |  435
  58769 | 10 | 12 |  80 |  926
 121287 | 10 | 12 |  78 | 1606
  78902 | 10 | 12 |  76 |  174
  69483 | 10 | 12 |  73 |  415
 127722 | 10 | 12 |  72 |  516
 104760 | 10 | 12 |  71 |  648
  43957 | 10 | 12 |  70 |  754
 110613 | 10 | 12 |  68 |  579
  65335 | 10 | 12 |  66 |  895
  13478 | 10 | 12 |  66 |  824
  27802 | 10 | 12 |  62 |  225
  14931 | 10 | 12 |  60 | 1556
 138170 | 10 | 12 |  60 |  912
 136178 |  9 | 13 | 100 |  160
  67099 |  9 | 13 |  98 | 1884
  17004 |  9 | 13 |  94 | 1008
   7254 |  9 | 13 |  93 | 1322
 147132 |  9 | 13 |  92 |  624
 131831 |  9 | 13 |  92 |  544
 142516 |  9 | 13 |  89 |  327
 111262 |  9 | 13 |  82 |  519
 100092 |  9 | 13 |  80 | 1361
 109456 |  9 | 13 |  80 |  403
  27150 |  9 | 13 |  80 |  340
 110333 |  9 | 13 |  79 | 1561
  48675 |  9 | 13 |  78 | 1795
 101713 |  9 | 13 |  74 | 1347
  82382 |  9 | 13 |  74 |  857
   8146 |  9 | 13 |  73 |   66
  38919 |  9 | 13 |  70 |  725
 119943 |  9 | 13 |  68 | 1139
 122518 |  9 | 13 |  67 | 1336
 113351 |  9 | 13 |  66 |  642
 121114 |  9 | 13 |  66 |  567
 125890 |  9 | 13 |  65 |  186
   2130 |  9 | 13 |  59 | 1806
 141698 |  9 | 12 |  99 |    9
  30959 |  9 | 12 |  96 |  786
  99753 |  9 | 12 |  93 |  930
  52426 |  9 | 12 |  90 | 1232
  16568 |  9 | 12 |  90 |  787
  55655 |  9 | 12 |  88 | 1547
 110437 |  9 | 12 |  88 | 1085
 103295 |  9 | 12 |  85 |  408
  30968 |  9 | 12 |  85 |  370
  69543 |  9 | 12 |  80 | 1870
  89705 |  9 | 12 |  76 |  943
  20065 |  9 | 12 |  75 |  664
  83395 |  9 | 12 |  71 | 1535
  78800 |  9 | 12 |  71 | 1061
 108622 |  9 | 12 |  68 | 1143
  90705 |  9 | 12 |  68 |  504
  92679 |  9 | 12 |  66 |  724
 131564 |  9 | 12 |  62 |  418
  87374 |  9 | 12 |  60 | 1850
  60830 |  9 | 12 |  60 |  566
  15103 |  9 | 12 |  59 | 1214
  72151 |  8 | 13 | 100 |  295
 146105 |  8 | 13 |  98 | 1631
  58386 |  8 | 13 |  96 | 1080
 118673 |  8 | 13 |  95 | 1791
  47053 |  8 | 13 |  94 |   48
 109789 |  8 | 13 |  93 | 1486
  89954 |  8 | 13 |  93 |  838
 117781 |  8 | 13 |  92 |  227
  43783 |  8 | 13 |  91 |  154
  83654 |  8 | 13 |  87 | 1288
 141037 |  8 | 13 |  87 | 1048
 110330 |  8 | 13 |  82 | 1269
  80570 |  8 | 13 |  79 | 1283
  66063 |  8 | 13 |  78 | 1186
  41050 |  8 | 13 |  74 |  466
  21092 |  8 | 13 |  71 |  129
   3911 |  8 | 13 |  70 |  869
  56159 |  8 | 13 |  70 |  173
  14852 |  8 | 13 |  64 |   63
  81322 |  8 | 13 |  62 |  297
  95375 |  8 | 13 |  60 |  679
 122664 |  8 | 12 |  98 | 1356
  59660 |  8 | 12 |  98 |  667
  59115 |  8 | 12 |  97 | 1561
 137635 |  8 | 12 |  97 | 1090
 103653 |  8 | 12 |  94 |  141
  45554 |  8 | 12 |  93 | 1582
  78673 |  8 | 12 |  93 | 1550
  46444 |  8 | 12 |  91 |  479
 108289 |  8 | 12 |  90 |  531
  90990 |  8 | 12 |  86 | 1189
  49584 |  8 | 12 |  85 | 1434
  32167 |  8 | 12 |  85 | 1309
   4653 |  8 | 12 |  83 | 1114
  48822 |  8 | 12 |  83 |  662
  55769 |  8 | 12 |  82 | 1446
  30294 |  8 | 12 |  80 |  555
  15303 |  8 | 12 |  72 |  472
  59665 |  8 | 12 |  69 |  449
 140910 |  8 | 12 |  69 |   43
 149242 |  8 | 12 |  68 | 1055
 122542 |  8 | 12 |  68 |  712
   9119 |  8 | 12 |  67 |  417
  56141 |  8 | 12 |  65 | 1693
   4196 |  7 | 13 | 100 |  687
 135858 |  7 | 13 |  96 | 1227
  10357 |  7 | 13 |  93 | 1831
  46799 |  7 | 13 |  93 | 1238
 134308 |  7 | 13 |  93 |   57
  52317 |  7 | 13 |  92 |  292
 138865 |  7 | 13 |  92 |   13
   8892 |  7 | 13 |  90 | 1489
 112492 |  7 | 13 |  89 | 1187
 130678 |  7 | 13 |  88 |  361
   7723 |  7 | 13 |  87 | 1837
  94953 |  7 | 13 |  87 | 1565
   2524 |  7 | 13 |  86 |  510
  63944 |  7 | 13 |  83 | 1691
 124628 |  7 | 13 |  73 |  715
  17967 |  7 | 13 |  72 | 1792
  34701 |  7 | 13 |  68 |  219
  20301 |  7 | 13 |  67 |  667
  89384 |  7 | 13 |  66 | 1133
 104485 |  7 | 13 |  66 |  485
 125733 |  7 | 13 |  64 | 1842
 115690 |  7 | 13 |  64 |  904
 126147 |  7 | 13 |  61 | 1379
 114069 |  7 | 13 |  61 |  962
  50361 |  7 | 13 |  60 | 1356
   6105 |  7 | 12 |  98 |  561
  12361 |  7 | 12 |  95 |  840
  79105 |  7 | 12 |  94 | 1064
  22392 |  7 | 12 |  90 |  449
 144911 |  7 | 12 |  89 |  677
 101363 |  7 | 12 |  86 |  835
  15941 |  7 | 12 |  81 | 1088
  54076 |  7 | 12 |  80 | 1087
  87914 |  7 | 12 |  79 | 1666
  26403 |  7 | 12 |  79 | 1617
  33829 |  7 | 12 |  79 |  111
  25291 |  7 | 12 |  75 | 1440
  56556 |  7 | 12 |  73 | 1509
 134230 |  7 | 12 |  72 |   35
 136672 |  7 | 12 |  71 | 1485
  20235 |  7 | 12 |  70 |  923
  19536 |  7 | 12 |  67 |  559
 138985 |  7 | 12 |  66 |  231
  99510 |  7 | 12 |  64 |  434
  36504 |  7 | 12 |  61 | 1638
  58775 |  7 | 12 |  61 |  842
  75851 |  7 | 12 |  59 |  625
 134995 |  6 | 13 |  99 |  807
  22231 |  6 | 13 |  99 |  540
  92757 |  6 | 13 |  96 |  555
  44771 |  6 | 13 |  89 |  209
 104402 |  6 | 13 |  87 |  898
   4324 |  6 | 13 |  87 |  600
 146397 |  6 | 13 |  86 | 1243
  27253 |  6 | 13 |  84 | 1793
  99929 |  6 | 13 |  84 |  264
 126784 |  6 | 13 |  80 | 1629
  16937 |  6 | 13 |  80 | 1444
  83279 |  6 | 13 |  80 |  559
 103239 |  6 | 13 |  79 |  477
     64 |  6 | 13 |  70 | 1329
  79743 |  6 | 13 |  69 | 1101
  25985 |  6 | 13 |  67 |  680
  50315 |  6 | 13 |  65 |  410
   3564 |  6 | 13 |  63 | 1688
 112914 |  6 | 13 |  61 |  393
  99819 |  6 | 12 | 100 |  533
  88120 |  6 | 12 |  97 | 1148
  82632 |  6 | 12 |  95 | 1281
  72717 |  6 | 12 |  94 |  756
 146530 |  6 | 12 |  94 |   71
 104081 |  6 | 12 |  85 | 1137
 105950 |  6 | 12 |  84 | 1782
   6676 |  6 | 12 |  84 |  799
  65380 |  6 | 12 |  82 | 1445
 104288 |  6 | 12 |  82 |  702
 147745 |  6 | 12 |  80 |  404
 122976 |  6 | 12 |  78 |  937
 103802 |  6 | 12 |  76 |  889
  29717 |  6 | 12 |  74 | 1703
 137004 |  6 | 12 |  73 |  593
  67338 |  6 | 12 |  72 |  418
  35311 |  6 | 12 |  68 | 1423
  60145 |  6 | 12 |  66 |  153
 133085 |  6 | 12 |  64 |  412
 103099 |  6 | 12 |  63 | 1273
  38772 |  5 | 13 |  98 | 1852
 106396 |  5 | 13 |  98 | 1724
 131015 |  5 | 13 |  97 | 1199
 142824 |  5 | 13 |  95 | 1852
  13816 |  5 | 13 |  91 | 1138
  82116 |  5 | 13 |  90 |  649
  22753 |  5 | 13 |  89 |  562
  51494 |  5 | 13 |  88 |  263
 124055 |  5 | 13 |  86 | 1437
 101974 |  5 | 13 |  85 | 1395
  28752 |  5 | 13 |  85 |  640
  28548 |  5 | 13 |  83 |  368
 104511 |  5 | 13 |  82 |  476
 123723 |  5 | 13 |  81 | 1489
  46121 |  5 | 13 |  78 | 1602
   1133 |  5 | 13 |  72 |  822
  84677 |  5 | 13 |  69 | 1196
  84417 |  5 | 13 |  67 |  425
  42747 |  5 | 13 |  62 |  920
  17865 |  5 | 13 |  61 |  180
 101680 |  5 | 12 |  96 | 1384
 113214 |  5 | 12 |  93 |  760
 145426 |  5 | 12 |  90 |  673
 102173 |  5 | 12 |  88 | 1323
  76433 |  5 | 12 |  87 | 1155
  53237 |  5 | 12 |  87 |  529
  75543 |  5 | 12 |  84 | 1170
  44010 |  5 | 12 |  81 |  779
  61668 |  5 | 12 |  74 |  519
   4760 |  5 | 12 |  72 |  632
   5471 |  5 | 12 |  71 | 1195
 121366 |  5 | 12 |  70 | 1005
  38195 |  5 | 12 |  66 |  860
 105287 |  5 | 12 |  65 | 1473
   4036 |  5 | 12 |  63 | 1391
  38240 |  5 | 12 |  62 |  132
 136290 |  4 | 13 |  97 |  940
   9123 |  4 | 13 |  95 |   37
  69334 |  4 | 13 |  93 |  873
  24755 |  4 | 13 |  88 |  222
  25176 |  4 | 13 |  88 |  112
  22752 |  4 | 13 |  87 | 1106
  47880 |  4 | 13 |  87 | 1002
  26811 |  4 | 13 |  87 |  557
  88501 |  4 | 13 |  86 | 1507
  12239 |  4 | 13 |  85 | 1806
 117106 |  4 | 13 |  85 |  885
  25809 |  4 | 13 |  84 | 1599
  20934 |  4 | 13 |  81 | 1327
  24520 |  4 | 13 |  80 |  790
   8158 |  4 | 13 |  79 |   83
 108719 |  4 | 13 |  76 |   28
 119654 |  4 | 13 |  75 |  508
  55272 |  4 | 13 |  75 |  154
 133985 |  4 | 13 |  74 | 1562
  59354 |  4 | 13 |  71 | 1418
  32477 |  4 | 13 |  70 | 1782
  59140 |  4 | 13 |  70 |  526
  85365 |  4 | 13 |  69 |  698
  90646 |  4 | 13 |  65 | 1424
  87903 |  4 | 13 |  61 | 1037
  32317 |  4 | 13 |  59 |  578
  96408 |  4 | 12 | 100 |  854
  63138 |  4 | 12 |  99 |  250
 112938 |  4 | 12 |  96 |  259
 149191 |  4 | 12 |  95 | 1845
   6901 |  4 | 12 |  95 | 1726
 119937 |  4 | 12 |  95 | 1441
 116517 |  4 | 12 |  93 | 1193
 141300 |  4 | 12 |  92 |  243
  29048 |  4 | 12 |  90 |  634
 102098 |  4 | 12 |  87 |  890
  91412 |  4 | 12 |  87 |  476
   7843 |  4 | 12 |  85 |  555
 109045 |  4 | 12 |  83 | 1732
  99663 |  4 | 12 |  83 |  371
  79443 |  4 | 12 |  81 |  539
 144184 |  4 | 12 |  80 |  946
  62312 |  4 | 12 |  78 |  685
 103508 |  4 | 12 |  78 |  487
 127351 |  4 | 12 |  77 |  727
  21816 |  4 | 12 |  76 |  544
  80689 |  4 | 12 |  73 | 1453
  36362 |  4 | 12 |  71 |  381
 101186 |  4 | 12 |  67 |  673
 100351 |  4 | 12 |  65 | 1861
 145071 |  4 | 12 |  65 | 1655
  42209 |  4 | 12 |  63 | 1390
  51963 |  4 | 12 |  61 |  787
 124871 |  3 | 13 | 100 | 1764
 141135 |  3 | 13 |  97 |  275
  34427 |  3 | 13 |  95 |  937
   1760 |  3 | 13 |  95 |  895
  12302 |  3 | 13 |  94 | 1534
  23163 |  3 | 13 |  92 | 1094
  73103 |  3 | 13 |  91 | 1523
  56280 |  3 | 13 |  90 | 1420
  51474 |  3 | 13 |  86 | 1736
  17009 |  3 | 13 |  85 |  856
 129431 |  3 | 13 |  85 |  692
  29222 |  3 | 13 |  84 |  813
  53346 |  3 | 13 |  83 | 1839
  58468 |  3 | 13 |  82 | 1203
 110421 |  3 | 13 |  82 |  434
  74753 |  3 | 13 |  82 |  291
 103393 |  3 | 13 |  81 | 1875
 138662 |  3 | 13 |  81 |  725
  79689 |  3 | 13 |  79 | 1491
  18944 |  3 | 13 |  79 | 1229
  23018 |  3 | 13 |  77 |  438
   8373 |  3 | 13 |  75 | 1154
  29133 |  3 | 13 |  75 |  676
 130006 |  3 | 13 |  71 | 1823
 140169 |  3 | 13 |  70 | 1768
  75752 |  3 | 13 |  70 |  431
  56884 |  3 | 13 |  69 |  703
  52628 |  3 | 13 |  68 |  233
  29201 |  3 | 13 |  68 |   60
 142375 |  3 | 13 |  68 |   52
 108831 |  3 | 13 |  66 | 1257
   3044 |  3 | 13 |  65 | 1372
 134382 |  3 | 13 |  65 | 1229
 101598 |  3 | 12 |  98 |  138
   2049 |  3 | 12 |  97 | 1682
   8776 |  3 | 12 |  95 | 1263
 121985 |  3 | 12 |  93 | 1551
  12510 |  3 | 12 |  90 | 1809
  15851 |  3 | 12 |  90 |  638
   4362 |  3 | 12 |  88 | 1620
  73750 |  3 | 12 |  88 |   23
 107544 |  3 | 12 |  84 |   57
  22176 |  3 | 12 |  80 | 1653
 128393 |  3 | 12 |  80 | 1553
  78761 |  3 | 12 |  76 | 1582
  63663 |  3 | 12 |  73 | 1274
  53545 |  3 | 12 |  73 | 1190
  58242 |  3 | 12 |  72 | 1387
  29859 |  3 | 12 |  68 | 1773
  48319 |  3 | 12 |  64 | 1403
 147180 |  3 | 12 |  62 |  633
  20502 |  2 | 13 | 100 | 1226
  57450 |  2 | 13 |  93 |  463
 103184 |  2 | 13 |  87 | 1040
 111900 |  2 | 13 |  85 | 1317
 148219 |  2 | 13 |  84 | 1607
 148610 |  2 | 13 |  84 |  932
  11425 |  2 | 13 |  80 | 1412
   1001 |  2 | 13 |  78 | 1593
  82081 |  2 | 13 |  78 | 1274
  83483 |  2 | 13 |  75 |  502
  24915 |  2 | 13 |  72 |  561
  53134 |  2 | 13 |  72 |  206
  18807 |  2 | 13 |  71 |  723
  56064 |  2 | 13 |  69 | 1705
 123018 |  2 | 13 |  68 | 1213
  77185 |  2 | 13 |  62 |  551
 103232 |  2 | 13 |  62 |  479
 149673 |  2 | 13 |  60 |  163
  17592 |  2 | 13 |  59 | 1012
 117079 |  2 | 12 | 100 |  532
  15460 |  2 | 12 |  99 |   43
  39925 |  2 | 12 |  98 |  948
 144986 |  2 | 12 |  97 |  928
  48695 |  2 | 12 |  97 |  732
  49691 |  2 | 12 |  90 |  850
  90591 |  2 | 12 |  89 |  427
 123710 |  2 | 12 |  88 | 1707
 116555 |  2 | 12 |  86 |  494
 114934 |  2 | 12 |  85 |  941
 133687 |  2 | 12 |  84 |  415
 121121 |  2 | 12 |  82 |  856
 132445 |  2 | 12 |  82 |  160
 127070 |  2 | 12 |  81 |  670
  66303 |  2 | 12 |  80 | 1628
  75009 |  2 | 12 |  79 | 1636
  53809 |  2 | 12 |  77 |  687
 147621 |  2 | 12 |  75 | 1780
  36672 |  2 | 12 |  75 |  584
   8758 |  2 | 12 |  73 | 1489
 104889 |  2 | 12 |  73 | 1382
 144057 |  2 | 12 |  73 | 1187
 149164 |  2 | 12 |  68 |  695
 102022 |  2 | 12 |  66 | 1534
 129205 |  2 | 12 |  66 |  942
  79806 |  2 | 12 |  66 |  897
  89589 |  2 | 12 |  66 |  331
 147035 |  2 | 12 |  65 |  383
    273 |  2 | 12 |  62 | 1137
  54819 |  2 | 12 |  62 |  339
  17028 |  2 | 12 |  61 |  126
   7779 |  1 | 13 |  99 | 1180
 136354 |  1 | 13 |  99 | 1055
  59840 |  1 | 13 |  98 |  746
  84618 |  1 | 13 |  96 | 1355
  34312 |  1 | 13 |  95 | 1268
 111967 |  1 | 13 |  89 |  678
   7142 |  1 | 13 |  88 |  719
  46897 |  1 | 13 |  85 | 1668
 108235 |  1 | 13 |  84 |  284
  99492 |  1 | 13 |  83 | 1694
  84339 |  1 | 13 |  83 | 1036
 105784 |  1 | 13 |  79 |  528
  63772 |  1 | 13 |  77 |  877
  77200 |  1 | 13 |  77 |  675
  47990 |  1 | 13 |  73 | 1253
   9170 |  1 | 13 |  72 | 1261
 135650 |  1 | 13 |  71 |  706
 100894 |  1 | 13 |  69 | 1716
 141327 |  1 | 13 |  68 |  562
 140952 |  1 | 13 |  66 | 1254
  36807 |  1 | 13 |  65 | 1824
   5058 |  1 | 13 |  64 | 1759
  42062 |  1 | 12 | 100 | 1384
 117391 |  1 | 12 | 100 |   76
  50976 |  1 | 12 |  99 | 1546
  79044 |  1 | 12 |  98 | 1157
  99276 |  1 | 12 |  98 | 1127
  59662 |  1 | 12 |  97 |  334
 139517 |  1 | 12 |  95 |  214
  51557 |  1 | 12 |  94 | 1356
 109205 |  1 | 12 |  94 |  140
 147199 |  1 | 12 |  93 | 1763
  42730 |  1 | 12 |  92 | 1203
  28169 |  1 | 12 |  92 |  182
  50635 |  1 | 12 |  91 | 1080
  11885 |  1 | 12 |  91 |  422
  94732 |  1 | 12 |  89 | 1024
 118183 |  1 | 12 |  89 |  793
  47635 |  1 | 12 |  88 | 1753
 114264 |  1 | 12 |  87 | 1616
  55183 |  1 | 12 |  87 | 1200
 117458 |  1 | 12 |  84 |  288
 107324 |  1 | 12 |  83 | 1696
  11359 |  1 | 12 |  78 | 1434
 126297 |  1 | 12 |  74 |  381
  10201 |  1 | 12 |  73 | 1290
 104047 |  1 | 12 |  70 |  439
  45537 |  1 | 12 |  66 |  988
   1381 |  1 | 12 |  65 | 1531
 105702 |  1 | 12 |  64 | 1140
 118533 |  1 | 12 |  63 |  794
  18047 |  1 | 12 |  62 | 1273
  10538 |  1 | 12 |  61 | 1785
 116072 |  1 | 12 |  60 | 1668
  19508 |  1 | 12 |  59 | 1734
(987 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where b in (12, 13) and c >= 59 and d < 1887
order by a desc, b desc, c desc, d desc;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..3876.20 rows=178 width=20) (actual rows=987.00 loops=1)
   Index Cond: ((b = ANY ('{12,13}'::integer[])) AND (c >= 59) AND (d < 1887))
   Index Searches: 29
   Buffers: shared hit=1139
(4 rows)

-- Test case associated with failure to call _bt_start_array_keys() query #3:
select *
from fuzz_skip_scan
where
  b in (7, 8) and c is not null and d < 2348
order by a desc, b desc, c desc, d desc;
   id   | a  | b |  c  |  d   
--------+----+---+-----+------
 121928 |    | 8 |  98 | 2272
  30503 |    | 8 |  94 | 2298
 131382 |    | 8 |  91 | 1774
  78680 |    | 8 |  90 |  402
 101708 |    | 8 |  87 | 1184
 126623 |    | 8 |  87 |  944
  46381 |    | 8 |  85 | 1032
 103036 |    | 8 |  85 |  332
  17345 |    | 8 |  85 |   24
  76280 |    | 8 |  83 | 1290
   1548 |    | 8 |  82 | 1780
  82605 |    | 8 |  81 | 1782
  63156 |    | 8 |  78 | 2022
  36873 |    | 8 |  77 |  962
  38521 |    | 8 |  73 |  765
  15066 |    | 8 |  73 |  620
  49744 |    | 8 |  72 | 2203
  37409 |    | 8 |  72 | 1105
  49349 |    | 8 |  71 |  348
  35642 |    | 8 |  69 | 1871
 144916 |    | 8 |  69 |  132
  90724 |    | 8 |  67 |  862
 112006 |    | 8 |  66 | 1356
   5714 |    | 8 |  63 | 2028
  38898 |    | 8 |  63 |  995
  67200 |    | 8 |  58 |  213
   8457 |    | 8 |  56 | 2218
 146643 |    | 8 |  52 |  487
  98497 |    | 8 |  51 | 1206
  87895 |    | 8 |  50 | 2064
  20612 |    | 8 |  50 | 1801
  26802 |    | 8 |  50 | 1201
  27037 |    | 8 |  50 |  441
  31257 |    | 8 |  48 | 1718
 109834 |    | 8 |  48 | 1353
 148647 |    | 8 |  48 |  476
  63172 |    | 8 |  46 |  659
  29134 |    | 8 |  45 | 1224
  50680 |    | 8 |  42 |  587
  67180 |    | 8 |  41 | 1455
 133572 |    | 8 |  40 | 1934
  34383 |    | 8 |  38 | 1472
  12859 |    | 8 |  38 |   41
 107441 |    | 8 |  37 |  548
  60575 |    | 8 |  35 | 2325
 145082 |    | 8 |  34 | 1635
 145349 |    | 8 |  34 | 1633
 138431 |    | 8 |  34 |  956
  25616 |    | 8 |  33 |  368
  51794 |    | 8 |  30 | 2255
  39013 |    | 8 |  30 | 1153
 147550 |    | 8 |  30 |  712
 124210 |    | 8 |  28 | 1821
  81395 |    | 8 |  21 |  405
  49398 |    | 8 |  20 | 1205
  37176 |    | 8 |  17 | 1650
 101461 |    | 8 |  17 |  481
 125562 |    | 8 |  15 | 2241
  68304 |    | 8 |  13 |  956
  81815 |    | 8 |  12 | 1372
  10090 |    | 8 |  11 |  258
 125822 |    | 8 |  10 | 1913
  68710 |    | 8 |  10 |  249
 127535 |    | 8 |   8 | 1744
 104557 |    | 8 |   7 |  205
 103386 |    | 8 |   3 | 1090
 110820 |    | 8 |   3 |  394
  54490 |    | 8 |   2 | 1587
 134879 |    | 8 |   2 |   11
  20708 |    | 8 |   1 |  734
  62468 |    | 7 |  99 | 2312
  65883 |    | 7 |  98 | 2319
 119847 |    | 7 |  94 | 1962
  94702 |    | 7 |  94 | 1699
   4898 |    | 7 |  94 |  437
 144455 |    | 7 |  92 |    2
  17010 |    | 7 |  90 | 1980
  94554 |    | 7 |  90 |  755
   8251 |    | 7 |  89 |  454
 117271 |    | 7 |  88 | 2146
  77704 |    | 7 |  88 | 2140
  31640 |    | 7 |  87 | 2239
  99886 |    | 7 |  87 | 1626
 121820 |    | 7 |  87 | 1594
  66135 |    | 7 |  87 |  331
  94085 |    | 7 |  83 | 2296
  71180 |    | 7 |  82 | 2206
 116938 |    | 7 |  82 | 1978
 108645 |    | 7 |  82 | 1312
  64389 |    | 7 |  81 |  546
 106054 |    | 7 |  81 |  193
  97233 |    | 7 |  80 | 1298
  41911 |    | 7 |  78 | 1536
 125447 |    | 7 |  77 |  714
 124252 |    | 7 |  76 | 1289
  86622 |    | 7 |  76 |  468
  66105 |    | 7 |  74 | 1407
  58560 |    | 7 |  74 |  973
  49908 |    | 7 |  73 |  376
  90879 |    | 7 |  72 |  660
 121932 |    | 7 |  72 |  422
 136271 |    | 7 |  70 | 1722
  68318 |    | 7 |  69 | 2347
 138883 |    | 7 |  68 |  165
  27242 |    | 7 |  65 | 2311
  10947 |    | 7 |  65 | 1265
  77501 |    | 7 |  62 |    6
  40490 |    | 7 |  61 | 2170
 140903 |    | 7 |  61 | 1727
 146648 |    | 7 |  61 | 1310
  11022 |    | 7 |  61 |  996
  19788 |    | 7 |  60 | 2268
  43546 |    | 7 |  59 | 1393
 107883 |    | 7 |  57 | 1319
  72486 |    | 7 |  55 | 1426
  88064 |    | 7 |  55 |  818
 122268 |    | 7 |  52 |  542
 111013 |    | 7 |  48 | 2200
  65151 |    | 7 |  45 |  769
  66242 |    | 7 |  44 | 1378
 136978 |    | 7 |  44 |  179
 122943 |    | 7 |  41 | 1004
 136689 |    | 7 |  41 |  102
 139309 |    | 7 |  40 | 2150
  19037 |    | 7 |  39 | 1115
  70798 |    | 7 |  39 |   32
  49916 |    | 7 |  38 |  451
  96982 |    | 7 |  37 | 1206
  26986 |    | 7 |  32 | 1706
 127229 |    | 7 |  29 | 1630
  37090 |    | 7 |  28 | 1204
   2281 |    | 7 |  25 |  653
  27067 |    | 7 |  21 | 1412
  89712 |    | 7 |  21 |  584
  63353 |    | 7 |  19 |  965
  36299 |    | 7 |  18 | 2007
  32924 |    | 7 |  17 | 1525
  98071 |    | 7 |  15 |  959
  88066 |    | 7 |  14 |  287
  50020 |    | 7 |  11 | 1956
    259 |    | 7 |  10 | 1917
   3997 |    | 7 |   9 | 1642
  58997 |    | 7 |   8 |  773
 112370 |    | 7 |   6 | 1851
  16374 |    | 7 |   1 | 2237
  50820 |    | 7 |   1 |  390
 116121 | 20 | 8 | 100 | 1937
   2309 | 20 | 8 | 100 |  884
  63885 | 20 | 8 |  99 | 2009
 128096 | 20 | 8 |  98 | 1726
  58670 | 20 | 8 |  97 | 1697
  52159 | 20 | 8 |  94 |  745
 114787 | 20 | 8 |  93 | 1651
  83075 | 20 | 8 |  92 | 1146
  84779 | 20 | 8 |  92 |  227
  62993 | 20 | 8 |  91 | 1377
 147359 | 20 | 8 |  91 |  197
  93627 | 20 | 8 |  90 | 1687
  22199 | 20 | 8 |  89 |  810
  27168 | 20 | 8 |  85 |  683
  17892 | 20 | 8 |  84 | 1968
 145096 | 20 | 8 |  84 | 1268
  85400 | 20 | 8 |  82 |  587
 102796 | 20 | 8 |  76 |  484
  92945 | 20 | 8 |  75 | 2080
  86794 | 20 | 8 |  70 | 1885
  43010 | 20 | 8 |  69 | 1922
  89569 | 20 | 8 |  67 |  748
 122419 | 20 | 8 |  67 |   58
  94883 | 20 | 8 |  64 | 1740
  11672 | 20 | 8 |  64 |  516
  45036 | 20 | 8 |  63 |  441
 118098 | 20 | 8 |  57 | 1309
  83057 | 20 | 8 |  57 |  218
  93385 | 20 | 8 |  56 | 1859
 128089 | 20 | 8 |  55 | 1609
 108555 | 20 | 8 |  53 | 1151
  60795 | 20 | 8 |  52 | 2136
 131678 | 20 | 8 |  52 |  383
 135308 | 20 | 8 |  49 | 2171
  70765 | 20 | 8 |  48 | 1585
   2755 | 20 | 8 |  44 | 1891
 123919 | 20 | 8 |  44 |  437
 105017 | 20 | 8 |  44 |  357
  66346 | 20 | 8 |  43 | 1114
 132795 | 20 | 8 |  43 |  875
 122928 | 20 | 8 |  43 |  795
  78221 | 20 | 8 |  40 | 2273
  89730 | 20 | 8 |  40 | 1239
  38585 | 20 | 8 |  39 | 1837
  90097 | 20 | 8 |  39 |  790
 133551 | 20 | 8 |  32 | 2118
 130986 | 20 | 8 |  31 |  181
  67531 | 20 | 8 |  23 | 1688
 124462 | 20 | 8 |  23 | 1500
  81063 | 20 | 8 |  23 |  529
  18809 | 20 | 8 |  21 |  931
   5759 | 20 | 8 |  20 | 1531
   2447 | 20 | 8 |  20 |  416
 103353 | 20 | 8 |  19 | 2221
 100843 | 20 | 8 |  17 |  415
   4674 | 20 | 8 |  15 | 1777
  95649 | 20 | 8 |  15 |  190
 115290 | 20 | 8 |  14 | 2008
  25413 | 20 | 8 |  13 |  825
  70365 | 20 | 8 |  11 | 2267
 148744 | 20 | 8 |  11 |  704
  71938 | 20 | 8 |  11 |  680
   9103 | 20 | 8 |   8 |  972
  41689 | 20 | 8 |   1 | 1159
 102840 | 20 | 7 |  97 |  393
 115068 | 20 | 7 |  95 | 2246
  88123 | 20 | 7 |  94 |  108
  23809 | 20 | 7 |  93 |  476
 124760 | 20 | 7 |  91 | 2173
 129144 | 20 | 7 |  91 | 1922
  99993 | 20 | 7 |  91 |  804
  55723 | 20 | 7 |  86 |  509
  44498 | 20 | 7 |  85 | 1533
  19013 | 20 | 7 |  85 | 1143
  70334 | 20 | 7 |  85 |  589
  75627 | 20 | 7 |  83 | 2013
  14190 | 20 | 7 |  82 | 1503
  52236 | 20 | 7 |  82 |  478
  95008 | 20 | 7 |  78 |  387
 143010 | 20 | 7 |  77 | 1700
 143914 | 20 | 7 |  75 | 1505
  84983 | 20 | 7 |  75 |  487
 103084 | 20 | 7 |  75 |  443
  56637 | 20 | 7 |  74 |  568
 141876 | 20 | 7 |  74 |  448
  58372 | 20 | 7 |  71 | 1902
 105824 | 20 | 7 |  70 |  160
  38320 | 20 | 7 |  69 |  774
 147570 | 20 | 7 |  69 |  263
   5611 | 20 | 7 |  66 |  188
  15097 | 20 | 7 |  65 |  152
  34126 | 20 | 7 |  64 |  866
   8658 | 20 | 7 |  63 | 2345
  59908 | 20 | 7 |  63 | 1117
 111808 | 20 | 7 |  60 |   54
 115999 | 20 | 7 |  59 | 1934
 130421 | 20 | 7 |  57 | 1880
  56929 | 20 | 7 |  57 |  960
  40560 | 20 | 7 |  57 |  278
 113543 | 20 | 7 |  55 | 1542
  32819 | 20 | 7 |  52 |  237
 138079 | 20 | 7 |  51 | 1011
  70223 | 20 | 7 |  49 | 2140
   5460 | 20 | 7 |  48 | 1736
 130374 | 20 | 7 |  47 | 1402
  51313 | 20 | 7 |  47 |  354
 120405 | 20 | 7 |  45 | 1466
 115686 | 20 | 7 |  45 |  210
 107405 | 20 | 7 |  44 |  201
 109934 | 20 | 7 |  40 | 1848
  87370 | 20 | 7 |  40 | 1107
  50134 | 20 | 7 |  39 |  209
 127977 | 20 | 7 |  38 |  250
  34836 | 20 | 7 |  37 | 1062
  47224 | 20 | 7 |  35 |  229
  91965 | 20 | 7 |  31 | 1980
  43913 | 20 | 7 |  28 |  125
 122525 | 20 | 7 |  27 |  604
  28190 | 20 | 7 |  25 | 2046
  65782 | 20 | 7 |  24 |  176
 136346 | 20 | 7 |  23 | 1283
 126006 | 20 | 7 |  23 |  429
  40785 | 20 | 7 |  20 |   26
 121924 | 20 | 7 |  19 |  652
 137358 | 20 | 7 |  18 | 1635
  52399 | 20 | 7 |  16 |  671
 121144 | 20 | 7 |  15 | 1631
 118164 | 20 | 7 |  11 | 1908
 141349 | 20 | 7 |  11 | 1754
  20162 | 20 | 7 |  10 | 1995
   7357 | 20 | 7 |  10 | 1756
  83387 | 20 | 7 |  10 |  336
 107570 | 20 | 7 |   7 | 1878
   2869 | 20 | 7 |   7 |  655
 116560 | 20 | 7 |   6 | 1800
 126434 | 20 | 7 |   6 | 1522
  12052 | 20 | 7 |   5 | 2015
  23759 | 20 | 7 |   3 | 2020
   2793 | 20 | 7 |   3 | 1735
 114463 | 20 | 7 |   1 |  128
  48838 | 19 | 8 |  99 |  617
  14866 | 19 | 8 |  99 |  150
 108270 | 19 | 8 |  98 | 1698
 140754 | 19 | 8 |  96 |  710
  21330 | 19 | 8 |  95 |  590
 126197 | 19 | 8 |  94 |  824
 101678 | 19 | 8 |  94 |  257
  91254 | 19 | 8 |  93 |   83
 110442 | 19 | 8 |  92 |  659
 147292 | 19 | 8 |  88 | 1612
 148439 | 19 | 8 |  87 | 1269
  67037 | 19 | 8 |  85 |  786
 119867 | 19 | 8 |  84 | 1143
  66455 | 19 | 8 |  80 | 1844
  50972 | 19 | 8 |  79 | 2036
  61101 | 19 | 8 |  79 |  657
  14972 | 19 | 8 |  79 |  349
  92288 | 19 | 8 |  78 |  916
  74632 | 19 | 8 |  76 | 1888
 148491 | 19 | 8 |  76 | 1808
  20386 | 19 | 8 |  76 |  764
 132832 | 19 | 8 |  74 |   36
  93797 | 19 | 8 |  73 | 1780
  79844 | 19 | 8 |  73 | 1631
  64805 | 19 | 8 |  72 | 2129
  20047 | 19 | 8 |  72 | 1854
  75329 | 19 | 8 |  70 | 1663
  78969 | 19 | 8 |  70 | 1010
  30646 | 19 | 8 |  63 | 1674
  51949 | 19 | 8 |  61 | 2069
  85260 | 19 | 8 |  61 | 1688
 134595 | 19 | 8 |  58 |  979
  25639 | 19 | 8 |  56 | 1539
 118556 | 19 | 8 |  56 |  769
  28158 | 19 | 8 |  54 | 1848
  66199 | 19 | 8 |  54 | 1391
  75786 | 19 | 8 |  53 | 1294
  85961 | 19 | 8 |  52 |  876
 131310 | 19 | 8 |  50 | 1095
  49284 | 19 | 8 |  48 |   63
 117113 | 19 | 8 |  46 | 2304
 103988 | 19 | 8 |  44 | 1969
  57294 | 19 | 8 |  43 | 1009
  20977 | 19 | 8 |  40 |  163
 135423 | 19 | 8 |  39 |  275
 135905 | 19 | 8 |  32 | 2109
 122509 | 19 | 8 |  32 | 1167
 146008 | 19 | 8 |  30 | 2119
  75021 | 19 | 8 |  25 | 1889
  81068 | 19 | 8 |  25 | 1843
   1456 | 19 | 8 |  15 | 1437
 149307 | 19 | 8 |  15 |   20
  52989 | 19 | 8 |  12 | 2207
  46502 | 19 | 8 |  12 |  967
  74106 | 19 | 8 |  11 | 1689
  54499 | 19 | 8 |   9 | 2167
  14688 | 19 | 8 |   8 | 1684
  45965 | 19 | 8 |   8 | 1283
  33107 | 19 | 8 |   6 |  862
  74063 | 19 | 8 |   5 | 1997
  12643 | 19 | 8 |   5 |  376
  50021 | 19 | 8 |   4 |  230
 143684 | 19 | 7 |  98 | 1667
  33303 | 19 | 7 |  92 | 1716
  63048 | 19 | 7 |  91 |  332
  39268 | 19 | 7 |  90 | 1749
  26375 | 19 | 7 |  90 | 1599
 103032 | 19 | 7 |  89 | 1189
 125856 | 19 | 7 |  89 |   52
 133878 | 19 | 7 |  88 |  535
   8465 | 19 | 7 |  86 |  411
  72178 | 19 | 7 |  85 | 1870
 140980 | 19 | 7 |  85 | 1743
  91532 | 19 | 7 |  83 | 1372
  65862 | 19 | 7 |  82 | 1437
 115896 | 19 | 7 |  81 | 1362
  24718 | 19 | 7 |  78 |  243
 127899 | 19 | 7 |  76 | 1963
  66448 | 19 | 7 |  75 |  474
 125235 | 19 | 7 |  74 | 1878
  94862 | 19 | 7 |  69 |  748
  73301 | 19 | 7 |  67 | 1027
  99313 | 19 | 7 |  66 |  825
 103157 | 19 | 7 |  65 | 1768
 121545 | 19 | 7 |  64 | 2059
 134930 | 19 | 7 |  63 | 1639
  10882 | 19 | 7 |  63 |  666
   1797 | 19 | 7 |  62 | 1496
  48812 | 19 | 7 |  60 |  957
 113075 | 19 | 7 |  60 |  446
 105091 | 19 | 7 |  60 |  285
  65495 | 19 | 7 |  59 | 2192
 128277 | 19 | 7 |  58 |  240
  17488 | 19 | 7 |  56 |  957
 140095 | 19 | 7 |  56 |  359
  98499 | 19 | 7 |  53 |  836
  30697 | 19 | 7 |  52 | 1249
  49153 | 19 | 7 |  51 | 1334
  33719 | 19 | 7 |  51 |  354
 145210 | 19 | 7 |  50 |  535
 100487 | 19 | 7 |  50 |   61
  99062 | 19 | 7 |  49 |  422
  86110 | 19 | 7 |  48 | 1307
 120209 | 19 | 7 |  45 | 1908
 107470 | 19 | 7 |  44 | 1873
 132385 | 19 | 7 |  44 | 1036
 125181 | 19 | 7 |  43 |  968
 133661 | 19 | 7 |  43 |  484
  18116 | 19 | 7 |  40 |  259
   5956 | 19 | 7 |  39 | 1547
  26622 | 19 | 7 |  39 | 1544
  39692 | 19 | 7 |  39 | 1041
  67694 | 19 | 7 |  39 | 1005
  48774 | 19 | 7 |  38 | 1643
 101462 | 19 | 7 |  37 | 1274
 135524 | 19 | 7 |  37 |  374
  61185 | 19 | 7 |  33 | 2270
 143450 | 19 | 7 |  33 |  685
  56937 | 19 | 7 |  31 | 2133
 108074 | 19 | 7 |  31 | 1505
  81468 | 19 | 7 |  31 | 1500
 125907 | 19 | 7 |  29 |  856
 125246 | 19 | 7 |  27 | 1171
  35449 | 19 | 7 |  24 |  227
  29331 | 19 | 7 |  23 | 1170
 105626 | 19 | 7 |  21 |  485
  19474 | 19 | 7 |  11 |  486
 124463 | 19 | 7 |  11 |  207
 141569 | 19 | 7 |  10 | 1542
 119250 | 19 | 7 |  10 |  869
 105717 | 19 | 7 |   6 | 1855
 138742 | 19 | 7 |   5 | 1377
  50506 | 19 | 7 |   5 |  762
 128883 | 19 | 7 |   4 |  602
 105714 | 19 | 7 |   3 | 1099
  90405 | 19 | 7 |   2 |  823
  37061 | 19 | 7 |   2 |  556
 112010 | 19 | 7 |   1 | 1323
  56400 | 18 | 8 |  99 |  295
  86074 | 18 | 8 |  96 | 1863
 114403 | 18 | 8 |  94 | 1773
  41082 | 18 | 8 |  93 | 1953
 105871 | 18 | 8 |  92 | 1923
   3782 | 18 | 8 |  92 | 1824
  56532 | 18 | 8 |  90 |  407
  73366 | 18 | 8 |  89 |  942
  59114 | 18 | 8 |  85 | 2232
  86524 | 18 | 8 |  85 | 1482
 110749 | 18 | 8 |  84 | 1810
  94111 | 18 | 8 |  84 | 1583
  56740 | 18 | 8 |  84 | 1106
 114220 | 18 | 8 |  83 |  290
 142707 | 18 | 8 |  82 | 2075
 143562 | 18 | 8 |  82 | 1993
  40635 | 18 | 8 |  81 | 2164
  46197 | 18 | 8 |  81 |  721
 105504 | 18 | 8 |  80 | 1080
 140173 | 18 | 8 |  72 | 1292
  86003 | 18 | 8 |  72 |  337
  39009 | 18 | 8 |  69 | 1880
  21745 | 18 | 8 |  66 | 1746
  73880 | 18 | 8 |  65 | 2113
   2265 | 18 | 8 |  65 |   63
  60341 | 18 | 8 |  64 | 1386
  10055 | 18 | 8 |  62 | 1013
  23298 | 18 | 8 |  60 | 1760
 101477 | 18 | 8 |  53 | 1261
  28017 | 18 | 8 |  49 | 1918
 112523 | 18 | 8 |  48 | 2080
  52126 | 18 | 8 |  47 | 1705
  76869 | 18 | 8 |  46 | 2049
  62715 | 18 | 8 |  46 | 1993
  10631 | 18 | 8 |  46 |  696
 133138 | 18 | 8 |  44 |  823
 107488 | 18 | 8 |  43 | 2109
  29793 | 18 | 8 |  43 | 1531
  22200 | 18 | 8 |  43 |  659
  25404 | 18 | 8 |  38 | 1388
  56620 | 18 | 8 |  33 | 2269
  87559 | 18 | 8 |  33 |  562
 111114 | 18 | 8 |  30 |  463
  87787 | 18 | 8 |  29 | 1924
  57861 | 18 | 8 |  28 | 2267
  34054 | 18 | 8 |  28 |   20
  47520 | 18 | 8 |  27 | 2075
  13264 | 18 | 8 |  25 | 1657
 107753 | 18 | 8 |  24 | 1259
    351 | 18 | 8 |  23 |  294
  92736 | 18 | 8 |  22 |  530
 113302 | 18 | 8 |  21 |  698
  62960 | 18 | 8 |  20 | 1933
  10622 | 18 | 8 |  20 | 1581
  95813 | 18 | 8 |  19 | 1834
  66256 | 18 | 8 |  18 | 2171
  30510 | 18 | 8 |  18 | 1527
  62466 | 18 | 8 |  18 | 1057
  48765 | 18 | 8 |  17 |  725
  52211 | 18 | 8 |  15 | 1688
  54304 | 18 | 8 |  13 | 1384
  88983 | 18 | 8 |  13 |  127
  77517 | 18 | 8 |  12 |  638
  54856 | 18 | 8 |  10 | 2184
  43395 | 18 | 8 |  10 | 1279
   3807 | 18 | 8 |   9 | 1373
  14659 | 18 | 8 |   9 | 1149
 118914 | 18 | 8 |   8 | 2338
 140107 | 18 | 8 |   6 | 1581
  59383 | 18 | 8 |   6 |  143
 125487 | 18 | 8 |   4 | 2180
  99836 | 18 | 8 |   4 |  477
  28136 | 18 | 8 |   1 |   15
 101131 | 18 | 7 | 100 |  751
  33522 | 18 | 7 | 100 |  546
 103906 | 18 | 7 |  96 |  583
  63445 | 18 | 7 |  96 |  444
  68828 | 18 | 7 |  91 | 1282
 116058 | 18 | 7 |  91 |  614
  79083 | 18 | 7 |  90 | 2049
  55257 | 18 | 7 |  83 | 1755
 139347 | 18 | 7 |  82 | 1304
   6788 | 18 | 7 |  81 | 1815
   9832 | 18 | 7 |  80 | 1509
 134275 | 18 | 7 |  77 | 1431
  91198 | 18 | 7 |  75 |  273
  42821 | 18 | 7 |  74 | 1685
  42233 | 18 | 7 |  70 |  212
 143068 | 18 | 7 |  68 | 1627
 147930 | 18 | 7 |  67 |  507
  76311 | 18 | 7 |  65 | 1644
  64706 | 18 | 7 |  65 | 1029
  36850 | 18 | 7 |  63 | 1821
 118993 | 18 | 7 |  63 |  886
  28006 | 18 | 7 |  63 |  409
 109152 | 18 | 7 |  61 | 1990
 104914 | 18 | 7 |  60 |  863
  12219 | 18 | 7 |  59 |  938
  32894 | 18 | 7 |  59 |  102
  52851 | 18 | 7 |  57 | 2047
 107095 | 18 | 7 |  52 | 2087
  30072 | 18 | 7 |  52 |    6
 116988 | 18 | 7 |  51 | 1218
  44445 | 18 | 7 |  51 |  641
  45198 | 18 | 7 |  51 |  152
  78107 | 18 | 7 |  50 | 2291
 135908 | 18 | 7 |  47 | 2019
  42820 | 18 | 7 |  46 |  916
  26960 | 18 | 7 |  46 |  289
  88794 | 18 | 7 |  45 | 1880
  10273 | 18 | 7 |  45 |  376
  50393 | 18 | 7 |  41 | 1619
  88237 | 18 | 7 |  40 | 1918
   1642 | 18 | 7 |  38 | 2211
  10822 | 18 | 7 |  36 |  687
  21331 | 18 | 7 |  35 | 2227
 140599 | 18 | 7 |  35 | 2071
   3699 | 18 | 7 |  29 | 1188
 130170 | 18 | 7 |  29 |  162
 115643 | 18 | 7 |  28 |  874
  53995 | 18 | 7 |  26 | 2225
  30305 | 18 | 7 |  25 |  547
 142389 | 18 | 7 |  22 |  590
 139492 | 18 | 7 |  21 |  577
 145316 | 18 | 7 |  20 | 2318
   4825 | 18 | 7 |  17 | 1542
  84022 | 18 | 7 |  17 |  895
  18548 | 18 | 7 |  11 |  643
  89594 | 18 | 7 |   9 |  859
  56751 | 18 | 7 |   9 |  706
  19223 | 18 | 7 |   8 | 1905
  68505 | 18 | 7 |   7 | 1197
   1467 | 18 | 7 |   6 | 1228
  65494 | 18 | 7 |   4 | 2199
  99444 | 18 | 7 |   4 | 1052
  46233 | 18 | 7 |   2 | 2300
 146668 | 17 | 8 | 100 | 2234
  28113 | 17 | 8 |  99 | 2119
  61459 | 17 | 8 |  99 | 1380
 105846 | 17 | 8 |  98 | 2006
  10922 | 17 | 8 |  96 | 2302
  97623 | 17 | 8 |  95 | 2268
 102749 | 17 | 8 |  95 | 2058
  99200 | 17 | 8 |  95 |  575
 149906 | 17 | 8 |  92 |  345
 101811 | 17 | 8 |  87 | 1795
 134867 | 17 | 8 |  87 |  623
 105171 | 17 | 8 |  87 |  144
 139471 | 17 | 8 |  84 |   76
 143632 | 17 | 8 |  83 |  872
  65808 | 17 | 8 |  82 | 1225
  51744 | 17 | 8 |  81 |  876
 117750 | 17 | 8 |  80 | 1911
  13441 | 17 | 8 |  74 | 1621
 137109 | 17 | 8 |  71 | 1757
 103352 | 17 | 8 |  70 | 1495
  62042 | 17 | 8 |  68 | 1947
   9393 | 17 | 8 |  68 | 1460
   8856 | 17 | 8 |  68 |  543
  26185 | 17 | 8 |  68 |   46
  58610 | 17 | 8 |  66 | 1075
  94887 | 17 | 8 |  65 |  412
 117132 | 17 | 8 |  57 | 1046
  84425 | 17 | 8 |  55 | 1077
  75303 | 17 | 8 |  52 | 1995
  19318 | 17 | 8 |  52 |  258
 101584 | 17 | 8 |  51 |   18
 137505 | 17 | 8 |  50 |  883
  25899 | 17 | 8 |  49 | 2270
  27233 | 17 | 8 |  49 | 1144
  24254 | 17 | 8 |  46 |  178
 102824 | 17 | 8 |  45 | 2152
  52524 | 17 | 8 |  42 |  763
  27940 | 17 | 8 |  41 |  476
 140773 | 17 | 8 |  40 |  856
  82280 | 17 | 8 |  39 | 1786
  19840 | 17 | 8 |  37 |  582
   6100 | 17 | 8 |  36 | 1313
 108370 | 17 | 8 |  36 |  314
  35602 | 17 | 8 |  35 |  478
  79351 | 17 | 8 |  30 | 1816
  58508 | 17 | 8 |  30 |  991
    887 | 17 | 8 |  29 | 2142
  86750 | 17 | 8 |  28 | 2215
 115546 | 17 | 8 |  27 |   27
  51442 | 17 | 8 |  25 |  978
  98513 | 17 | 8 |  25 |  580
  57042 | 17 | 8 |  23 | 2126
  63373 | 17 | 8 |  23 | 1612
 111893 | 17 | 8 |  20 | 1377
 106331 | 17 | 8 |  19 | 2325
  26840 | 17 | 8 |  13 | 1378
  47587 | 17 | 8 |  13 |  620
  25918 | 17 | 8 |  10 |  819
  55733 | 17 | 8 |   5 |  968
  12631 | 17 | 8 |   5 |  944
 137083 | 17 | 8 |   5 |  784
  24621 | 17 | 8 |   2 |  376
 131404 | 17 | 7 |  99 | 2079
  30420 | 17 | 7 |  99 | 1253
  59133 | 17 | 7 |  99 |  998
 109638 | 17 | 7 |  96 | 1603
  54876 | 17 | 7 |  94 | 2080
 120665 | 17 | 7 |  93 | 1112
  93214 | 17 | 7 |  93 |  337
  80954 | 17 | 7 |  89 | 1225
  15954 | 17 | 7 |  87 | 1721
   2383 | 17 | 7 |  87 | 1431
  18561 | 17 | 7 |  86 | 1672
 149496 | 17 | 7 |  85 | 1612
  29631 | 17 | 7 |  84 | 2293
  95582 | 17 | 7 |  84 |  186
   2619 | 17 | 7 |  83 | 1704
  72489 | 17 | 7 |  83 | 1021
   6485 | 17 | 7 |  83 |  797
 129768 | 17 | 7 |  80 |  853
  82998 | 17 | 7 |  79 |  416
  96886 | 17 | 7 |  78 |  691
  71865 | 17 | 7 |  75 | 1598
  86032 | 17 | 7 |  74 | 1927
  63955 | 17 | 7 |  71 | 1733
  22933 | 17 | 7 |  71 |   83
 122379 | 17 | 7 |  70 |  791
  26516 | 17 | 7 |  68 |  557
  23404 | 17 | 7 |  68 |  288
  94664 | 17 | 7 |  64 |  701
  12514 | 17 | 7 |  63 | 1180
  82278 | 17 | 7 |  63 |  444
  46678 | 17 | 7 |  62 | 1707
  70492 | 17 | 7 |  61 | 1811
   5134 | 17 | 7 |  59 |  538
  39576 | 17 | 7 |  57 | 2036
  84453 | 17 | 7 |  56 |  121
  95510 | 17 | 7 |  54 | 2300
  62610 | 17 | 7 |  51 |  353
  72354 | 17 | 7 |  49 |  544
  10572 | 17 | 7 |  48 | 2124
  45987 | 17 | 7 |  47 | 1887
 122047 | 17 | 7 |  45 | 2114
   1261 | 17 | 7 |  44 |  646
  92184 | 17 | 7 |  42 |  897
 129161 | 17 | 7 |  42 |  474
  60801 | 17 | 7 |  41 |  222
 143517 | 17 | 7 |  33 | 1143
  14250 | 17 | 7 |  32 | 2340
  37727 | 17 | 7 |  32 | 1328
  92729 | 17 | 7 |  31 | 1412
  64845 | 17 | 7 |  30 | 1197
  60822 | 17 | 7 |  29 | 1960
  38773 | 17 | 7 |  28 | 1839
  31941 | 17 | 7 |  28 |  713
 125207 | 17 | 7 |  26 | 1951
 148076 | 17 | 7 |  25 |  326
  24869 | 17 | 7 |  23 |  715
 105594 | 17 | 7 |  15 | 1411
  74142 | 17 | 7 |  14 | 2109
  48478 | 17 | 7 |  13 |  881
  54538 | 17 | 7 |  10 | 1698
 110563 | 17 | 7 |   9 | 2334
 148399 | 17 | 7 |   9 | 1840
  45395 | 17 | 7 |   6 | 1984
  85372 | 17 | 7 |   6 |  938
 110657 | 17 | 7 |   4 |  302
  58941 | 17 | 7 |   1 | 1988
 144976 | 16 | 8 |  99 | 1516
  96011 | 16 | 8 |  97 | 2295
   8535 | 16 | 8 |  97 | 1060
  95484 | 16 | 8 |  96 |   71
 102995 | 16 | 8 |  94 | 1780
 135833 | 16 | 8 |  94 | 1721
 124431 | 16 | 8 |  94 |  798
  76702 | 16 | 8 |  93 | 1379
 119324 | 16 | 8 |  92 |  321
  67799 | 16 | 8 |  91 | 1553
  59816 | 16 | 8 |  90 |  559
  78754 | 16 | 8 |  85 | 1408
  47776 | 16 | 8 |  83 | 2217
  56017 | 16 | 8 |  83 | 1614
  90009 | 16 | 8 |  81 | 1578
  41232 | 16 | 8 |  81 |  209
 108539 | 16 | 8 |  79 | 1583
 140675 | 16 | 8 |  79 | 1551
  47282 | 16 | 8 |  78 |  955
  33081 | 16 | 8 |  77 | 1886
  72447 | 16 | 8 |  76 |  973
  61777 | 16 | 8 |  75 | 2314
  65217 | 16 | 8 |  75 | 1927
  29741 | 16 | 8 |  74 | 1380
  28823 | 16 | 8 |  74 |  574
  17525 | 16 | 8 |  73 | 1092
  92196 | 16 | 8 |  72 |  547
  54503 | 16 | 8 |  71 | 1885
  43622 | 16 | 8 |  71 |  797
 139937 | 16 | 8 |  71 |  716
 124102 | 16 | 8 |  71 |  370
   6196 | 16 | 8 |  68 |  987
   7276 | 16 | 8 |  66 | 2187
 115292 | 16 | 8 |  63 |  849
 109846 | 16 | 8 |  63 |  474
  59573 | 16 | 8 |  61 |    2
  51099 | 16 | 8 |  60 | 1767
 125279 | 16 | 8 |  60 | 1586
  80362 | 16 | 8 |  58 |  510
   7086 | 16 | 8 |  56 |  554
  14072 | 16 | 8 |  55 | 2067
  43393 | 16 | 8 |  52 | 1140
  89169 | 16 | 8 |  51 | 1060
  93110 | 16 | 8 |  50 |  520
   3474 | 16 | 8 |  49 |  327
  35374 | 16 | 8 |  47 | 2088
  48392 | 16 | 8 |  46 | 1769
 130552 | 16 | 8 |  45 |  184
 114902 | 16 | 8 |  44 |  392
  32516 | 16 | 8 |  44 |    8
 126690 | 16 | 8 |  42 |  301
  44442 | 16 | 8 |  41 | 1615
  41063 | 16 | 8 |  40 |  839
  11600 | 16 | 8 |  36 |  867
  45249 | 16 | 8 |  36 |  361
   4778 | 16 | 8 |  34 |  860
  25824 | 16 | 8 |  33 | 2333
  37283 | 16 | 8 |  33 | 2108
  72191 | 16 | 8 |  33 | 1605
   5664 | 16 | 8 |  33 |   28
 123693 | 16 | 8 |  32 | 1999
  20721 | 16 | 8 |  32 | 1834
  96768 | 16 | 8 |  27 | 1713
  49184 | 16 | 8 |  27 |  109
   8153 | 16 | 8 |  21 |  498
   9923 | 16 | 8 |  20 |   33
  10998 | 16 | 8 |  19 |  456
  62161 | 16 | 8 |  18 |   54
 112199 | 16 | 8 |  16 | 2278
  27846 | 16 | 8 |  13 | 2103
  55394 | 16 | 8 |  13 | 1902
  93741 | 16 | 8 |  12 | 2031
  86385 | 16 | 8 |  10 |  280
  26926 | 16 | 8 |   9 | 1075
 100362 | 16 | 8 |   7 |  202
  11767 | 16 | 8 |   5 |  694
  64733 | 16 | 8 |   5 |   54
  73280 | 16 | 8 |   3 | 1326
  44983 | 16 | 8 |   1 | 1413
  56894 | 16 | 8 |   1 |  436
   7282 | 16 | 7 | 100 | 1702
  34329 | 16 | 7 | 100 |  307
 126603 | 16 | 7 |  99 | 1148
   3909 | 16 | 7 |  96 |  526
 145253 | 16 | 7 |  92 | 1501
 135499 | 16 | 7 |  91 | 2024
 111370 | 16 | 7 |  87 | 2278
  24824 | 16 | 7 |  85 | 2304
  10909 | 16 | 7 |  83 |  754
 117364 | 16 | 7 |  83 |  406
 136062 | 16 | 7 |  83 |  296
   2216 | 16 | 7 |  82 | 2307
  30895 | 16 | 7 |  80 |  698
 132845 | 16 | 7 |  79 | 2189
  72378 | 16 | 7 |  79 |  429
  14821 | 16 | 7 |  78 | 1552
  22214 | 16 | 7 |  76 | 1694
  38434 | 16 | 7 |  73 |  367
  93143 | 16 | 7 |  71 | 1303
  13571 | 16 | 7 |  65 | 1619
  41044 | 16 | 7 |  64 |  760
   5557 | 16 | 7 |  62 | 1582
  76581 | 16 | 7 |  60 | 1091
  87258 | 16 | 7 |  56 | 1370
  56344 | 16 | 7 |  55 | 1779
 120291 | 16 | 7 |  55 |  996
  88004 | 16 | 7 |  55 |   36
  42690 | 16 | 7 |  54 | 1817
  94064 | 16 | 7 |  53 |  261
  92884 | 16 | 7 |  52 | 1177
  78235 | 16 | 7 |  51 |  721
 101240 | 16 | 7 |  51 |   58
 122544 | 16 | 7 |  49 |  943
 103800 | 16 | 7 |  45 | 2270
  31135 | 16 | 7 |  43 | 1929
  17206 | 16 | 7 |  40 |  849
  12630 | 16 | 7 |  36 |  618
 149715 | 16 | 7 |  35 | 1625
   9034 | 16 | 7 |  35 |  907
 101725 | 16 | 7 |  35 |   63
  27908 | 16 | 7 |  30 |  664
 108648 | 16 | 7 |  26 | 1881
  78154 | 16 | 7 |  21 |  815
 133091 | 16 | 7 |  20 | 1487
 126364 | 16 | 7 |  19 | 1682
  11056 | 16 | 7 |  16 | 1447
  36386 | 16 | 7 |  15 |  918
  21425 | 16 | 7 |  12 | 2258
 113717 | 16 | 7 |  11 | 1724
 131811 | 16 | 7 |  11 | 1678
  22612 | 16 | 7 |  11 | 1228
 134072 | 16 | 7 |  10 | 2131
  58781 | 16 | 7 |   9 | 1649
  10161 | 16 | 7 |   8 | 1599
   9194 | 16 | 7 |   6 |  661
  84433 | 16 | 7 |   4 | 1991
 110556 | 16 | 7 |   2 |  555
  77965 | 15 | 8 | 100 | 2201
   8757 | 15 | 8 | 100 |  868
  33862 | 15 | 8 |  98 | 2246
  84929 | 15 | 8 |  98 | 1470
 111768 | 15 | 8 |  91 |  110
  98385 | 15 | 8 |  90 | 1021
 117766 | 15 | 8 |  90 |  423
  64719 | 15 | 8 |  87 | 1652
 137820 | 15 | 8 |  86 | 1671
 125381 | 15 | 8 |  86 |  830
 108072 | 15 | 8 |  85 | 2140
 119546 | 15 | 8 |  84 |  519
 113824 | 15 | 8 |  83 | 1416
  20929 | 15 | 8 |  83 |  348
  17017 | 15 | 8 |  80 | 1781
  19588 | 15 | 8 |  79 |  470
  80522 | 15 | 8 |  77 |  411
 136991 | 15 | 8 |  71 | 2157
 144467 | 15 | 8 |  71 | 1114
  32180 | 15 | 8 |  69 | 1638
  51251 | 15 | 8 |  63 | 1559
 126625 | 15 | 8 |  59 |  167
  36669 | 15 | 8 |  56 |  394
  83655 | 15 | 8 |  55 |  267
  10985 | 15 | 8 |  50 |  713
   1972 | 15 | 8 |  48 |  916
  12743 | 15 | 8 |  44 | 1985
  63079 | 15 | 8 |  44 | 1725
  45620 | 15 | 8 |  44 |  483
  50569 | 15 | 8 |  43 | 1926
  41682 | 15 | 8 |  42 |  165
  73057 | 15 | 8 |  41 |  884
 140520 | 15 | 8 |  39 | 2327
  81172 | 15 | 8 |  39 |  753
 132710 | 15 | 8 |  38 | 2159
  48566 | 15 | 8 |  38 |  128
  60932 | 15 | 8 |  37 |  636
   8614 | 15 | 8 |  35 | 1391
  53946 | 15 | 8 |  34 |   96
 118007 | 15 | 8 |  31 | 2219
 101214 | 15 | 8 |  30 | 2342
 127228 | 15 | 8 |  30 | 1770
   2607 | 15 | 8 |  29 | 2138
  66222 | 15 | 8 |  27 | 2307
  45599 | 15 | 8 |  26 | 1175
  20476 | 15 | 8 |  23 |  219
  53696 | 15 | 8 |  21 | 1437
  91166 | 15 | 8 |  20 | 1450
 116662 | 15 | 8 |  19 | 1530
  59741 | 15 | 8 |  18 |  420
  71922 | 15 | 8 |  14 |  641
  56231 | 15 | 8 |  13 | 1843
  14862 | 15 | 8 |  11 |  824
 138113 | 15 | 8 |  10 | 1954
  67102 | 15 | 8 |   7 |  727
 121563 | 15 | 8 |   7 |  670
   1755 | 15 | 8 |   1 | 2160
  93156 | 15 | 8 |   1 |  574
  10799 | 15 | 7 | 100 | 2017
  21099 | 15 | 7 |  96 | 1635
  54082 | 15 | 7 |  95 | 1117
  33878 | 15 | 7 |  94 | 2108
  62267 | 15 | 7 |  94 |  686
  43307 | 15 | 7 |  91 |  652
 126043 | 15 | 7 |  90 | 2181
 126781 | 15 | 7 |  90 | 1974
  99046 | 15 | 7 |  90 | 1542
 101375 | 15 | 7 |  89 | 1740
 104268 | 15 | 7 |  89 | 1666
 148463 | 15 | 7 |  89 | 1302
  72294 | 15 | 7 |  88 | 1045
  87735 | 15 | 7 |  87 | 1297
  56725 | 15 | 7 |  87 | 1278
 141738 | 15 | 7 |  87 |  539
 102592 | 15 | 7 |  86 |  988
  32651 | 15 | 7 |  84 | 2147
  48031 | 15 | 7 |  82 | 2058
 116799 | 15 | 7 |  81 | 2332
  64237 | 15 | 7 |  81 |  868
 148824 | 15 | 7 |  77 |  564
  26422 | 15 | 7 |  76 | 2061
  80476 | 15 | 7 |  72 |   97
 142003 | 15 | 7 |  71 | 2192
  75172 | 15 | 7 |  71 | 1393
  71197 | 15 | 7 |  71 |  118
  23606 | 15 | 7 |  70 |  398
  80082 | 15 | 7 |  70 |  237
 129767 | 15 | 7 |  69 | 2192
  35108 | 15 | 7 |  69 |  348
 143298 | 15 | 7 |  64 | 1432
  49218 | 15 | 7 |  63 | 2146
  55690 | 15 | 7 |  63 | 1975
   8292 | 15 | 7 |  63 | 1318
  88440 | 15 | 7 |  62 | 1680
  25370 | 15 | 7 |  62 | 1005
  16417 | 15 | 7 |  62 |   90
  86421 | 15 | 7 |  61 | 2232
 127896 | 15 | 7 |  61 | 1881
  60409 | 15 | 7 |  61 | 1320
  56562 | 15 | 7 |  59 |  482
   5360 | 15 | 7 |  59 |  150
  43967 | 15 | 7 |  57 | 1152
  59097 | 15 | 7 |  55 | 1159
 118115 | 15 | 7 |  55 |  211
   1419 | 15 | 7 |  54 |  656
  74435 | 15 | 7 |  53 | 1029
  59264 | 15 | 7 |  53 |  816
  59983 | 15 | 7 |  51 |  482
  96608 | 15 | 7 |  48 |  928
 132009 | 15 | 7 |  47 |  114
  18491 | 15 | 7 |  45 | 1494
 120861 | 15 | 7 |  45 |  357
 121529 | 15 | 7 |  43 | 1950
 142740 | 15 | 7 |  43 |  561
  57751 | 15 | 7 |  40 | 1127
  57930 | 15 | 7 |  37 | 1019
  57120 | 15 | 7 |  35 |  312
  29908 | 15 | 7 |  34 | 1790
  13171 | 15 | 7 |  34 |  183
  19259 | 15 | 7 |  32 |  754
  50265 | 15 | 7 |  29 |  785
  81478 | 15 | 7 |  28 |  888
  67554 | 15 | 7 |  27 | 2342
  26624 | 15 | 7 |  27 |  572
 129638 | 15 | 7 |  26 | 2261
  58066 | 15 | 7 |  25 | 1414
  97955 | 15 | 7 |  23 |  550
  78167 | 15 | 7 |  20 | 1869
  85443 | 15 | 7 |  20 | 1751
 136253 | 15 | 7 |  19 | 2099
  66114 | 15 | 7 |  19 | 1298
  29839 | 15 | 7 |  19 |  218
   9910 | 15 | 7 |  15 |  661
 122767 | 15 | 7 |  14 | 1136
  40967 | 15 | 7 |  14 |  902
 114440 | 15 | 7 |  13 |  494
  40009 | 15 | 7 |  10 |  804
 125132 | 15 | 7 |   9 |   22
 148105 | 15 | 7 |   7 |  515
  74689 | 15 | 7 |   6 | 2093
 111734 | 15 | 7 |   6 |  758
  29396 | 15 | 7 |   4 | 1336
  43292 | 15 | 7 |   3 | 2279
   5104 | 15 | 7 |   1 | 1998
  73867 | 15 | 7 |   1 | 1590
 116095 | 14 | 8 | 100 | 1323
  31035 | 14 | 8 |  99 | 2003
 105888 | 14 | 8 |  99 | 1977
  23247 | 14 | 8 |  99 |  661
  34532 | 14 | 8 |  97 |  945
   3529 | 14 | 8 |  94 |   35
  57076 | 14 | 8 |  93 |  881
 141041 | 14 | 8 |  91 | 1913
  61433 | 14 | 8 |  89 | 1182
  58095 | 14 | 8 |  89 |  471
  19021 | 14 | 8 |  89 |   11
  90328 | 14 | 8 |  88 |  173
  76694 | 14 | 8 |  87 |  537
  56792 | 14 | 8 |  85 | 1014
 112927 | 14 | 8 |  80 |  622
 135073 | 14 | 8 |  80 |  253
  51452 | 14 | 8 |  77 | 2289
 128997 | 14 | 8 |  77 |  764
 120816 | 14 | 8 |  74 | 1634
  60166 | 14 | 8 |  73 |  658
  54384 | 14 | 8 |  72 | 1718
  45861 | 14 | 8 |  69 |  343
  62376 | 14 | 8 |  66 | 1291
  96211 | 14 | 8 |  65 | 1648
  60903 | 14 | 8 |  64 | 2202
 117702 | 14 | 8 |  64 | 1872
 111047 | 14 | 8 |  64 |  451
 109048 | 14 | 8 |  63 | 1524
  54830 | 14 | 8 |  62 | 1920
  36344 | 14 | 8 |  60 |  984
  49468 | 14 | 8 |  59 | 2303
  55096 | 14 | 8 |  59 | 1971
 127399 | 14 | 8 |  59 | 1741
 109191 | 14 | 8 |  58 |  994
  13090 | 14 | 8 |  58 |  403
 105257 | 14 | 8 |  57 | 1419
 122980 | 14 | 8 |  57 | 1210
 118389 | 14 | 8 |  56 | 2281
 125883 | 14 | 8 |  55 | 1239
  74452 | 14 | 8 |  54 | 2240
 116678 | 14 | 8 |  51 | 2171
  67986 | 14 | 8 |  51 |  314
  57293 | 14 | 8 |  50 | 2258
 100853 | 14 | 8 |  50 | 1408
 135081 | 14 | 8 |  44 | 1573
 137223 | 14 | 8 |  44 |  888
 122693 | 14 | 8 |  44 |   52
  43291 | 14 | 8 |  39 | 1485
  35140 | 14 | 8 |  38 |  249
 112190 | 14 | 8 |  34 | 2157
  89646 | 14 | 8 |  34 | 1758
  57727 | 14 | 8 |  33 |  757
  90866 | 14 | 8 |  31 |  538
  32255 | 14 | 8 |  30 |  875
  54958 | 14 | 8 |  29 | 2133
  66573 | 14 | 8 |  27 | 2178
 141539 | 14 | 8 |  23 | 1557
  34755 | 14 | 8 |  23 | 1111
  18052 | 14 | 8 |  23 |  775
 104224 | 14 | 8 |  11 | 1018
   4433 | 14 | 8 |  10 | 1649
  28579 | 14 | 8 |   7 | 1232
  86677 | 14 | 8 |   6 | 1636
  64541 | 14 | 8 |   4 | 1828
  96935 | 14 | 8 |   4 |  605
 148237 | 14 | 8 |   2 | 2295
  94090 | 14 | 8 |   1 |  714
 122421 | 14 | 8 |   1 |  226
 117700 | 14 | 7 |  99 |  959
   1246 | 14 | 7 |  99 |  935
  85008 | 14 | 7 |  99 |  211
  88195 | 14 | 7 |  98 | 1981
  56334 | 14 | 7 |  98 | 1898
 100504 | 14 | 7 |  97 |  243
 130072 | 14 | 7 |  96 |   45
  44868 | 14 | 7 |  95 | 1312
  60900 | 14 | 7 |  94 | 1325
 134724 | 14 | 7 |  92 | 1863
  65770 | 14 | 7 |  92 | 1559
  64301 | 14 | 7 |  90 | 1087
  57052 | 14 | 7 |  89 | 1500
 111179 | 14 | 7 |  89 |  531
  92047 | 14 | 7 |  88 |  541
  33545 | 14 | 7 |  88 |  446
  32217 | 14 | 7 |  84 |  540
 138190 | 14 | 7 |  82 |  499
  75262 | 14 | 7 |  79 | 2245
 115020 | 14 | 7 |  79 | 1412
 122110 | 14 | 7 |  79 |   74
 108248 | 14 | 7 |  75 |  554
  63886 | 14 | 7 |  73 |  141
  34777 | 14 | 7 |  72 | 1294
  78037 | 14 | 7 |  70 | 1120
   6355 | 14 | 7 |  69 |  501
  50038 | 14 | 7 |  66 | 2035
  30565 | 14 | 7 |  64 |  417
  38887 | 14 | 7 |  57 |  232
  52106 | 14 | 7 |  56 | 1231
  25878 | 14 | 7 |  54 | 1750
 126248 | 14 | 7 |  53 | 1966
  26639 | 14 | 7 |  51 | 1915
 135689 | 14 | 7 |  51 | 1673
 100048 | 14 | 7 |  48 | 2110
 111108 | 14 | 7 |  47 | 1349
  81929 | 14 | 7 |  45 |  795
  76946 | 14 | 7 |  44 |  779
 118031 | 14 | 7 |  44 |  307
  86604 | 14 | 7 |  39 | 1146
 114766 | 14 | 7 |  35 |  560
  74371 | 14 | 7 |  34 | 1306
  84187 | 14 | 7 |  34 | 1059
 112309 | 14 | 7 |  31 | 2338
  26084 | 14 | 7 |  30 | 1804
 113074 | 14 | 7 |  27 | 1846
  36240 | 14 | 7 |  27 | 1371
 143200 | 14 | 7 |  27 |  262
  44256 | 14 | 7 |  26 | 1693
  98423 | 14 | 7 |  26 | 1156
  76259 | 14 | 7 |  25 | 1086
  73875 | 14 | 7 |  25 |  721
  88715 | 14 | 7 |  24 |  641
 137236 | 14 | 7 |  23 | 1913
  32140 | 14 | 7 |  23 |  593
 107165 | 14 | 7 |  22 |  104
  62157 | 14 | 7 |  20 | 1297
   8316 | 14 | 7 |  19 |  986
  96155 | 14 | 7 |  18 | 1245
  82421 | 14 | 7 |  18 |  154
 118075 | 14 | 7 |  17 | 1546
  46165 | 14 | 7 |  15 |  145
 128387 | 14 | 7 |  14 |  550
   3822 | 14 | 7 |  11 | 1200
  50182 | 14 | 7 |   9 |  465
 134834 | 14 | 7 |   9 |  224
  19426 | 14 | 7 |   8 |   26
 103423 | 14 | 7 |   4 | 1398
  56490 | 14 | 7 |   1 | 2330
   1708 | 14 | 7 |   1 | 1155
  78868 | 14 | 7 |   1 |  439
  96109 | 13 | 8 |  97 | 2173
  61702 | 13 | 8 |  97 | 1812
 139683 | 13 | 8 |  96 |  468
   5328 | 13 | 8 |  95 | 1226
  49497 | 13 | 8 |  94 |  638
  21940 | 13 | 8 |  89 |  830
  42905 | 13 | 8 |  88 |  879
  66764 | 13 | 8 |  87 | 2070
   5066 | 13 | 8 |  86 |  777
 141176 | 13 | 8 |  82 |  457
  92932 | 13 | 8 |  81 |  507
  97065 | 13 | 8 |  78 | 2241
  50912 | 13 | 8 |  78 |  425
 149274 | 13 | 8 |  78 |   93
    924 | 13 | 8 |  77 | 1907
  40829 | 13 | 8 |  77 |  273
  43641 | 13 | 8 |  75 | 2127
 147170 | 13 | 8 |  73 | 1010
 119681 | 13 | 8 |  73 |  604
  70987 | 13 | 8 |  72 | 2258
  21948 | 13 | 8 |  72 | 1412
  60002 | 13 | 8 |  71 | 1464
  24806 | 13 | 8 |  70 | 1346
  63548 | 13 | 8 |  69 | 1773
  57806 | 13 | 8 |  69 | 1394
  16828 | 13 | 8 |  68 | 1621
 121915 | 13 | 8 |  66 | 1827
 125955 | 13 | 8 |  66 | 1642
 147074 | 13 | 8 |  65 | 1022
  52954 | 13 | 8 |  64 | 2211
 139969 | 13 | 8 |  61 | 1751
  78500 | 13 | 8 |  59 | 1740
  91749 | 13 | 8 |  58 | 1977
  60522 | 13 | 8 |  57 | 1868
  82234 | 13 | 8 |  52 |  940
 116365 | 13 | 8 |  52 |  703
  86787 | 13 | 8 |  50 | 1553
  46584 | 13 | 8 |  49 | 1833
  52122 | 13 | 8 |  48 |  769
  19303 | 13 | 8 |  48 |  189
  96961 | 13 | 8 |  45 | 1832
 123008 | 13 | 8 |  43 | 1384
 116260 | 13 | 8 |  41 | 2048
   4031 | 13 | 8 |  40 |   92
 115176 | 13 | 8 |  39 |  858
 108972 | 13 | 8 |  38 |  633
  68895 | 13 | 8 |  35 | 2232
  38123 | 13 | 8 |  33 | 1063
  43042 | 13 | 8 |  33 |  843
   7531 | 13 | 8 |  33 |   87
 143476 | 13 | 8 |  27 | 2312
 111059 | 13 | 8 |  26 | 2117
 128936 | 13 | 8 |  26 |  749
  77983 | 13 | 8 |  26 |  330
  96488 | 13 | 8 |  25 | 2258
  69376 | 13 | 8 |  25 | 1939
  39672 | 13 | 8 |  24 |  108
  42658 | 13 | 8 |  22 |  550
  73832 | 13 | 8 |  20 |  286
  55875 | 13 | 8 |  18 | 1098
  57777 | 13 | 8 |  18 |  296
   1568 | 13 | 8 |  18 |  250
  93708 | 13 | 8 |  14 | 1465
  83512 | 13 | 8 |  12 |  534
  52744 | 13 | 8 |  11 | 1909
  89820 | 13 | 8 |   8 | 1246
  12552 | 13 | 8 |   8 |  786
 106859 | 13 | 8 |   6 |  366
 125967 | 13 | 7 |  99 | 2035
  12724 | 13 | 7 |  96 | 1498
  86127 | 13 | 7 |  96 | 1186
    150 | 13 | 7 |  96 | 1152
 113878 | 13 | 7 |  93 | 2178
   4785 | 13 | 7 |  93 | 1917
  43488 | 13 | 7 |  90 |  867
 111834 | 13 | 7 |  89 | 1114
 104267 | 13 | 7 |  87 |  534
 136312 | 13 | 7 |  86 |  120
 113762 | 13 | 7 |  85 | 1279
  94071 | 13 | 7 |  83 |  564
 134865 | 13 | 7 |  82 |  329
 148704 | 13 | 7 |  79 | 1768
  71487 | 13 | 7 |  78 | 2155
  27640 | 13 | 7 |  78 | 2150
  59901 | 13 | 7 |  72 |  361
 102267 | 13 | 7 |  71 | 1273
   9044 | 13 | 7 |  67 | 1061
  31289 | 13 | 7 |  66 | 2275
  20872 | 13 | 7 |  66 | 1074
  16232 | 13 | 7 |  64 | 1690
  45806 | 13 | 7 |  64 | 1378
  20371 | 13 | 7 |  64 |  451
 145750 | 13 | 7 |  60 | 1440
 128238 | 13 | 7 |  60 |  261
  15397 | 13 | 7 |  59 |  780
 140834 | 13 | 7 |  57 |  752
   1508 | 13 | 7 |  56 | 1958
  82899 | 13 | 7 |  55 |  583
  62333 | 13 | 7 |  55 |  219
 104325 | 13 | 7 |  49 | 1814
  51746 | 13 | 7 |  48 | 1418
 123701 | 13 | 7 |  47 | 1165
  90676 | 13 | 7 |  45 |  763
 114366 | 13 | 7 |  43 | 1398
 106501 | 13 | 7 |  42 | 2326
  93917 | 13 | 7 |  39 | 2196
  21412 | 13 | 7 |  39 |  477
  49971 | 13 | 7 |  37 | 1783
 103284 | 13 | 7 |  35 | 1862
 130339 | 13 | 7 |  35 |  700
 122338 | 13 | 7 |  34 | 2196
  24187 | 13 | 7 |  31 | 2200
  19476 | 13 | 7 |  31 | 1256
  82943 | 13 | 7 |  29 | 1728
  83835 | 13 | 7 |  29 |  997
  38203 | 13 | 7 |  28 | 1280
   7326 | 13 | 7 |  27 |  301
  84119 | 13 | 7 |  26 | 1315
  62240 | 13 | 7 |  25 | 1085
  36149 | 13 | 7 |  23 | 1718
 111935 | 13 | 7 |  23 |  426
 133243 | 13 | 7 |  22 | 1908
  72804 | 13 | 7 |  22 |  628
  15542 | 13 | 7 |  21 | 2244
 136562 | 13 | 7 |  19 | 1964
 116214 | 13 | 7 |  10 | 2042
  32287 | 13 | 7 |   9 | 1067
  58588 | 13 | 7 |   8 |  994
  24724 | 13 | 7 |   7 |  768
  41045 | 13 | 7 |   3 | 1002
   2865 | 13 | 7 |   2 | 2314
  16712 | 13 | 7 |   1 |  542
 129542 | 13 | 7 |   1 |  526
  34482 | 12 | 8 | 100 | 1837
 149989 | 12 | 8 |  98 |  654
  49770 | 12 | 8 |  94 |  233
 131778 | 12 | 8 |  93 | 1658
  74531 | 12 | 8 |  93 | 1503
  50882 | 12 | 8 |  93 |  294
 146127 | 12 | 8 |  91 | 2042
 113366 | 12 | 8 |  90 | 2024
 114669 | 12 | 8 |  90 |  682
  20817 | 12 | 8 |  90 |  554
 135948 | 12 | 8 |  88 |  203
  37686 | 12 | 8 |  86 | 2110
  43230 | 12 | 8 |  85 |  629
  84564 | 12 | 8 |  81 | 1088
  98246 | 12 | 8 |  78 |  949
   1980 | 12 | 8 |  76 | 2005
 144535 | 12 | 8 |  76 | 1100
  50951 | 12 | 8 |  73 | 1454
  42714 | 12 | 8 |  70 |  897
  61744 | 12 | 8 |  68 | 1620
  15335 | 12 | 8 |  67 |  691
  58865 | 12 | 8 |  66 | 1141
  72660 | 12 | 8 |  66 |  920
  19196 | 12 | 8 |  65 | 2012
  73003 | 12 | 8 |  64 | 1538
  94548 | 12 | 8 |  63 | 2222
 141537 | 12 | 8 |  63 | 1793
 102833 | 12 | 8 |  62 | 1610
  23953 | 12 | 8 |  62 | 1077
 142318 | 12 | 8 |  62 |  585
  36707 | 12 | 8 |  57 | 1867
   5521 | 12 | 8 |  53 | 2229
  66885 | 12 | 8 |  53 |  759
  52342 | 12 | 8 |  48 | 1279
  13473 | 12 | 8 |  47 |  458
  95777 | 12 | 8 |  45 |   38
   5347 | 12 | 8 |  43 | 1988
  42496 | 12 | 8 |  43 | 1610
  42172 | 12 | 8 |  42 | 2019
  44599 | 12 | 8 |  41 | 2147
  90214 | 12 | 8 |  40 | 1905
 104886 | 12 | 8 |  40 | 1597
  16432 | 12 | 8 |  39 | 2321
 102739 | 12 | 8 |  39 |  190
  46967 | 12 | 8 |  38 | 1041
  15369 | 12 | 8 |  36 |  585
  96705 | 12 | 8 |  33 |   94
  35362 | 12 | 8 |  33 |   80
  58545 | 12 | 8 |  29 |  796
  25826 | 12 | 8 |  28 | 2158
 140432 | 12 | 8 |  28 |  867
  85265 | 12 | 8 |  27 |  792
  59787 | 12 | 8 |  26 | 1014
  39857 | 12 | 8 |  25 | 1694
  33133 | 12 | 8 |  24 | 1952
  15983 | 12 | 8 |  24 |  780
   3250 | 12 | 8 |  23 | 1934
 131095 | 12 | 8 |  19 | 1958
 102137 | 12 | 8 |  19 |  260
  17901 | 12 | 8 |  15 |  610
  31887 | 12 | 8 |  15 |  521
  53154 | 12 | 8 |  12 | 1550
   2390 | 12 | 8 |   9 |  550
  30391 | 12 | 8 |   8 | 2075
  75249 | 12 | 8 |   8 | 1128
 148094 | 12 | 8 |   8 |  239
  80844 | 12 | 8 |   4 |  801
 105909 | 12 | 7 | 100 | 2211
  39651 | 12 | 7 |  98 |  678
  27588 | 12 | 7 |  97 |  639
  44308 | 12 | 7 |  96 | 1590
  15515 | 12 | 7 |  93 | 2086
   1790 | 12 | 7 |  92 |  132
   7769 | 12 | 7 |  91 | 1775
  95920 | 12 | 7 |  91 |  166
  57998 | 12 | 7 |  90 |  732
  94372 | 12 | 7 |  89 | 1385
  50602 | 12 | 7 |  89 |  608
   2887 | 12 | 7 |  88 |  929
  90312 | 12 | 7 |  88 |  601
  61679 | 12 | 7 |  87 | 1733
  89222 | 12 | 7 |  86 |  687
  76899 | 12 | 7 |  84 | 2334
 119157 | 12 | 7 |  84 | 1913
 101241 | 12 | 7 |  81 | 2325
   8594 | 12 | 7 |  81 | 2111
  28115 | 12 | 7 |  80 |  714
   6236 | 12 | 7 |  72 | 2046
  89825 | 12 | 7 |  72 | 1510
  85994 | 12 | 7 |  72 |  963
  30257 | 12 | 7 |  68 | 1450
  84785 | 12 | 7 |  66 | 2335
  18028 | 12 | 7 |  66 |  602
 120201 | 12 | 7 |  65 | 1869
  45659 | 12 | 7 |  60 | 1077
  14107 | 12 | 7 |  59 | 2297
   6968 | 12 | 7 |  59 |  199
  65369 | 12 | 7 |  58 |  994
  74606 | 12 | 7 |  58 |  981
 106399 | 12 | 7 |  56 | 1060
 134630 | 12 | 7 |  55 | 2237
 106216 | 12 | 7 |  51 | 2313
 134596 | 12 | 7 |  51 | 1696
  45808 | 12 | 7 |  51 | 1295
  23035 | 12 | 7 |  51 |  306
  33459 | 12 | 7 |  49 | 1232
 143974 | 12 | 7 |  48 | 1779
 115682 | 12 | 7 |  47 | 1132
  34661 | 12 | 7 |  47 |  806
 140474 | 12 | 7 |  46 |  662
 138954 | 12 | 7 |  44 | 1223
 139003 | 12 | 7 |  40 | 1998
  62928 | 12 | 7 |  38 |  859
 126285 | 12 | 7 |  33 | 1499
  34915 | 12 | 7 |  33 |  781
 132751 | 12 | 7 |  32 |  621
  77010 | 12 | 7 |  32 |  225
 109582 | 12 | 7 |  31 |  305
  34555 | 12 | 7 |  30 | 1684
  23954 | 12 | 7 |  28 | 2023
  31429 | 12 | 7 |  28 | 1030
  52209 | 12 | 7 |  27 |  125
  41241 | 12 | 7 |  23 | 1906
 139062 | 12 | 7 |  21 | 2127
  33628 | 12 | 7 |  18 | 1363
  26062 | 12 | 7 |  18 | 1291
  77537 | 12 | 7 |  18 | 1115
  96313 | 12 | 7 |  18 | 1111
 131279 | 12 | 7 |  16 | 1632
  17480 | 12 | 7 |  16 |   59
  19061 | 12 | 7 |  15 |  650
 117414 | 12 | 7 |  14 | 2215
  84809 | 12 | 7 |  12 | 1312
 118601 | 12 | 7 |  10 | 1972
 130936 | 12 | 7 |   9 | 1808
 146931 | 12 | 7 |   9 | 1268
 100018 | 12 | 7 |   6 |  154
  29622 | 12 | 7 |   5 | 1567
  77979 | 12 | 7 |   4 | 1139
  56525 | 12 | 7 |   3 |  521
   5271 | 12 | 7 |   1 | 1481
  18834 | 11 | 8 |  99 | 1030
    256 | 11 | 8 |  99 |  955
 102122 | 11 | 8 |  98 |  837
 123578 | 11 | 8 |  98 |  722
 117760 | 11 | 8 |  97 |  972
  75165 | 11 | 8 |  96 |  675
  76941 | 11 | 8 |  95 | 1161
 102933 | 11 | 8 |  94 |  475
  73960 | 11 | 8 |  93 | 2285
  61960 | 11 | 8 |  93 | 1768
  55607 | 11 | 8 |  91 |  315
   4443 | 11 | 8 |  91 |   50
  74192 | 11 | 8 |  90 | 1803
  71022 | 11 | 8 |  90 |  239
 131264 | 11 | 8 |  89 |  301
  15437 | 11 | 8 |  88 | 2188
  44499 | 11 | 8 |  88 |  560
  12045 | 11 | 8 |  86 |  151
  18087 | 11 | 8 |  83 |  693
  55720 | 11 | 8 |  82 | 1623
  27453 | 11 | 8 |  81 | 1469
  21708 | 11 | 8 |  78 | 1927
  66355 | 11 | 8 |  76 | 2007
  71977 | 11 | 8 |  75 | 2109
 123020 | 11 | 8 |  72 | 1489
  87562 | 11 | 8 |  72 |  434
 144758 | 11 | 8 |  71 | 1051
  80664 | 11 | 8 |  68 | 2178
 104667 | 11 | 8 |  68 | 1639
 112036 | 11 | 8 |  67 | 2106
  16498 | 11 | 8 |  65 | 1798
  55841 | 11 | 8 |  65 | 1028
  34900 | 11 | 8 |  64 | 1409
  43720 | 11 | 8 |  64 | 1099
  68493 | 11 | 8 |  59 |   43
  12479 | 11 | 8 |  56 | 1093
  63218 | 11 | 8 |  56 |  880
 136993 | 11 | 8 |  54 |   74
  84340 | 11 | 8 |  53 | 1735
 137568 | 11 | 8 |  52 |  814
  52069 | 11 | 8 |  51 |  914
  87145 | 11 | 8 |  50 |  603
 146536 | 11 | 8 |  49 |  952
  11316 | 11 | 8 |  48 |  978
  22519 | 11 | 8 |  46 | 1704
 141919 | 11 | 8 |  46 | 1282
  94274 | 11 | 8 |  45 |  347
  47608 | 11 | 8 |  44 |  668
  27799 | 11 | 8 |  43 | 2101
 114687 | 11 | 8 |  43 | 1568
   6822 | 11 | 8 |  42 | 1912
  64324 | 11 | 8 |  40 |   94
 109294 | 11 | 8 |  39 | 1631
 135817 | 11 | 8 |  38 |  962
  36717 | 11 | 8 |  35 | 2046
 145501 | 11 | 8 |  31 | 1273
  42618 | 11 | 8 |  31 |  111
  13672 | 11 | 8 |  29 | 1777
  85605 | 11 | 8 |  27 | 2014
   6400 | 11 | 8 |  26 | 2104
 116606 | 11 | 8 |  24 | 1488
  44280 | 11 | 8 |  24 |  829
   7240 | 11 | 8 |  24 |  588
 102812 | 11 | 8 |  23 | 1114
 135095 | 11 | 8 |  22 | 1258
 106781 | 11 | 8 |  21 |  949
  91176 | 11 | 8 |  21 |  696
  13180 | 11 | 8 |  20 | 1924
  76836 | 11 | 8 |  19 | 2282
 108862 | 11 | 8 |  18 | 1913
  30251 | 11 | 8 |  18 | 1541
 138913 | 11 | 8 |  15 | 1980
  26035 | 11 | 8 |  15 |  975
 121140 | 11 | 8 |  13 | 2178
  41361 | 11 | 8 |  10 | 1461
  51783 | 11 | 8 |   9 | 1726
  89184 | 11 | 8 |   9 |  732
  63803 | 11 | 8 |   8 | 1928
 113994 | 11 | 8 |   8 |  668
 129738 | 11 | 8 |   8 |  298
 113059 | 11 | 8 |   7 | 2092
 117167 | 11 | 8 |   4 | 1131
  72926 | 11 | 8 |   1 | 2136
 103687 | 11 | 7 |  98 |  224
 148618 | 11 | 7 |  96 | 1624
  64470 | 11 | 7 |  96 |  835
  16379 | 11 | 7 |  95 | 2043
  73948 | 11 | 7 |  94 | 1254
 149096 | 11 | 7 |  93 |  430
  26646 | 11 | 7 |  90 | 1342
 127695 | 11 | 7 |  87 |  590
 105908 | 11 | 7 |  87 |  526
 121669 | 11 | 7 |  86 | 1862
  47271 | 11 | 7 |  86 | 1553
  88867 | 11 | 7 |  86 |  810
  15958 | 11 | 7 |  84 | 1692
   4768 | 11 | 7 |  82 |  959
   1448 | 11 | 7 |  82 |  326
  93719 | 11 | 7 |  82 |  135
  31822 | 11 | 7 |  81 |  865
  12836 | 11 | 7 |  78 | 2183
 133234 | 11 | 7 |  75 | 1810
    221 | 11 | 7 |  75 | 1227
  81555 | 11 | 7 |  74 |  320
  60697 | 11 | 7 |  73 | 1707
  10577 | 11 | 7 |  73 |   27
 123760 | 11 | 7 |  69 | 1563
 110097 | 11 | 7 |  67 |  861
  75073 | 11 | 7 |  66 | 2061
  19214 | 11 | 7 |  66 |  121
   1441 | 11 | 7 |  65 | 1745
  89393 | 11 | 7 |  63 | 1663
 125072 | 11 | 7 |  63 | 1155
 112627 | 11 | 7 |  62 | 1462
  82204 | 11 | 7 |  60 |  265
  52176 | 11 | 7 |  59 | 1450
  51026 | 11 | 7 |  59 |  948
  52682 | 11 | 7 |  54 | 2292
  12211 | 11 | 7 |  53 |  344
 114833 | 11 | 7 |  52 | 1312
  90491 | 11 | 7 |  51 | 2022
 130099 | 11 | 7 |  51 |  515
  63975 | 11 | 7 |  49 |  195
  43216 | 11 | 7 |  49 |   89
  91922 | 11 | 7 |  49 |   33
 124133 | 11 | 7 |  45 |  304
  85862 | 11 | 7 |  41 | 2059
  65730 | 11 | 7 |  35 | 1386
  62922 | 11 | 7 |  34 | 1677
 109807 | 11 | 7 |  33 |  596
  69813 | 11 | 7 |  33 |  164
  37301 | 11 | 7 |  30 |  569
 114483 | 11 | 7 |  28 | 1875
  26739 | 11 | 7 |  27 | 1242
  64958 | 11 | 7 |  24 | 2266
  97395 | 11 | 7 |  24 | 2076
 123181 | 11 | 7 |  24 |  674
   7415 | 11 | 7 |  24 |   71
 119036 | 11 | 7 |  22 | 1205
  15167 | 11 | 7 |  21 | 2317
  38371 | 11 | 7 |  19 | 2027
 141520 | 11 | 7 |  19 | 1356
  92171 | 11 | 7 |  17 | 1042
  14287 | 11 | 7 |  14 | 1206
   2120 | 11 | 7 |  11 |  837
  24714 | 11 | 7 |   8 |  626
    565 | 11 | 7 |   5 | 1440
  98314 | 11 | 7 |   4 |  750
  32316 | 11 | 7 |   3 | 1371
  84705 | 11 | 7 |   3 |  747
  23373 | 11 | 7 |   3 |   69
  86882 | 11 | 7 |   2 | 2238
  94201 | 11 | 7 |   1 |  832
 129424 | 11 | 7 |   1 |  414
  23715 | 10 | 8 | 100 | 1897
  65169 | 10 | 8 | 100 |  328
  95703 | 10 | 8 | 100 |  134
 117096 | 10 | 8 |  95 |  155
  96786 | 10 | 8 |  94 | 2325
 130303 | 10 | 8 |  94 | 1927
 131302 | 10 | 8 |  94 |  363
  54903 | 10 | 8 |  93 |   12
  35083 | 10 | 8 |  92 | 2056
  54480 | 10 | 8 |  92 | 1368
  23495 | 10 | 8 |  83 |  277
 103206 | 10 | 8 |  81 | 1750
 115472 | 10 | 8 |  80 | 1084
 118428 | 10 | 8 |  80 |   25
  66657 | 10 | 8 |  78 | 2181
 112388 | 10 | 8 |  78 |  170
   6653 | 10 | 8 |  77 |  115
  13211 | 10 | 8 |  76 | 2007
 124295 | 10 | 8 |  75 |  595
   2312 | 10 | 8 |  75 |  304
  88570 | 10 | 8 |  74 | 1947
  23084 | 10 | 8 |  74 | 1243
  61873 | 10 | 8 |  73 | 2076
  88265 | 10 | 8 |  72 | 2019
  27941 | 10 | 8 |  72 | 1700
 121338 | 10 | 8 |  72 | 1321
  84019 | 10 | 8 |  70 | 1701
 148663 | 10 | 8 |  69 |  544
 124724 | 10 | 8 |  67 | 2164
  26875 | 10 | 8 |  67 |  956
  62336 | 10 | 8 |  67 |  885
 123577 | 10 | 8 |  66 | 2170
 115866 | 10 | 8 |  66 |   86
 100364 | 10 | 8 |  61 | 1845
  26524 | 10 | 8 |  60 | 1430
 145961 | 10 | 8 |  59 | 2108
  60038 | 10 | 8 |  59 | 2020
   4460 | 10 | 8 |  59 | 1762
  98699 | 10 | 8 |  59 | 1066
  99146 | 10 | 8 |  56 | 1969
   6097 | 10 | 8 |  56 |  404
  32077 | 10 | 8 |  55 | 1382
  85127 | 10 | 8 |  51 |  123
  28770 | 10 | 8 |  49 | 2019
  74642 | 10 | 8 |  48 | 1485
   8712 | 10 | 8 |  48 | 1107
  62168 | 10 | 8 |  46 | 1943
 140016 | 10 | 8 |  46 | 1233
  11833 | 10 | 8 |  46 |  985
  44066 | 10 | 8 |  42 |    2
  25502 | 10 | 8 |  39 | 1511
 110748 | 10 | 8 |  39 |  317
 117195 | 10 | 8 |  36 | 1429
  16064 | 10 | 8 |  35 | 1827
 105695 | 10 | 8 |  34 | 1106
  38931 | 10 | 8 |  34 |  134
   8630 | 10 | 8 |  32 |  681
  26446 | 10 | 8 |  30 |  869
 136441 | 10 | 8 |  30 |  334
  22154 | 10 | 8 |  28 |  349
  57114 | 10 | 8 |  27 |  475
  98290 | 10 | 8 |  23 | 1106
 119018 | 10 | 8 |  23 |  511
  95313 | 10 | 8 |  22 | 1422
 124084 | 10 | 8 |  18 | 1322
 117060 | 10 | 8 |  18 |  388
  35413 | 10 | 8 |  18 |  312
 118595 | 10 | 8 |  17 | 1494
  75603 | 10 | 8 |  16 | 1100
  33913 | 10 | 8 |  12 | 1128
  82318 | 10 | 8 |  11 | 1585
 120922 | 10 | 8 |  11 | 1475
  61117 | 10 | 8 |  10 | 2343
  29115 | 10 | 8 |  10 | 1497
 148226 | 10 | 8 |  10 | 1202
 135156 | 10 | 8 |   7 |   10
  26182 | 10 | 8 |   5 | 1100
  49830 | 10 | 8 |   5 | 1088
  98157 | 10 | 8 |   5 |  997
  71331 | 10 | 8 |   4 |  477
 130390 | 10 | 8 |   4 |  445
  44057 | 10 | 8 |   2 |  962
  76570 | 10 | 7 |  97 | 1743
  84956 | 10 | 7 |  96 |  432
 146872 | 10 | 7 |  94 | 1785
  95225 | 10 | 7 |  93 | 2036
  36014 | 10 | 7 |  90 | 2257
  21936 | 10 | 7 |  90 | 1775
  33688 | 10 | 7 |  87 | 2198
  52142 | 10 | 7 |  86 |  152
  18210 | 10 | 7 |  78 |  197
  50035 | 10 | 7 |  77 |   95
 149046 | 10 | 7 |  75 | 2233
  30118 | 10 | 7 |  75 | 1587
  62395 | 10 | 7 |  75 |  507
  70903 | 10 | 7 |  74 | 1794
 138904 | 10 | 7 |  71 | 1331
 110088 | 10 | 7 |  71 |  635
   4580 | 10 | 7 |  67 | 1788
  45459 | 10 | 7 |  65 | 2130
  66555 | 10 | 7 |  65 | 1058
  24617 | 10 | 7 |  63 | 1199
  99403 | 10 | 7 |  62 |  644
 141676 | 10 | 7 |  62 |   35
  83689 | 10 | 7 |  61 | 2291
  52445 | 10 | 7 |  59 | 1740
  11314 | 10 | 7 |  57 | 2135
 143940 | 10 | 7 |  56 |  567
 115388 | 10 | 7 |  56 |  262
 117381 | 10 | 7 |  51 | 2313
  34916 | 10 | 7 |  51 |  289
  94951 | 10 | 7 |  50 | 1081
  22535 | 10 | 7 |  46 | 1462
  38762 | 10 | 7 |  46 |  937
  69848 | 10 | 7 |  43 |  977
  11998 | 10 | 7 |  41 | 1800
   4552 | 10 | 7 |  41 | 1662
 118520 | 10 | 7 |  40 |  159
 108742 | 10 | 7 |  38 |  444
 144005 | 10 | 7 |  38 |   64
  82273 | 10 | 7 |  37 |  218
 138616 | 10 | 7 |  35 | 1549
  59295 | 10 | 7 |  33 | 1075
   3773 | 10 | 7 |  31 | 1561
  66614 | 10 | 7 |  30 | 1079
  57769 | 10 | 7 |  26 | 1445
  78350 | 10 | 7 |  25 | 1402
  73798 | 10 | 7 |  23 | 1447
   2380 | 10 | 7 |  20 | 1878
  59167 | 10 | 7 |  20 | 1689
 132287 | 10 | 7 |  20 |  439
  87961 | 10 | 7 |  18 |  598
 100905 | 10 | 7 |  16 | 1584
 113386 | 10 | 7 |  15 |  463
  87314 | 10 | 7 |  14 |  817
  71127 | 10 | 7 |  10 | 1501
  54539 | 10 | 7 |   8 |  770
  60809 | 10 | 7 |   3 |   32
  49960 | 10 | 7 |   2 |  470
  24773 |  9 | 8 |  99 | 1023
 110839 |  9 | 8 |  97 |  507
  22677 |  9 | 8 |  94 |  927
  48196 |  9 | 8 |  93 | 2347
 140440 |  9 | 8 |  93 | 2188
   7396 |  9 | 8 |  92 | 1463
 143814 |  9 | 8 |  89 | 1732
   7597 |  9 | 8 |  89 |    4
 100385 |  9 | 8 |  86 |   37
  37225 |  9 | 8 |  83 | 1737
 111441 |  9 | 8 |  83 | 1360
  82119 |  9 | 8 |  79 |  853
 130357 |  9 | 8 |  78 |  350
   7954 |  9 | 8 |  75 | 2198
 128115 |  9 | 8 |  75 |  516
  56453 |  9 | 8 |  74 | 1041
   3668 |  9 | 8 |  72 |   42
  35826 |  9 | 8 |  69 |  938
 140659 |  9 | 8 |  66 |  323
   4173 |  9 | 8 |  63 | 1531
  98066 |  9 | 8 |  61 |  707
  84492 |  9 | 8 |  61 |   85
 132102 |  9 | 8 |  60 | 1448
  74608 |  9 | 8 |  60 | 1115
  68974 |  9 | 8 |  56 |  236
 101014 |  9 | 8 |  55 |  578
 102432 |  9 | 8 |  50 | 1111
  66647 |  9 | 8 |  48 | 1742
   1766 |  9 | 8 |  45 | 1630
 136275 |  9 | 8 |  45 | 1495
  30256 |  9 | 8 |  45 |  684
  87739 |  9 | 8 |  44 | 1446
  15700 |  9 | 8 |  43 | 1780
   3672 |  9 | 8 |  42 |  891
 114549 |  9 | 8 |  42 |  725
  15546 |  9 | 8 |  40 | 1661
  36474 |  9 | 8 |  40 |  823
  79375 |  9 | 8 |  38 |  885
  76635 |  9 | 8 |  34 | 1764
  17906 |  9 | 8 |  34 | 1650
  59613 |  9 | 8 |  33 |  776
 142632 |  9 | 8 |  31 | 1105
  57077 |  9 | 8 |  30 | 1653
  73144 |  9 | 8 |  28 | 1282
   2634 |  9 | 8 |  27 | 1688
  94857 |  9 | 8 |  25 |  115
  36836 |  9 | 8 |  24 |  528
  97154 |  9 | 8 |  22 | 1565
 149917 |  9 | 8 |  21 | 1084
  27458 |  9 | 8 |  20 | 1625
 111636 |  9 | 8 |  20 | 1490
  23205 |  9 | 8 |  19 |  773
  37010 |  9 | 8 |  19 |   76
 123007 |  9 | 8 |  17 |  632
 115378 |  9 | 8 |  17 |  447
  62415 |  9 | 8 |  17 |   48
  34337 |  9 | 8 |  15 | 1146
 111818 |  9 | 8 |  11 | 1228
   6641 |  9 | 8 |   9 | 1232
  25767 |  9 | 8 |   6 | 2151
   9171 |  9 | 8 |   6 |  336
  99143 |  9 | 8 |   4 | 1131
 121871 |  9 | 7 | 100 | 1927
   8222 |  9 | 7 | 100 | 1797
 126757 |  9 | 7 |  99 |  521
  83707 |  9 | 7 |  98 | 2300
  73794 |  9 | 7 |  98 | 1700
  12132 |  9 | 7 |  98 | 1642
 100490 |  9 | 7 |  97 | 1797
  16804 |  9 | 7 |  97 | 1338
  52327 |  9 | 7 |  95 | 1270
  92524 |  9 | 7 |  93 |  951
 126021 |  9 | 7 |  88 | 1867
 136603 |  9 | 7 |  88 |  873
 123741 |  9 | 7 |  87 | 2183
 146592 |  9 | 7 |  87 |  821
 111191 |  9 | 7 |  86 |  999
   1641 |  9 | 7 |  84 | 2195
 104665 |  9 | 7 |  83 |  126
 147371 |  9 | 7 |  81 | 1397
  30160 |  9 | 7 |  80 |  719
  17187 |  9 | 7 |  79 | 1643
 143621 |  9 | 7 |  79 |  883
 103221 |  9 | 7 |  77 |   75
  29293 |  9 | 7 |  76 |  689
 119650 |  9 | 7 |  75 |  851
 101915 |  9 | 7 |  74 | 1292
  23259 |  9 | 7 |  70 | 1064
 127679 |  9 | 7 |  58 |  700
  16946 |  9 | 7 |  57 | 1840
  25698 |  9 | 7 |  57 | 1103
 137987 |  9 | 7 |  56 | 1425
 127068 |  9 | 7 |  56 |  151
  52374 |  9 | 7 |  52 | 2167
  70612 |  9 | 7 |  52 |  810
 143015 |  9 | 7 |  52 |  440
  46183 |  9 | 7 |  50 |  704
  60763 |  9 | 7 |  49 | 2171
  28985 |  9 | 7 |  45 |  913
 147623 |  9 | 7 |  45 |  279
 120516 |  9 | 7 |  44 | 1705
  30272 |  9 | 7 |  43 | 1942
  63901 |  9 | 7 |  40 | 1696
 116850 |  9 | 7 |  39 |  534
  84068 |  9 | 7 |  38 | 2132
 144176 |  9 | 7 |  38 |  790
  62604 |  9 | 7 |  37 | 2051
  41604 |  9 | 7 |  37 | 2033
 115652 |  9 | 7 |  36 | 1801
 114080 |  9 | 7 |  36 | 1677
  70704 |  9 | 7 |  36 | 1141
 130962 |  9 | 7 |  35 | 2263
   7507 |  9 | 7 |  35 | 1893
  22485 |  9 | 7 |  35 | 1018
  95506 |  9 | 7 |  30 | 1580
 136182 |  9 | 7 |  29 | 1666
  74169 |  9 | 7 |  28 |  783
 128327 |  9 | 7 |  28 |  459
 115618 |  9 | 7 |  26 | 2235
  50801 |  9 | 7 |  26 | 1762
  61655 |  9 | 7 |  23 |  261
  91004 |  9 | 7 |  21 |  707
  19151 |  9 | 7 |  20 | 1783
  74349 |  9 | 7 |  20 | 1077
  78891 |  9 | 7 |  19 | 2232
  82313 |  9 | 7 |  19 |  577
 127207 |  9 | 7 |  19 |  327
  77115 |  9 | 7 |  18 | 2104
  36300 |  9 | 7 |  18 | 1830
  34847 |  9 | 7 |  18 | 1389
  66015 |  9 | 7 |  18 |  608
    710 |  9 | 7 |  17 | 2121
  10523 |  9 | 7 |  16 | 1175
  52800 |  9 | 7 |  16 |  428
 120136 |  9 | 7 |  13 | 1588
  19354 |  9 | 7 |  11 |  743
  45627 |  9 | 7 |  10 |  532
  83315 |  9 | 7 |   9 | 1973
 115055 |  9 | 7 |   8 | 2257
 126900 |  9 | 7 |   6 |  503
  84412 |  9 | 7 |   4 | 1780
   4550 |  9 | 7 |   4 |  140
   4647 |  9 | 7 |   2 | 2331
  71420 |  9 | 7 |   2 | 1215
 131695 |  8 | 8 | 100 |  594
 147421 |  8 | 8 |  99 |  511
 122764 |  8 | 8 |  97 | 1856
 132133 |  8 | 8 |  94 | 2238
   6554 |  8 | 8 |  94 | 1077
  13143 |  8 | 8 |  93 | 2231
 129618 |  8 | 8 |  90 | 1726
  99242 |  8 | 8 |  90 | 1073
   4157 |  8 | 8 |  90 |  203
  96647 |  8 | 8 |  84 |  833
 101953 |  8 | 8 |  81 | 2285
  17693 |  8 | 8 |  81 | 2013
  51258 |  8 | 8 |  81 | 1115
  35917 |  8 | 8 |  79 | 1151
  27867 |  8 | 8 |  79 | 1115
  90379 |  8 | 8 |  73 |  342
 124187 |  8 | 8 |  72 | 1638
  45348 |  8 | 8 |  71 | 1289
 126310 |  8 | 8 |  70 | 1800
  11628 |  8 | 8 |  70 | 1263
  96606 |  8 | 8 |  69 | 1763
 104960 |  8 | 8 |  68 |  680
  14092 |  8 | 8 |  64 | 1935
  50920 |  8 | 8 |  62 |  861
  42615 |  8 | 8 |  62 |  837
  31271 |  8 | 8 |  56 |  680
   8266 |  8 | 8 |  55 | 1046
  31190 |  8 | 8 |  51 | 2335
  43528 |  8 | 8 |  51 | 1969
 130658 |  8 | 8 |  51 |  749
  15728 |  8 | 8 |  49 |  709
 149095 |  8 | 8 |  46 | 2300
  71627 |  8 | 8 |  46 | 1037
  96413 |  8 | 8 |  44 | 1588
  70465 |  8 | 8 |  43 | 1351
  84237 |  8 | 8 |  42 |  964
  38463 |  8 | 8 |  41 | 2325
  82275 |  8 | 8 |  40 |  477
 145610 |  8 | 8 |  38 |  164
  98325 |  8 | 8 |  37 | 1786
   7476 |  8 | 8 |  37 |  712
   2996 |  8 | 8 |  32 | 1285
  74011 |  8 | 8 |  32 |  580
  69039 |  8 | 8 |  31 | 2106
  17098 |  8 | 8 |  28 | 2253
  17943 |  8 | 8 |  28 | 1560
  72550 |  8 | 8 |  28 | 1111
 117686 |  8 | 8 |  23 | 2210
  44019 |  8 | 8 |  23 | 1751
 117320 |  8 | 8 |  21 | 1413
  60655 |  8 | 8 |  21 | 1376
  70300 |  8 | 8 |  20 |  663
  33538 |  8 | 8 |  19 | 1347
  14260 |  8 | 8 |  17 | 2118
  15828 |  8 | 8 |  11 | 2217
 138447 |  8 | 8 |  10 |  193
  65471 |  8 | 8 |   9 | 1024
  22299 |  8 | 8 |   5 | 1961
  33879 |  8 | 8 |   5 | 1676
  42919 |  8 | 8 |   4 | 2225
 128938 |  8 | 8 |   4 | 1008
  27655 |  8 | 8 |   1 | 2062
 140961 |  8 | 7 |  99 | 2122
  39907 |  8 | 7 |  98 |  285
 136709 |  8 | 7 |  97 | 1024
 126638 |  8 | 7 |  95 | 1928
 107998 |  8 | 7 |  94 | 2172
 137273 |  8 | 7 |  93 |  262
   3506 |  8 | 7 |  91 | 2327
 115541 |  8 | 7 |  91 | 1171
  55729 |  8 | 7 |  89 |  514
 104309 |  8 | 7 |  86 | 2008
 107755 |  8 | 7 |  85 | 2243
  79142 |  8 | 7 |  85 | 1457
  18775 |  8 | 7 |  83 | 2190
 104591 |  8 | 7 |  81 | 1406
  24531 |  8 | 7 |  80 |  152
  41168 |  8 | 7 |  79 |  433
  76646 |  8 | 7 |  78 | 1262
 113898 |  8 | 7 |  77 |  542
  23416 |  8 | 7 |  75 |  853
 146557 |  8 | 7 |  73 |  375
 100674 |  8 | 7 |  73 |  185
  20978 |  8 | 7 |  73 |  177
  66892 |  8 | 7 |  72 |  466
  64507 |  8 | 7 |  71 | 1459
 124043 |  8 | 7 |  70 |  879
 100962 |  8 | 7 |  65 | 1826
  92225 |  8 | 7 |  65 | 1189
  48212 |  8 | 7 |  65 |  982
  45048 |  8 | 7 |  64 | 1970
  51539 |  8 | 7 |  64 |   92
 123921 |  8 | 7 |  63 |  571
 115076 |  8 | 7 |  62 | 1622
 136757 |  8 | 7 |  60 |  424
 120198 |  8 | 7 |  58 | 2146
  22749 |  8 | 7 |  58 | 2096
  70257 |  8 | 7 |  58 |  264
  72606 |  8 | 7 |  57 | 1598
 125119 |  8 | 7 |  56 | 2062
  69470 |  8 | 7 |  56 | 1987
  88695 |  8 | 7 |  53 | 1504
  42847 |  8 | 7 |  51 |  201
 113492 |  8 | 7 |  48 | 2115
  34710 |  8 | 7 |  45 |  870
 105524 |  8 | 7 |  45 |  146
  17202 |  8 | 7 |  43 | 1844
 134845 |  8 | 7 |  43 |  397
  51177 |  8 | 7 |  38 | 1628
  52802 |  8 | 7 |  37 | 1771
  65797 |  8 | 7 |  36 |  947
  32772 |  8 | 7 |  36 |  396
 134564 |  8 | 7 |  35 |  252
 140805 |  8 | 7 |  34 | 1176
  70282 |  8 | 7 |  34 |  879
  67470 |  8 | 7 |  33 |  292
  78644 |  8 | 7 |  31 | 2306
  30045 |  8 | 7 |  30 | 1390
  60398 |  8 | 7 |  29 | 1496
  11746 |  8 | 7 |  27 |   89
   7132 |  8 | 7 |  26 |   76
  55693 |  8 | 7 |  25 | 1267
  72656 |  8 | 7 |  23 | 1762
  44038 |  8 | 7 |  23 |  206
  24759 |  8 | 7 |  20 |  493
  28710 |  8 | 7 |  19 |  982
  37881 |  8 | 7 |  19 |  118
 110248 |  8 | 7 |  17 | 1697
  29260 |  8 | 7 |  17 |  770
  19936 |  8 | 7 |  17 |  626
  81247 |  8 | 7 |  10 | 1238
  46360 |  8 | 7 |  10 |  133
  78585 |  8 | 7 |   9 |   60
   6583 |  8 | 7 |   7 | 2020
  50278 |  8 | 7 |   7 | 1770
 117565 |  8 | 7 |   7 |   30
  26221 |  8 | 7 |   6 |  554
  64761 |  8 | 7 |   5 | 2099
  53373 |  8 | 7 |   5 |  803
  65775 |  8 | 7 |   2 |  699
 127621 |  8 | 7 |   1 | 1329
  14236 |  7 | 8 | 100 |  434
  47913 |  7 | 8 |  99 | 1828
 149148 |  7 | 8 |  99 |  422
  69835 |  7 | 8 |  99 |  271
 126816 |  7 | 8 |  95 | 1060
  29834 |  7 | 8 |  93 | 1294
  58968 |  7 | 8 |  93 | 1108
   3428 |  7 | 8 |  92 | 2316
  58057 |  7 | 8 |  92 | 1771
  19680 |  7 | 8 |  92 |  773
  75997 |  7 | 8 |  90 | 1366
  57880 |  7 | 8 |  90 |  902
 100535 |  7 | 8 |  89 | 2153
  68212 |  7 | 8 |  89 | 1591
  20882 |  7 | 8 |  87 |  663
  52732 |  7 | 8 |  87 |  262
  71062 |  7 | 8 |  85 | 1585
 122870 |  7 | 8 |  83 | 1378
  52398 |  7 | 8 |  83 |  239
 108144 |  7 | 8 |  81 |  221
  58572 |  7 | 8 |  80 | 2339
  55443 |  7 | 8 |  80 |   69
  38573 |  7 | 8 |  78 |  935
  86872 |  7 | 8 |  78 |  265
 129677 |  7 | 8 |  75 |  727
  16367 |  7 | 8 |  74 | 1485
  10689 |  7 | 8 |  74 |  131
   3326 |  7 | 8 |  74 |   70
  24142 |  7 | 8 |  73 |  412
 130196 |  7 | 8 |  72 |  470
 139799 |  7 | 8 |  70 | 1234
  60300 |  7 | 8 |  68 | 1015
  65058 |  7 | 8 |  67 | 1040
  44055 |  7 | 8 |  66 | 2161
 131152 |  7 | 8 |  65 |  639
 113566 |  7 | 8 |  64 |  854
  71136 |  7 | 8 |  63 | 1073
  56177 |  7 | 8 |  63 |  312
 125428 |  7 | 8 |  63 |  124
 111316 |  7 | 8 |  61 | 1623
  24547 |  7 | 8 |  61 |  687
  51535 |  7 | 8 |  60 | 1200
   6297 |  7 | 8 |  59 | 2153
 121562 |  7 | 8 |  59 | 1894
  19585 |  7 | 8 |  59 | 1128
  55737 |  7 | 8 |  59 |  639
 127771 |  7 | 8 |  59 |   25
   1254 |  7 | 8 |  58 | 1907
  14909 |  7 | 8 |  58 | 1450
  39195 |  7 | 8 |  55 | 1769
  58466 |  7 | 8 |  55 |  905
  77565 |  7 | 8 |  54 | 1715
 101967 |  7 | 8 |  52 | 2090
  54362 |  7 | 8 |  48 | 2082
 106843 |  7 | 8 |  47 | 2288
   9677 |  7 | 8 |  47 |  304
  69101 |  7 | 8 |  46 |  302
  12754 |  7 | 8 |  45 | 1664
  15159 |  7 | 8 |  45 |  884
  14859 |  7 | 8 |  45 |  856
 106287 |  7 | 8 |  44 |   57
  73820 |  7 | 8 |  43 | 1900
  42548 |  7 | 8 |  42 | 2326
  38855 |  7 | 8 |  42 |  977
  54439 |  7 | 8 |  41 |  400
 104248 |  7 | 8 |  40 |  392
 138425 |  7 | 8 |  40 |  365
  75531 |  7 | 8 |  37 | 1289
  46181 |  7 | 8 |  37 | 1229
 138339 |  7 | 8 |  36 | 1058
 144937 |  7 | 8 |  36 | 1031
  98767 |  7 | 8 |  35 |  383
  93838 |  7 | 8 |  34 | 1721
  15114 |  7 | 8 |  33 | 2130
  14248 |  7 | 8 |  31 |  735
   9834 |  7 | 8 |  29 | 1414
 111563 |  7 | 8 |  28 | 1994
 111227 |  7 | 8 |  28 | 1625
   3337 |  7 | 8 |  23 | 2048
   5927 |  7 | 8 |  23 | 1395
  47112 |  7 | 8 |  20 |   31
 109133 |  7 | 8 |  18 |  650
  89642 |  7 | 8 |  18 |  107
 107336 |  7 | 8 |  15 | 1650
 130974 |  7 | 8 |  15 | 1157
  57839 |  7 | 8 |  14 |  187
  73503 |  7 | 8 |  13 | 1895
  31274 |  7 | 8 |  13 |    9
   8499 |  7 | 8 |  12 | 1812
 123450 |  7 | 8 |   9 | 1121
  41847 |  7 | 8 |   6 |  184
  81211 |  7 | 8 |   5 | 1205
  16730 |  7 | 8 |   5 |  410
  25769 |  7 | 8 |   4 | 1768
  85512 |  7 | 8 |   4 |  425
 110696 |  7 | 8 |   3 | 1605
  29495 |  7 | 7 | 100 | 1105
  46253 |  7 | 7 |  99 | 2048
  64812 |  7 | 7 |  97 | 2323
  47333 |  7 | 7 |  96 | 1137
 149336 |  7 | 7 |  96 |  308
  76467 |  7 | 7 |  95 | 1754
 107280 |  7 | 7 |  95 | 1041
 147108 |  7 | 7 |  94 | 2016
 126989 |  7 | 7 |  88 | 2327
 145587 |  7 | 7 |  88 | 1014
 100860 |  7 | 7 |  86 | 1513
  99393 |  7 | 7 |  85 | 1928
 134103 |  7 | 7 |  85 | 1471
  66085 |  7 | 7 |  83 | 1023
 137884 |  7 | 7 |  82 |  135
  23790 |  7 | 7 |  80 | 2272
  51968 |  7 | 7 |  78 | 1600
  10108 |  7 | 7 |  78 |  718
 120234 |  7 | 7 |  78 |  545
  20556 |  7 | 7 |  76 | 1639
  79078 |  7 | 7 |  76 |  774
  58579 |  7 | 7 |  74 |  250
  74959 |  7 | 7 |  73 | 1527
  67485 |  7 | 7 |  72 | 1951
  17280 |  7 | 7 |  72 |   33
  34283 |  7 | 7 |  70 |  622
 139216 |  7 | 7 |  68 | 2277
 137292 |  7 | 7 |  68 | 2268
  30052 |  7 | 7 |  66 | 1545
  58943 |  7 | 7 |  66 |  401
  91729 |  7 | 7 |  66 |   33
 100828 |  7 | 7 |  66 |   18
  31496 |  7 | 7 |  64 |  872
  39855 |  7 | 7 |  64 |  621
  36686 |  7 | 7 |  63 | 1852
 121699 |  7 | 7 |  62 | 1496
  65618 |  7 | 7 |  59 |  433
  95830 |  7 | 7 |  57 |  523
   2483 |  7 | 7 |  54 | 2204
  59289 |  7 | 7 |  54 |  654
  16880 |  7 | 7 |  54 |  389
  90182 |  7 | 7 |  54 |  302
 137230 |  7 | 7 |  52 |  645
  85078 |  7 | 7 |  50 | 1963
  28608 |  7 | 7 |  49 | 2183
   2015 |  7 | 7 |  49 |  964
  90665 |  7 | 7 |  47 | 2145
 120154 |  7 | 7 |  46 |  296
  11828 |  7 | 7 |  44 | 2082
 116720 |  7 | 7 |  43 | 1088
  80551 |  7 | 7 |  42 | 2108
  36247 |  7 | 7 |  42 | 1752
  11374 |  7 | 7 |  42 |  755
  21788 |  7 | 7 |  40 | 1769
  36088 |  7 | 7 |  39 |  664
  48475 |  7 | 7 |  39 |  599
 100263 |  7 | 7 |  36 |  919
  78377 |  7 | 7 |  35 |  267
 148992 |  7 | 7 |  32 |  352
  11004 |  7 | 7 |  30 | 1185
 134827 |  7 | 7 |  29 | 1940
  59270 |  7 | 7 |  29 | 1702
  12410 |  7 | 7 |  28 | 2018
 130002 |  7 | 7 |  27 |  361
 142685 |  7 | 7 |  26 | 2038
   4728 |  7 | 7 |  26 |  780
  26319 |  7 | 7 |  25 | 2181
 124303 |  7 | 7 |  24 | 1555
 103426 |  7 | 7 |  24 | 1239
  83509 |  7 | 7 |  23 | 2207
 148328 |  7 | 7 |  22 | 1270
 101672 |  7 | 7 |  20 | 1126
   7923 |  7 | 7 |  18 | 1593
 136340 |  7 | 7 |  18 |  755
  72459 |  7 | 7 |  18 |   29
 113127 |  7 | 7 |  14 |  684
 138153 |  7 | 7 |  13 | 1614
  78853 |  7 | 7 |  13 |  216
  65692 |  7 | 7 |  11 | 1491
 141439 |  7 | 7 |  10 | 1586
  79429 |  7 | 7 |  10 |  933
  55881 |  7 | 7 |   8 | 2129
  94108 |  7 | 7 |   6 |  831
  80740 |  7 | 7 |   3 |  829
  91930 |  6 | 8 | 100 |  338
  45844 |  6 | 8 |  99 |   84
  14646 |  6 | 8 |  98 | 2016
  72234 |  6 | 8 |  98 | 1043
 112844 |  6 | 8 |  97 | 1650
  16999 |  6 | 8 |  95 | 1734
  81940 |  6 | 8 |  94 |  289
 122671 |  6 | 8 |  91 |  465
 147769 |  6 | 8 |  90 | 1026
 137689 |  6 | 8 |  88 | 1333
 132100 |  6 | 8 |  86 | 1599
 108032 |  6 | 8 |  85 | 1962
  40024 |  6 | 8 |  84 | 1964
   3116 |  6 | 8 |  83 |  218
  36853 |  6 | 8 |  83 |  157
  90412 |  6 | 8 |  80 |  397
  96811 |  6 | 8 |  79 |  970
  51829 |  6 | 8 |  79 |  611
  98664 |  6 | 8 |  79 |  350
  35179 |  6 | 8 |  79 |  160
  65411 |  6 | 8 |  78 | 1621
  48722 |  6 | 8 |  76 |  468
  37204 |  6 | 8 |  75 |  918
  24741 |  6 | 8 |  75 |  811
  20061 |  6 | 8 |  73 | 1413
 106192 |  6 | 8 |  73 |  401
 113368 |  6 | 8 |  71 |  234
  82792 |  6 | 8 |  70 | 1802
 110034 |  6 | 8 |  70 |  587
 147571 |  6 | 8 |  70 |  575
  98081 |  6 | 8 |  66 | 1559
  44250 |  6 | 8 |  66 |  969
  16288 |  6 | 8 |  66 |  548
   7242 |  6 | 8 |  66 |  425
 114639 |  6 | 8 |  66 |  282
 122042 |  6 | 8 |  64 | 1528
  61593 |  6 | 8 |  63 | 1634
   7020 |  6 | 8 |  61 |  720
  88184 |  6 | 8 |  60 |  278
  88619 |  6 | 8 |  57 | 1701
  92635 |  6 | 8 |  53 | 1616
  58094 |  6 | 8 |  52 |  531
  78884 |  6 | 8 |  52 |  292
  10229 |  6 | 8 |  51 | 1919
  47793 |  6 | 8 |  51 | 1025
 139113 |  6 | 8 |  47 | 2237
 140141 |  6 | 8 |  47 | 1144
 134159 |  6 | 8 |  47 | 1079
 102994 |  6 | 8 |  44 |  752
 118014 |  6 | 8 |  42 |  398
 138998 |  6 | 8 |  40 |  866
  82015 |  6 | 8 |  40 |  761
 125287 |  6 | 8 |  40 |  271
  99520 |  6 | 8 |  39 | 1791
  64550 |  6 | 8 |  39 |  987
  89493 |  6 | 8 |  33 | 1552
  67245 |  6 | 8 |  29 | 1555
  32247 |  6 | 8 |  29 |  290
    708 |  6 | 8 |  27 | 2246
   7845 |  6 | 8 |  27 | 1811
  12966 |  6 | 8 |  27 |  793
  28916 |  6 | 8 |  26 | 1303
  52713 |  6 | 8 |  25 |  458
  25358 |  6 | 8 |  24 |  348
  80343 |  6 | 8 |  14 | 1387
 141015 |  6 | 8 |  10 | 1552
  48419 |  6 | 8 |   9 | 1612
  25601 |  6 | 8 |   8 |  183
 121678 |  6 | 8 |   6 | 2187
  12104 |  6 | 8 |   6 | 1911
  78898 |  6 | 8 |   5 |  965
  78419 |  6 | 8 |   4 | 1747
 129602 |  6 | 8 |   3 | 1040
 144842 |  6 | 8 |   2 | 1812
 112788 |  6 | 8 |   1 |  100
 128133 |  6 | 8 |   1 |   13
  82885 |  6 | 7 |  98 | 1572
   2679 |  6 | 7 |  97 | 1105
  80344 |  6 | 7 |  94 | 2018
  61915 |  6 | 7 |  94 |  245
  80793 |  6 | 7 |  90 | 1710
  72859 |  6 | 7 |  90 | 1177
  88026 |  6 | 7 |  89 | 1181
  90101 |  6 | 7 |  89 |  385
  96025 |  6 | 7 |  89 |  330
 136882 |  6 | 7 |  88 |  731
 145416 |  6 | 7 |  86 | 1419
   1792 |  6 | 7 |  85 | 1170
  80524 |  6 | 7 |  85 |  507
 141724 |  6 | 7 |  83 | 1882
  33455 |  6 | 7 |  82 | 1704
 107307 |  6 | 7 |  81 |  548
  42596 |  6 | 7 |  76 |   86
  52227 |  6 | 7 |  75 | 2110
 102127 |  6 | 7 |  73 |  728
  14403 |  6 | 7 |  71 | 1917
  90053 |  6 | 7 |  69 | 1211
 146374 |  6 | 7 |  68 | 2338
  45478 |  6 | 7 |  68 |  371
  62788 |  6 | 7 |  65 | 1506
  66177 |  6 | 7 |  65 | 1375
 145893 |  6 | 7 |  65 |  688
  43697 |  6 | 7 |  62 | 1782
 100872 |  6 | 7 |  61 |  428
  83324 |  6 | 7 |  60 |  614
 126478 |  6 | 7 |  55 | 2014
  80497 |  6 | 7 |  55 | 1282
 109532 |  6 | 7 |  54 | 1140
   6869 |  6 | 7 |  52 |  632
    229 |  6 | 7 |  49 | 1908
 101909 |  6 | 7 |  49 | 1816
  65608 |  6 | 7 |  47 | 1927
  25223 |  6 | 7 |  45 |  999
  46521 |  6 | 7 |  42 | 1126
  78164 |  6 | 7 |  40 | 1362
  87893 |  6 | 7 |  37 | 1120
  78642 |  6 | 7 |  35 | 1891
  36568 |  6 | 7 |  34 |  312
   7590 |  6 | 7 |  32 | 1851
  81213 |  6 | 7 |  32 | 1411
  63696 |  6 | 7 |  31 | 1746
   4331 |  6 | 7 |  28 |  120
  10437 |  6 | 7 |  25 | 2268
  11561 |  6 | 7 |  21 | 1848
  74543 |  6 | 7 |  21 |  652
  52777 |  6 | 7 |  20 |  937
  97569 |  6 | 7 |  17 | 1056
  52091 |  6 | 7 |  16 |  256
  66875 |  6 | 7 |  14 | 2004
 124042 |  6 | 7 |  14 |    8
 106372 |  6 | 7 |  13 | 1114
  94724 |  6 | 7 |  13 |  617
  15541 |  6 | 7 |  12 |  958
  94674 |  6 | 7 |  11 |  638
  29286 |  6 | 7 |   9 | 2220
 132911 |  6 | 7 |   9 | 2211
 132031 |  6 | 7 |   9 |  151
 148359 |  6 | 7 |   8 | 2220
  67539 |  6 | 7 |   8 | 2185
  68512 |  6 | 7 |   7 | 1483
 114055 |  6 | 7 |   7 |  763
  67284 |  6 | 7 |   7 |  360
  10521 |  6 | 7 |   6 |  604
  24321 |  6 | 7 |   6 |  588
   1345 |  6 | 7 |   5 | 1752
  34442 |  6 | 7 |   5 |  187
  69566 |  6 | 7 |   4 |  945
 144303 |  6 | 7 |   2 |  976
  36912 |  6 | 7 |   1 | 1416
   9581 |  5 | 8 | 100 |  714
  12429 |  5 | 8 |  99 |  617
  14945 |  5 | 8 |  96 |  136
  43373 |  5 | 8 |  95 |  595
 132331 |  5 | 8 |  93 | 2059
  48332 |  5 | 8 |  87 | 2047
 118519 |  5 | 8 |  84 | 1671
 118440 |  5 | 8 |  84 | 1277
  46932 |  5 | 8 |  84 | 1204
 125810 |  5 | 8 |  84 | 1171
 149480 |  5 | 8 |  83 | 1971
 127345 |  5 | 8 |  83 |  855
  14416 |  5 | 8 |  82 | 1590
  28046 |  5 | 8 |  79 |  985
  83913 |  5 | 8 |  79 |  657
  80217 |  5 | 8 |  78 |  798
  58690 |  5 | 8 |  77 | 1525
  63664 |  5 | 8 |  76 | 1850
 133195 |  5 | 8 |  76 |  737
 102662 |  5 | 8 |  76 |  449
  51503 |  5 | 8 |  75 | 2092
 122675 |  5 | 8 |  72 |  764
  62638 |  5 | 8 |  69 | 2289
 118167 |  5 | 8 |  67 | 1569
  82720 |  5 | 8 |  66 | 1261
  17158 |  5 | 8 |  66 |  719
 128826 |  5 | 8 |  61 |   18
 114764 |  5 | 8 |  60 | 1533
 131013 |  5 | 8 |  58 | 1808
 103602 |  5 | 8 |  58 | 1213
   4749 |  5 | 8 |  57 |  353
 116629 |  5 | 8 |  54 | 2119
 120422 |  5 | 8 |  53 | 2049
  63315 |  5 | 8 |  53 |  466
  77335 |  5 | 8 |  53 |  189
  67549 |  5 | 8 |  52 | 1672
  34830 |  5 | 8 |  46 | 1779
  77259 |  5 | 8 |  43 |  616
  41219 |  5 | 8 |  41 | 1664
 129057 |  5 | 8 |  40 | 1733
  55718 |  5 | 8 |  40 |  124
 119308 |  5 | 8 |  35 | 2339
  77734 |  5 | 8 |  35 | 1471
  34420 |  5 | 8 |  32 | 1277
  99571 |  5 | 8 |  31 |  304
  14046 |  5 | 8 |  29 | 1599
  73195 |  5 | 8 |  28 | 2158
  47832 |  5 | 8 |  28 |  952
 148907 |  5 | 8 |  27 |  788
 119709 |  5 | 8 |  25 | 2298
 108782 |  5 | 8 |  25 | 2230
 103209 |  5 | 8 |  23 | 1427
  11465 |  5 | 8 |  22 |   23
  35481 |  5 | 8 |  21 |  351
  89531 |  5 | 8 |  18 | 1354
 104964 |  5 | 8 |  16 |  972
 101195 |  5 | 8 |  15 | 1308
  99246 |  5 | 8 |  14 |  680
  71686 |  5 | 8 |  14 |  249
 149827 |  5 | 8 |  13 | 1318
  99671 |  5 | 8 |  10 | 1425
  37632 |  5 | 8 |   9 |  782
  19205 |  5 | 8 |   7 | 2306
  81000 |  5 | 8 |   7 |    4
  69713 |  5 | 8 |   6 | 2204
  23165 |  5 | 8 |   6 |  317
 123286 |  5 | 7 | 100 |  204
  65759 |  5 | 7 |  99 | 1534
  41320 |  5 | 7 |  99 |  397
  27063 |  5 | 7 |  96 |  261
  23955 |  5 | 7 |  89 | 2168
 121822 |  5 | 7 |  87 | 1146
  86169 |  5 | 7 |  87 |  449
  45517 |  5 | 7 |  84 |  352
  88258 |  5 | 7 |  83 |  656
 123429 |  5 | 7 |  79 | 1850
 148487 |  5 | 7 |  79 |  422
 102785 |  5 | 7 |  78 |  553
  66551 |  5 | 7 |  76 |   56
  54488 |  5 | 7 |  73 | 1906
  11635 |  5 | 7 |  71 |  742
 133952 |  5 | 7 |  69 | 1979
 118806 |  5 | 7 |  61 | 1409
  50314 |  5 | 7 |  60 |  274
  77863 |  5 | 7 |  59 |  655
  35533 |  5 | 7 |  58 |  498
  79672 |  5 | 7 |  57 | 2334
 140335 |  5 | 7 |  56 | 1203
  92318 |  5 | 7 |  55 | 2216
  63995 |  5 | 7 |  52 | 1538
  22798 |  5 | 7 |  52 |  200
 147278 |  5 | 7 |  51 | 2049
  10432 |  5 | 7 |  51 |  918
  13369 |  5 | 7 |  49 | 2109
  56542 |  5 | 7 |  49 | 1148
  60917 |  5 | 7 |  48 | 1838
  72384 |  5 | 7 |  48 |  930
 114728 |  5 | 7 |  48 |  789
  18975 |  5 | 7 |  48 |  672
  31367 |  5 | 7 |  46 | 1716
 144084 |  5 | 7 |  43 | 1049
  28014 |  5 | 7 |  38 | 2082
  82779 |  5 | 7 |  33 | 1016
  68495 |  5 | 7 |  31 | 1861
  96117 |  5 | 7 |  29 | 1759
  42046 |  5 | 7 |  28 | 1980
  32793 |  5 | 7 |  28 |  739
  60233 |  5 | 7 |  25 | 2137
  34958 |  5 | 7 |  25 |  247
  81888 |  5 | 7 |  24 |  998
  76490 |  5 | 7 |  23 | 1657
 127546 |  5 | 7 |  22 |  348
  22592 |  5 | 7 |  22 |  102
 124700 |  5 | 7 |  22 |    8
 113744 |  5 | 7 |  21 | 2230
  87255 |  5 | 7 |  20 |  423
  49480 |  5 | 7 |  19 |  387
  28654 |  5 | 7 |  18 | 2057
  31663 |  5 | 7 |  16 |  675
  12040 |  5 | 7 |  14 |   57
 120538 |  5 | 7 |  11 | 1773
  65003 |  5 | 7 |  11 |    2
  56643 |  5 | 7 |   9 |  361
  59851 |  5 | 7 |   7 |  590
  68203 |  5 | 7 |   6 |  417
  77108 |  5 | 7 |   5 | 1376
  48374 |  5 | 7 |   5 |  348
  14273 |  5 | 7 |   4 | 1611
  32471 |  5 | 7 |   1 |  318
  83165 |  4 | 8 |  99 |  275
 112846 |  4 | 8 |  99 |  174
 133425 |  4 | 8 |  97 |  226
 143330 |  4 | 8 |  93 | 2286
  74748 |  4 | 8 |  89 |  790
   1125 |  4 | 8 |  87 | 1118
  85958 |  4 | 8 |  86 | 1421
   5184 |  4 | 8 |  85 | 1903
  93090 |  4 | 8 |  84 |  979
  36172 |  4 | 8 |  80 |  321
 149662 |  4 | 8 |  79 | 2139
 118112 |  4 | 8 |  77 | 1582
 132948 |  4 | 8 |  77 |  516
  33724 |  4 | 8 |  77 |  190
  29158 |  4 | 8 |  74 | 1785
  72547 |  4 | 8 |  74 |  361
  57612 |  4 | 8 |  71 |  542
 140103 |  4 | 8 |  71 |  240
  44332 |  4 | 8 |  70 |  494
 139313 |  4 | 8 |  69 | 2208
  84111 |  4 | 8 |  69 |   19
  52383 |  4 | 8 |  68 |  865
  94287 |  4 | 8 |  64 | 1646
  74119 |  4 | 8 |  63 | 1333
 108460 |  4 | 8 |  62 |  694
  16436 |  4 | 8 |  57 | 1092
   6875 |  4 | 8 |  56 |  314
  34256 |  4 | 8 |  54 | 2291
  77574 |  4 | 8 |  54 | 1385
  50420 |  4 | 8 |  51 | 1086
 137647 |  4 | 8 |  50 | 2208
  71803 |  4 | 8 |  47 |  691
 145917 |  4 | 8 |  44 | 1407
 112817 |  4 | 8 |  44 | 1156
  52117 |  4 | 8 |  43 |  774
 130951 |  4 | 8 |  41 |  806
  92627 |  4 | 8 |  39 | 2010
  30906 |  4 | 8 |  39 |  608
 109167 |  4 | 8 |  38 |  624
 101268 |  4 | 8 |  37 | 1903
  10563 |  4 | 8 |  35 | 1301
  89482 |  4 | 8 |  35 |  778
  19365 |  4 | 8 |  34 |  175
  76367 |  4 | 8 |  32 | 1295
  70535 |  4 | 8 |  32 |  366
  38090 |  4 | 8 |  25 | 1789
   4055 |  4 | 8 |  25 | 1028
  11150 |  4 | 8 |  23 | 1902
  55068 |  4 | 8 |  21 | 1211
 134086 |  4 | 8 |  18 |   97
  72553 |  4 | 8 |  17 | 1391
  38442 |  4 | 8 |  17 |  844
  33877 |  4 | 8 |  17 |  297
  21413 |  4 | 8 |  16 | 2163
  75031 |  4 | 8 |  16 | 1733
  77612 |  4 | 8 |  16 | 1369
 142826 |  4 | 8 |  16 |  767
 140533 |  4 | 8 |  15 |  618
  93491 |  4 | 8 |  13 |  683
  68825 |  4 | 8 |  12 | 2224
 114729 |  4 | 8 |   9 | 1895
  13888 |  4 | 8 |   7 |  991
 108740 |  4 | 8 |   3 | 2199
  45818 |  4 | 8 |   2 |  572
 110648 |  4 | 8 |   2 |  214
 114316 |  4 | 8 |   1 |  629
  84161 |  4 | 7 |  99 |  832
  72570 |  4 | 7 |  98 |  570
 130692 |  4 | 7 |  97 | 2046
  66474 |  4 | 7 |  97 | 1781
  26600 |  4 | 7 |  97 | 1259
  99858 |  4 | 7 |  95 | 1682
 127699 |  4 | 7 |  93 | 1268
  65991 |  4 | 7 |  90 | 1531
 109927 |  4 | 7 |  90 |  571
  75888 |  4 | 7 |  89 |  454
   7675 |  4 | 7 |  88 |  914
  44496 |  4 | 7 |  87 | 2167
 117326 |  4 | 7 |  85 | 1374
   6069 |  4 | 7 |  85 |  267
  74752 |  4 | 7 |  82 | 1425
  14000 |  4 | 7 |  78 | 1339
  93191 |  4 | 7 |  76 | 2188
 108617 |  4 | 7 |  70 |  366
 128608 |  4 | 7 |  65 | 1979
  74451 |  4 | 7 |  65 | 1227
 105509 |  4 | 7 |  65 |   28
   2415 |  4 | 7 |  64 | 2105
 112117 |  4 | 7 |  64 | 1279
 132060 |  4 | 7 |  63 |  829
  46752 |  4 | 7 |  62 |  189
 129626 |  4 | 7 |  58 | 1192
   4868 |  4 | 7 |  57 | 1861
   3611 |  4 | 7 |  57 |  425
  86726 |  4 | 7 |  55 | 1342
  34540 |  4 | 7 |  54 | 1499
  18203 |  4 | 7 |  53 | 1337
  46633 |  4 | 7 |  52 | 1768
  89037 |  4 | 7 |  52 |    4
 130554 |  4 | 7 |  51 |  827
  65149 |  4 | 7 |  50 | 1185
  58723 |  4 | 7 |  49 |  500
 104217 |  4 | 7 |  48 | 1364
 105119 |  4 | 7 |  46 | 1727
  89204 |  4 | 7 |  43 | 2211
  48115 |  4 | 7 |  43 | 1992
  94030 |  4 | 7 |  42 | 1917
  47324 |  4 | 7 |  42 |  490
  56522 |  4 | 7 |  41 | 1931
   3206 |  4 | 7 |  39 | 1696
 128371 |  4 | 7 |  38 | 2052
  47337 |  4 | 7 |  38 | 1673
 124153 |  4 | 7 |  38 | 1478
  81024 |  4 | 7 |  37 |  794
  50894 |  4 | 7 |  37 |  431
 101930 |  4 | 7 |  32 | 1113
   6587 |  4 | 7 |  29 | 1417
  20137 |  4 | 7 |  29 |  647
  59791 |  4 | 7 |  28 | 1469
 138997 |  4 | 7 |  26 |  926
  79852 |  4 | 7 |  24 | 2182
  53530 |  4 | 7 |  24 | 1109
 100096 |  4 | 7 |  23 |  765
  99287 |  4 | 7 |  17 | 1043
 126893 |  4 | 7 |  16 |  107
 139662 |  4 | 7 |  15 | 1183
  11285 |  4 | 7 |  13 |  794
 103388 |  4 | 7 |  11 | 1911
   3139 |  4 | 7 |   5 | 1275
  74740 |  4 | 7 |   5 | 1046
 106576 |  4 | 7 |   5 |  570
  88400 |  4 | 7 |   4 |  206
 107063 |  4 | 7 |   3 | 1550
 140099 |  4 | 7 |   1 | 1390
  96196 |  3 | 8 |  99 | 1245
  80196 |  3 | 8 |  97 |  686
  21341 |  3 | 8 |  96 | 1995
   1530 |  3 | 8 |  96 | 1553
  11913 |  3 | 8 |  96 |  639
  85037 |  3 | 8 |  93 | 1788
  70794 |  3 | 8 |  91 | 1189
  18004 |  3 | 8 |  90 | 1385
 123117 |  3 | 8 |  87 | 1877
  56019 |  3 | 8 |  87 |  628
 116814 |  3 | 8 |  86 | 1668
  15124 |  3 | 8 |  86 | 1596
  95534 |  3 | 8 |  85 |  704
 121833 |  3 | 8 |  84 | 1790
  14465 |  3 | 8 |  83 | 1382
 112571 |  3 | 8 |  78 | 2252
   2451 |  3 | 8 |  74 | 2326
   3647 |  3 | 8 |  72 |  951
  97301 |  3 | 8 |  72 |  778
  58359 |  3 | 8 |  70 | 2219
   7499 |  3 | 8 |  70 |  401
  69346 |  3 | 8 |  68 |  514
 106624 |  3 | 8 |  66 |  373
  93237 |  3 | 8 |  64 | 1387
  35052 |  3 | 8 |  63 | 1490
  46489 |  3 | 8 |  61 | 2077
 149806 |  3 | 8 |  61 |  221
  13345 |  3 | 8 |  58 | 1808
 127581 |  3 | 8 |  55 |  554
  10887 |  3 | 8 |  54 | 1021
  75080 |  3 | 8 |  53 | 1632
  43716 |  3 | 8 |  52 | 1810
 105250 |  3 | 8 |  51 | 2231
 106498 |  3 | 8 |  51 |   32
  64933 |  3 | 8 |  51 |   22
 130983 |  3 | 8 |  49 |  365
  46819 |  3 | 8 |  48 | 1086
  53852 |  3 | 8 |  46 | 1821
  13198 |  3 | 8 |  46 |  590
  97865 |  3 | 8 |  43 |  451
  76980 |  3 | 8 |  42 | 1031
 125931 |  3 | 8 |  41 | 2053
 138035 |  3 | 8 |  39 | 1899
 104653 |  3 | 8 |  39 |  447
  18671 |  3 | 8 |  38 | 2039
 126966 |  3 | 8 |  38 | 1692
  59232 |  3 | 8 |  37 | 1572
  56154 |  3 | 8 |  36 | 2273
 103252 |  3 | 8 |  36 |  667
  44224 |  3 | 8 |  35 | 2316
 131074 |  3 | 8 |  35 | 1473
 132692 |  3 | 8 |  35 | 1240
 149947 |  3 | 8 |  34 |  690
  15384 |  3 | 8 |  31 | 1852
  62369 |  3 | 8 |  31 | 1123
  75765 |  3 | 8 |  31 |  112
  23197 |  3 | 8 |  30 | 1278
  54660 |  3 | 8 |  25 | 1157
 127359 |  3 | 8 |  24 | 1679
  36229 |  3 | 8 |  22 | 1717
  70455 |  3 | 8 |  20 | 1257
 148072 |  3 | 8 |  19 |  719
  19576 |  3 | 8 |  19 |  409
  76169 |  3 | 8 |  17 | 2191
  56958 |  3 | 8 |  14 |  875
  94350 |  3 | 8 |  14 |  690
  36189 |  3 | 8 |  13 | 2137
  33704 |  3 | 8 |  12 |  338
 146946 |  3 | 8 |   8 | 1559
 114553 |  3 | 8 |   8 |  419
  15582 |  3 | 8 |   7 |  623
  35764 |  3 | 8 |   1 | 1339
  78820 |  3 | 7 |  96 | 1856
  39544 |  3 | 7 |  96 | 1768
  62501 |  3 | 7 |  96 | 1758
 126925 |  3 | 7 |  95 | 2310
  89780 |  3 | 7 |  95 | 1484
  21244 |  3 | 7 |  90 |  243
  87541 |  3 | 7 |  89 |  183
   8398 |  3 | 7 |  88 | 2045
  54388 |  3 | 7 |  88 |    8
  87171 |  3 | 7 |  87 | 1416
  39416 |  3 | 7 |  86 | 2248
 146425 |  3 | 7 |  85 | 1958
  54871 |  3 | 7 |  82 | 1522
   4782 |  3 | 7 |  76 |  708
 118280 |  3 | 7 |  75 | 2273
  10753 |  3 | 7 |  74 | 2055
 112692 |  3 | 7 |  71 | 1011
 111918 |  3 | 7 |  71 |   67
  18698 |  3 | 7 |  70 | 1654
 103540 |  3 | 7 |  69 |  346
  25465 |  3 | 7 |  67 | 2315
  78799 |  3 | 7 |  67 |  847
  28782 |  3 | 7 |  64 | 1463
  31004 |  3 | 7 |  63 | 1335
 143544 |  3 | 7 |  62 |  782
 141399 |  3 | 7 |  60 | 1003
  25572 |  3 | 7 |  60 |  809
  15366 |  3 | 7 |  60 |  657
  35175 |  3 | 7 |  59 |  638
  15953 |  3 | 7 |  56 |   61
  80065 |  3 | 7 |  52 | 2070
  55979 |  3 | 7 |  52 | 1953
   1422 |  3 | 7 |  51 | 2038
  71642 |  3 | 7 |  51 |  507
  62448 |  3 | 7 |  50 | 1387
  20136 |  3 | 7 |  47 | 2267
  60594 |  3 | 7 |  47 | 1813
 127697 |  3 | 7 |  44 | 2259
 141436 |  3 | 7 |  44 | 2096
  50435 |  3 | 7 |  41 |  189
 121977 |  3 | 7 |  39 | 2140
  33664 |  3 | 7 |  37 |  856
  75872 |  3 | 7 |  35 | 2189
  95425 |  3 | 7 |  35 | 1499
 107375 |  3 | 7 |  32 | 1860
 116844 |  3 | 7 |  32 | 1422
  10431 |  3 | 7 |  31 |  237
 129759 |  3 | 7 |  30 | 1191
   2689 |  3 | 7 |  30 |  189
  24933 |  3 | 7 |  29 |  598
  23364 |  3 | 7 |  27 |  546
  46943 |  3 | 7 |  21 | 1313
 146014 |  3 | 7 |  21 |  997
 111601 |  3 | 7 |  20 | 1349
 120376 |  3 | 7 |  20 |  876
  43947 |  3 | 7 |  15 | 1975
  71415 |  3 | 7 |  14 |  210
  81427 |  3 | 7 |  10 | 1489
 134411 |  3 | 7 |   9 | 2076
 121724 |  3 | 7 |   8 |  916
    989 |  3 | 7 |   2 |  874
 107119 |  3 | 7 |   2 |  302
 129077 |  3 | 7 |   1 |  199
 122583 |  2 | 8 | 100 | 1381
 100939 |  2 | 8 | 100 |  523
  82441 |  2 | 8 |  99 | 1589
 147885 |  2 | 8 |  98 | 1257
  33950 |  2 | 8 |  96 |   35
 122715 |  2 | 8 |  95 |  655
  33591 |  2 | 8 |  92 | 1661
  19197 |  2 | 8 |  91 | 1241
 121596 |  2 | 8 |  89 |  643
   5930 |  2 | 8 |  87 |  520
 104991 |  2 | 8 |  86 | 1689
  96573 |  2 | 8 |  86 | 1099
  28304 |  2 | 8 |  85 |   69
  74036 |  2 | 8 |  83 | 1234
 106899 |  2 | 8 |  82 | 2183
  86636 |  2 | 8 |  82 | 2076
 103809 |  2 | 8 |  81 | 2270
  61551 |  2 | 8 |  81 | 1881
  66154 |  2 | 8 |  78 |  889
  16384 |  2 | 8 |  77 |  270
  43626 |  2 | 8 |  75 | 2005
  23970 |  2 | 8 |  75 | 1608
 104017 |  2 | 8 |  74 | 2337
  46069 |  2 | 8 |  72 | 1525
  85375 |  2 | 8 |  72 | 1023
  92006 |  2 | 8 |  72 |  249
  88901 |  2 | 8 |  70 | 1849
  54051 |  2 | 8 |  67 |  326
  20795 |  2 | 8 |  62 | 1963
  46884 |  2 | 8 |  60 | 2324
  43315 |  2 | 8 |  59 | 1153
  13186 |  2 | 8 |  57 | 1693
 140958 |  2 | 8 |  57 | 1164
   7154 |  2 | 8 |  56 | 2050
  15620 |  2 | 8 |  53 |  735
  15357 |  2 | 8 |  51 |  812
 137422 |  2 | 8 |  50 | 1793
 115702 |  2 | 8 |  49 | 1951
 147776 |  2 | 8 |  48 | 1179
 115521 |  2 | 8 |  48 | 1086
  52261 |  2 | 8 |  48 |  195
  50623 |  2 | 8 |  48 |   36
  19969 |  2 | 8 |  47 |  615
  33675 |  2 | 8 |  45 | 2253
 129307 |  2 | 8 |  43 |  883
  73949 |  2 | 8 |  42 | 1611
  97458 |  2 | 8 |  40 | 1823
  77363 |  2 | 8 |  39 |  885
 133548 |  2 | 8 |  39 |  578
 133082 |  2 | 8 |  39 |  360
  14536 |  2 | 8 |  35 |  119
 124475 |  2 | 8 |  31 | 2178
  37786 |  2 | 8 |  31 | 1053
  87729 |  2 | 8 |  30 |  902
  13448 |  2 | 8 |  29 | 1929
  71466 |  2 | 8 |  25 |  533
  59288 |  2 | 8 |  23 |  834
  78482 |  2 | 8 |  23 |  200
  11646 |  2 | 8 |  20 | 1752
 128222 |  2 | 8 |  17 |  693
 118315 |  2 | 8 |  15 | 1977
   7573 |  2 | 8 |  14 |   70
  71649 |  2 | 8 |  13 |  724
 111085 |  2 | 8 |  13 |   80
  54381 |  2 | 8 |  11 | 1114
  17014 |  2 | 8 |  10 |  684
  45176 |  2 | 8 |   9 | 1333
  48742 |  2 | 8 |   9 |  124
  35257 |  2 | 8 |   5 | 2296
  93712 |  2 | 8 |   3 | 2347
 147532 |  2 | 7 |  99 |  209
  53401 |  2 | 7 |  93 | 1662
  32489 |  2 | 7 |  93 | 1406
  32511 |  2 | 7 |  92 | 1414
  71095 |  2 | 7 |  91 |  812
 145644 |  2 | 7 |  91 |  300
  84478 |  2 | 7 |  89 | 1580
 109757 |  2 | 7 |  89 |  666
  27115 |  2 | 7 |  88 |  934
 120876 |  2 | 7 |  88 |  529
 102327 |  2 | 7 |  85 | 2099
   4273 |  2 | 7 |  84 |  461
 116387 |  2 | 7 |  83 | 1854
  38578 |  2 | 7 |  71 | 1501
  11388 |  2 | 7 |  69 |  646
 137618 |  2 | 7 |  68 |  294
  55219 |  2 | 7 |  66 | 1007
  83480 |  2 | 7 |  64 |  669
 117548 |  2 | 7 |  57 | 1790
   3172 |  2 | 7 |  57 |  199
  65238 |  2 | 7 |  56 | 1577
  25935 |  2 | 7 |  56 |  625
 133701 |  2 | 7 |  53 | 2187
 119134 |  2 | 7 |  53 |  666
 100467 |  2 | 7 |  53 |  498
 147227 |  2 | 7 |  52 | 1378
 116995 |  2 | 7 |  52 | 1298
  41788 |  2 | 7 |  49 | 1727
   8383 |  2 | 7 |  49 | 1168
 132500 |  2 | 7 |  48 |  170
 124198 |  2 | 7 |  41 | 1846
 124521 |  2 | 7 |  40 | 1845
  29747 |  2 | 7 |  40 | 1040
 128520 |  2 | 7 |  40 |  657
  22411 |  2 | 7 |  37 | 1959
  52640 |  2 | 7 |  35 | 1432
  10846 |  2 | 7 |  35 | 1417
  86021 |  2 | 7 |  34 |  862
 145843 |  2 | 7 |  33 |  831
 115072 |  2 | 7 |  33 |   83
  93029 |  2 | 7 |  32 | 1122
 107611 |  2 | 7 |  32 |  331
  43691 |  2 | 7 |  28 |  919
 124393 |  2 | 7 |  23 |  563
  59254 |  2 | 7 |  23 |  399
 101531 |  2 | 7 |  23 |  264
   6222 |  2 | 7 |  22 |  975
  52119 |  2 | 7 |  21 | 1008
 131631 |  2 | 7 |  21 |  925
  11051 |  2 | 7 |  21 |  427
  69120 |  2 | 7 |  20 | 2152
  36770 |  2 | 7 |  19 | 1676
   1633 |  2 | 7 |  15 |  384
 101848 |  2 | 7 |  13 | 1490
 134440 |  2 | 7 |  13 |   13
  20027 |  2 | 7 |  10 | 1517
  46061 |  2 | 7 |   9 |  575
  39952 |  2 | 7 |   8 |  300
   5648 |  2 | 7 |   8 |  266
  11869 |  2 | 7 |   5 | 1964
  85004 |  2 | 7 |   5 |  464
  25108 |  2 | 7 |   3 | 2202
  53653 |  2 | 7 |   2 | 2052
  76172 |  2 | 7 |   1 |   89
 117917 |  1 | 8 |  98 |  793
   6028 |  1 | 8 |  98 |   33
  19384 |  1 | 8 |  97 | 2006
  35682 |  1 | 8 |  97 |  429
 117341 |  1 | 8 |  94 | 1671
  82664 |  1 | 8 |  94 | 1205
  18886 |  1 | 8 |  93 | 2282
 138731 |  1 | 8 |  92 | 2150
  59201 |  1 | 8 |  92 |  611
  66189 |  1 | 8 |  90 | 1541
  87553 |  1 | 8 |  90 |  999
  52302 |  1 | 8 |  90 |  471
  88118 |  1 | 8 |  89 | 1351
 144083 |  1 | 8 |  86 |  475
  38848 |  1 | 8 |  83 | 1356
  58224 |  1 | 8 |  81 | 1604
 120108 |  1 | 8 |  79 | 1478
 145365 |  1 | 8 |  74 | 2203
 105542 |  1 | 8 |  73 | 1802
  72480 |  1 | 8 |  73 |  493
 148522 |  1 | 8 |  70 |  138
  74938 |  1 | 8 |  70 |   58
  16789 |  1 | 8 |  69 | 1940
  20457 |  1 | 8 |  68 | 1792
  99360 |  1 | 8 |  68 | 1100
 118868 |  1 | 8 |  67 | 1952
  13696 |  1 | 8 |  67 |  272
  52606 |  1 | 8 |  67 |   39
  60316 |  1 | 8 |  66 |   92
  38317 |  1 | 8 |  63 |   56
  93522 |  1 | 8 |  62 |  511
  65921 |  1 | 8 |  61 |  110
  74363 |  1 | 8 |  60 | 2113
  66304 |  1 | 8 |  59 |  840
 137807 |  1 | 8 |  57 |  871
  42768 |  1 | 8 |  56 | 2282
  71555 |  1 | 8 |  56 |  312
  81345 |  1 | 8 |  55 | 1231
 107588 |  1 | 8 |  53 |  301
  20969 |  1 | 8 |  52 | 2177
  98084 |  1 | 8 |  52 |  751
   1018 |  1 | 8 |  49 |  644
   7304 |  1 | 8 |  48 | 1554
 142647 |  1 | 8 |  47 |  789
  50401 |  1 | 8 |  47 |  650
  65178 |  1 | 8 |  47 |  127
 149479 |  1 | 8 |  45 | 1237
 149873 |  1 | 8 |  41 |  798
 134332 |  1 | 8 |  40 |  505
  63913 |  1 | 8 |  39 | 1471
  70044 |  1 | 8 |  39 |   13
 127508 |  1 | 8 |  38 | 1969
  35321 |  1 | 8 |  38 | 1656
  48362 |  1 | 8 |  37 | 1638
  56419 |  1 | 8 |  34 |  250
  11118 |  1 | 8 |  33 | 1845
 139859 |  1 | 8 |  33 |  791
  94714 |  1 | 8 |  29 |  364
   6062 |  1 | 8 |  26 |  133
  82360 |  1 | 8 |  25 |  335
  67800 |  1 | 8 |  24 | 1805
  72432 |  1 | 8 |  21 |  485
  26119 |  1 | 8 |  20 |  870
 135615 |  1 | 8 |  19 |   43
  80990 |  1 | 8 |  18 |    3
  59087 |  1 | 8 |  17 | 1021
  45497 |  1 | 8 |  16 | 2158
  50810 |  1 | 8 |  15 |  933
  42170 |  1 | 8 |  12 | 1621
  27797 |  1 | 8 |   8 | 1051
  94036 |  1 | 8 |   5 | 2047
 128127 |  1 | 8 |   5 | 1685
 140992 |  1 | 8 |   5 |  442
  52913 |  1 | 8 |   4 | 1822
  43413 |  1 | 8 |   4 | 1161
  88713 |  1 | 8 |   4 |  936
 102855 |  1 | 8 |   4 |  857
  79485 |  1 | 8 |   1 | 2127
   8405 |  1 | 8 |   1 | 1816
  24106 |  1 | 8 |   1 |  213
 106580 |  1 | 7 | 100 | 1205
  53439 |  1 | 7 | 100 |  884
 111104 |  1 | 7 |  95 | 1130
  56610 |  1 | 7 |  95 |  146
  95420 |  1 | 7 |  92 | 2270
 147801 |  1 | 7 |  84 | 1260
  53020 |  1 | 7 |  83 |  596
  23250 |  1 | 7 |  83 |  199
  19355 |  1 | 7 |  81 |  702
  50553 |  1 | 7 |  79 |  493
  87799 |  1 | 7 |  78 | 1394
 144517 |  1 | 7 |  76 |  899
  24326 |  1 | 7 |  74 | 1471
 145502 |  1 | 7 |  73 | 2026
   5548 |  1 | 7 |  72 | 2140
  78009 |  1 | 7 |  72 | 1579
  12715 |  1 | 7 |  70 |  190
  26150 |  1 | 7 |  67 | 1699
  29411 |  1 | 7 |  64 |  201
  66374 |  1 | 7 |  61 | 1544
 148538 |  1 | 7 |  61 | 1471
   5141 |  1 | 7 |  59 |  649
  77848 |  1 | 7 |  57 | 1662
 111269 |  1 | 7 |  57 |  554
  32674 |  1 | 7 |  56 | 1538
  10648 |  1 | 7 |  56 |  481
  99572 |  1 | 7 |  54 | 1479
 145030 |  1 | 7 |  52 | 1756
  26204 |  1 | 7 |  51 | 1482
  39426 |  1 | 7 |  51 |  572
  73511 |  1 | 7 |  49 | 1460
  54092 |  1 | 7 |  49 |  418
  81985 |  1 | 7 |  48 |  755
 146725 |  1 | 7 |  47 | 1192
 135006 |  1 | 7 |  41 | 2210
  43633 |  1 | 7 |  39 | 2173
 131560 |  1 | 7 |  39 |  231
  61188 |  1 | 7 |  37 | 1306
  25249 |  1 | 7 |  37 |  235
  68107 |  1 | 7 |  33 | 1667
  11261 |  1 | 7 |  31 | 1499
 136614 |  1 | 7 |  29 |   28
 135974 |  1 | 7 |  27 |  950
  94609 |  1 | 7 |  26 | 1981
  30285 |  1 | 7 |  26 |  635
  89992 |  1 | 7 |  23 | 1939
 109259 |  1 | 7 |  22 |  762
 108318 |  1 | 7 |  21 |  771
 104484 |  1 | 7 |  20 |  611
  82690 |  1 | 7 |  19 |  592
  73270 |  1 | 7 |  18 |  399
  41590 |  1 | 7 |  15 |  293
  29740 |  1 | 7 |  13 | 2175
 115820 |  1 | 7 |  10 |  530
  61849 |  1 | 7 |   9 | 2333
 107343 |  1 | 7 |   9 | 1830
 123186 |  1 | 7 |   4 | 1197
  83344 |  1 | 7 |   2 |  451
 110023 |  1 | 7 |   2 |  436
 134173 |  1 | 7 |   2 |  305
 103672 |  1 | 7 |   1 | 1303
(2963 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where
  b in (7, 8) and c is not null and d < 2348
order by a desc, b desc, c desc, d desc;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..4385.74 rows=532 width=20) (actual rows=2963.00 loops=1)
   Index Cond: ((b = ANY ('{7,8}'::integer[])) AND (c IS NOT NULL) AND (d < 2348))
   Index Searches: 23
   Buffers: shared hit=3121
(4 rows)

-- Test case associated with failure to call _bt_start_array_keys() query #4
-- (only forwards scan test, uses alternative NULLS FIRST index):
select *
from fuzz_skip_scan
where b in (19, 20) and c >= 80 and d < 230
order by a nulls first, b nulls first, c nulls first, d nulls first;
   id   | a  | b  | c  |  d  
--------+----+----+----+-----
  75937 |    | 20 | 92 | 107
  38278 |    | 20 | 97 |  50
  58553 |  1 | 19 | 89 | 161
 117834 |  1 | 20 | 82 | 193
 119500 |  1 | 20 | 96 |  50
  43611 |  2 | 19 | 89 | 209
  78218 |  2 | 19 | 96 |  62
  50081 |  2 | 20 | 89 | 144
  78278 |  2 | 20 | 97 |  85
  26296 |  3 | 19 | 96 |  22
  46231 |  3 | 20 | 99 | 202
  36668 |  4 | 19 | 99 | 159
  92009 |  5 | 19 | 85 |  18
 116673 |  5 | 20 | 81 | 143
  21855 |  5 | 20 | 86 |  92
 117080 |  5 | 20 | 93 |  67
  44285 |  6 | 19 | 88 | 163
  18417 |  6 | 19 | 91 | 183
  13899 |  6 | 20 | 92 | 145
  61254 |  6 | 20 | 98 | 165
  74695 |  6 | 20 | 99 | 176
  70910 |  9 | 19 | 81 | 186
 125196 |  9 | 19 | 98 |  91
  41161 | 10 | 20 | 98 | 199
 120729 | 11 | 19 | 80 |  21
   4051 | 11 | 19 | 81 |  92
 143151 | 11 | 19 | 85 |  34
 125001 | 11 | 19 | 86 | 143
  32313 | 11 | 19 | 90 |   4
  70373 | 11 | 19 | 94 |  61
 122909 | 11 | 19 | 96 | 204
  74340 | 11 | 19 | 97 | 220
 127069 | 11 | 20 | 84 | 218
 148405 | 12 | 19 | 85 | 189
 139844 | 12 | 20 | 87 |  46
  57288 | 12 | 20 | 88 | 180
 107575 | 12 | 20 | 93 | 193
  83630 | 13 | 19 | 89 |   9
  75626 | 13 | 19 | 90 | 104
 145063 | 13 | 19 | 91 |  43
  10369 | 13 | 19 | 95 | 152
  84850 | 13 | 19 | 97 | 134
 128175 | 13 | 20 | 80 | 137
  13912 | 13 | 20 | 90 | 217
  94965 | 14 | 19 | 93 | 203
  18213 | 14 | 19 | 99 |  13
 112418 | 14 | 20 | 85 | 161
   2898 | 15 | 19 | 84 | 183
 128198 | 15 | 19 | 95 | 165
  86609 | 15 | 19 | 95 | 202
 102441 | 15 | 20 | 91 |  35
  37236 | 16 | 19 | 83 |  26
  63259 | 16 | 19 | 93 | 174
  42442 | 16 | 20 | 94 |  29
  56887 | 17 | 19 | 85 | 201
 121723 | 17 | 19 | 89 | 200
 107965 | 17 | 19 | 96 |  53
 137801 | 17 | 19 | 99 | 173
 130146 | 18 | 19 | 84 | 133
  48458 | 18 | 19 | 94 | 121
  22579 | 18 | 19 | 98 | 140
   2174 | 19 | 20 | 80 |  54
 147216 | 20 | 19 | 87 | 229
  41053 | 20 | 20 | 84 | 120
  32146 | 20 | 20 | 94 | 132
(65 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where b in (19, 20) and c >= 80 and d < 230
order by a nulls first, b nulls first, c nulls first, d nulls first;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using fuzz_skip_scan_abcd_nullsfirst on fuzz_skip_scan  (cost=0.42..3872.20 rows=178 width=20) (actual rows=65.00 loops=1)
   Index Cond: ((b = ANY ('{19,20}'::integer[])) AND (c >= 80) AND (d < 230))
   Index Searches: 31
   Buffers: shared hit=204
(4 rows)

-- Test case associated with segfault/assertion failure:
--
-- fix for this bug:
/*
diff --git a/src/backend/access/nbtree/nbtutils.c b/src/backend/access/nbtree/nbtutils.c
index cb6b74912..2fbbbc31f 100644
--- a/src/backend/access/nbtree/nbtutils.c
+++ b/src/backend/access/nbtree/nbtutils.c
@@ -1826,7 +1826,7 @@ _bt_advance_array_keys(IndexScanDesc scan, BTReadPageState *pstate,

        if (_bt_check_compare(scan, dir, tuple, tupnatts, tupdesc, false,
-                             false, &continuescan,
+                             !sktrig_required, &continuescan,
                              &nsktrig) &&
            !so->scanBehind)
        {
*/
select *
from fuzz_skip_scan
where
  c is not null and d >= 8600 and d <= 8640
order by a desc, b desc, c desc, d desc;
   id   | a  | b  |  c  |  d   
--------+----+----+-----+------
  57462 |    |    |  46 | 8607
 113095 |    |    |  30 | 8627
  19477 |    |    |  23 | 8628
  55614 |    |    |  18 | 8634
 147632 |    | 17 |  86 | 8629
  94927 |    | 17 |  40 | 8613
 139856 |    | 17 |  12 | 8613
   4200 |    | 13 |  76 | 8625
 147240 |    | 13 |  73 | 8624
  86839 |    | 13 |  72 | 8605
  88707 |    | 12 |  69 | 8608
 120903 |    | 11 |  82 | 8637
  51020 |    | 11 |  24 | 8615
 109645 |    | 10 |  60 | 8611
  12568 |    |  9 |  84 | 8613
  96574 |    |  9 |  53 | 8608
 113072 |    |  9 |  34 | 8627
 128352 |    |  8 |  40 | 8638
 144940 |    |  5 |  23 | 8601
  39427 |    |  4 |  83 | 8631
   2509 |    |  3 |  62 | 8614
  50539 |    |  3 |  56 | 8631
 139188 |    |  3 |  42 | 8635
    541 |    |  1 |  88 | 8605
  24892 |    |  1 |  59 | 8628
   5249 |    |  1 |  58 | 8638
  42291 | 20 |    |  73 | 8611
 122524 | 20 |    |  70 | 8613
  31281 | 20 | 20 |  90 | 8622
  11714 | 20 | 19 |  71 | 8626
  70616 | 20 | 18 |  64 | 8609
  82302 | 20 | 17 |  73 | 8618
   8656 | 20 | 17 |  63 | 8620
 124884 | 20 | 16 |  79 | 8627
  83557 | 20 | 16 |  69 | 8612
  24437 | 20 | 16 |  35 | 8632
 105004 | 20 | 14 |  75 | 8602
  42739 | 20 | 14 |  20 | 8624
  19710 | 20 | 14 |  10 | 8614
  47478 | 20 | 14 |   4 | 8614
 143391 | 20 | 11 |  44 | 8628
  76660 | 20 | 11 |  29 | 8632
 114560 | 20 | 10 |  43 | 8633
 118418 | 20 |  8 |  21 | 8640
 146952 | 20 |  7 |  36 | 8608
  47871 | 20 |  6 |  81 | 8629
 106786 | 20 |  6 |  75 | 8640
  57079 | 20 |  6 |  67 | 8611
 133903 | 20 |  5 |  85 | 8608
  59456 | 20 |  4 |  53 | 8633
  43544 | 20 |  4 |  18 | 8635
  85572 | 20 |  4 |   5 | 8630
  91665 | 20 |  3 |  19 | 8622
  38009 | 20 |  2 |  55 | 8626
  72075 | 20 |  1 |  81 | 8609
  80170 | 19 |    |  50 | 8604
  67953 | 19 | 20 |  88 | 8628
 148713 | 19 | 20 |  78 | 8603
  14139 | 19 | 19 |  35 | 8608
 123004 | 19 | 19 |  23 | 8600
  70275 | 19 | 16 |  78 | 8604
  53994 | 19 | 16 |  35 | 8631
  37483 | 19 | 16 |  21 | 8636
  80503 | 19 | 16 |   4 | 8633
  59206 | 19 | 13 |  58 | 8632
  45394 | 19 | 12 |  50 | 8621
 140791 | 19 | 12 |  15 | 8602
 144982 | 19 | 11 |  46 | 8602
 104879 | 19 | 10 |  25 | 8640
  21626 | 19 | 10 |   6 | 8637
  98077 | 19 | 10 |   3 | 8608
  28465 | 19 |  9 | 100 | 8626
  42557 | 19 |  9 |  61 | 8639
 129600 | 19 |  9 |  59 | 8609
  95141 | 19 |  9 |  47 | 8639
   5533 | 19 |  9 |  11 | 8613
  72492 | 19 |  6 |  41 | 8603
  17932 | 19 |  5 |  41 | 8605
 120747 | 19 |  4 |  61 | 8636
 132930 | 19 |  4 |  41 | 8621
  29567 | 19 |  3 |  81 | 8603
 110942 | 19 |  3 |  34 | 8632
 137906 | 19 |  2 |  33 | 8606
  93450 | 19 |  2 |  16 | 8613
  85810 | 19 |  1 |  63 | 8613
 122661 | 19 |  1 |  60 | 8613
  74937 | 18 |    |  55 | 8606
  45654 | 18 | 20 |  51 | 8628
  22958 | 18 | 20 |  32 | 8611
  37940 | 18 | 19 |   1 | 8606
 135012 | 18 | 18 |  67 | 8632
  75189 | 18 | 18 |  62 | 8618
 145912 | 18 | 18 |  54 | 8611
  67528 | 18 | 17 |  48 | 8631
  92150 | 18 | 15 |  78 | 8629
  28805 | 18 | 14 |  79 | 8614
  38722 | 18 | 13 |  48 | 8608
  73156 | 18 | 12 |  49 | 8610
  59421 | 18 | 12 |  42 | 8625
    183 | 18 | 12 |   2 | 8604
  27535 | 18 | 10 |  73 | 8627
 144364 | 18 | 10 |  11 | 8605
  73516 | 18 |  7 |  95 | 8622
 143445 | 18 |  7 |  21 | 8620
  39371 | 18 |  7 |  11 | 8626
 126590 | 18 |  6 |   4 | 8609
  13522 | 18 |  5 |  58 | 8618
 119180 | 18 |  5 |  23 | 8621
   3831 | 18 |  4 |  69 | 8621
  62367 | 18 |  4 |  66 | 8623
  92003 | 18 |  3 |  85 | 8621
 110763 | 18 |  3 |  38 | 8608
  76327 | 18 |  3 |  23 | 8627
  14714 | 18 |  2 |  44 | 8618
  72601 | 17 |    |  61 | 8626
 105798 | 17 | 20 |  93 | 8636
 101648 | 17 | 20 |  87 | 8626
 140770 | 17 | 20 |  78 | 8608
 112563 | 17 | 19 |  89 | 8630
 141703 | 17 | 19 |   8 | 8625
  12554 | 17 | 18 |  35 | 8625
  66093 | 17 | 17 |  73 | 8611
 141713 | 17 | 17 |  69 | 8628
  92323 | 17 | 16 |  23 | 8640
 123315 | 17 | 14 |  16 | 8640
  16548 | 17 | 13 |  10 | 8611
   1097 | 17 | 12 |  88 | 8615
 104143 | 17 | 12 |  34 | 8624
  85677 | 17 | 12 |  30 | 8606
 113038 | 17 | 11 |  65 | 8623
  42801 | 17 | 11 |  44 | 8612
 137394 | 17 | 11 |  32 | 8618
  93970 | 17 | 10 |  56 | 8631
  56974 | 17 | 10 |  13 | 8603
  30990 | 17 |  9 |  95 | 8619
  35536 | 17 |  9 |  84 | 8614
  13428 | 17 |  9 |  66 | 8629
  29103 | 17 |  8 |   6 | 8614
  38117 | 17 |  7 |  80 | 8624
 100589 | 17 |  7 |  75 | 8607
  48869 | 17 |  6 |  65 | 8636
 123997 | 17 |  6 |  55 | 8610
 120122 | 17 |  4 |  36 | 8619
 106038 | 17 |  4 |  26 | 8631
 119639 | 17 |  3 |  97 | 8618
  61351 | 17 |  2 |  14 | 8624
  43503 | 17 |  1 |  48 | 8621
 135026 | 17 |  1 |  39 | 8634
 107186 | 16 | 20 |  72 | 8604
  39332 | 16 | 20 |  17 | 8615
  54163 | 16 | 17 |  60 | 8606
  43703 | 16 | 17 |  54 | 8603
  14704 | 16 | 16 |  97 | 8608
  12760 | 16 | 16 |  88 | 8606
  43172 | 16 | 14 |  74 | 8615
  19327 | 16 | 14 |  66 | 8639
 123809 | 16 | 14 |  51 | 8619
  23463 | 16 | 14 |  44 | 8621
  59772 | 16 | 14 |   2 | 8620
  91689 | 16 | 13 |  69 | 8619
 130971 | 16 | 13 |  68 | 8608
 133467 | 16 | 13 |  41 | 8605
  75648 | 16 | 12 |  21 | 8602
   1767 | 16 | 11 |  41 | 8611
 133634 | 16 | 10 |  57 | 8602
  44768 | 16 | 10 |  52 | 8616
  81045 | 16 |  9 |  36 | 8633
 134286 | 16 |  5 |  20 | 8623
  10935 | 16 |  4 |  24 | 8607
  49105 | 16 |  2 |  95 | 8612
  30419 | 16 |  2 |  40 | 8638
 136109 | 16 |  1 |  49 | 8632
  38976 | 16 |  1 |  44 | 8607
  60381 | 15 |    |  60 | 8607
 101109 | 15 | 20 |  37 | 8623
  93993 | 15 | 20 |  26 | 8601
 119966 | 15 | 18 |  16 | 8637
  59265 | 15 | 18 |   6 | 8607
  70595 | 15 | 16 |  28 | 8614
  72692 | 15 | 15 |  95 | 8626
  12088 | 15 | 15 |  83 | 8635
 124555 | 15 | 15 |  53 | 8606
  65791 | 15 | 15 |   5 | 8625
  78380 | 15 | 14 |  53 | 8626
  47273 | 15 | 14 |  50 | 8637
 121862 | 15 | 14 |  45 | 8628
 100438 | 15 | 13 |  42 | 8623
  82049 | 15 | 13 |   2 | 8631
 134264 | 15 | 10 |  74 | 8638
  51065 | 15 | 10 |  17 | 8602
  77678 | 15 | 10 |  13 | 8638
 119456 | 15 |  9 |  81 | 8605
   6597 | 15 |  9 |  31 | 8635
  88147 | 15 |  9 |  27 | 8608
 127111 | 15 |  8 |  63 | 8621
  25759 | 15 |  8 |  37 | 8631
  85571 | 15 |  8 |  36 | 8628
  87882 | 15 |  7 |  51 | 8631
 122402 | 15 |  5 |  41 | 8607
  27402 | 15 |  5 |  32 | 8620
 143243 | 15 |  3 |  99 | 8608
  40031 | 15 |  1 |  96 | 8634
 119094 | 15 |  1 |  58 | 8612
  74777 | 15 |  1 |  49 | 8609
 141617 | 14 |    |  66 | 8614
 148042 | 14 | 20 |  43 | 8607
  68004 | 14 | 19 |  97 | 8616
  42823 | 14 | 19 |  18 | 8604
  76129 | 14 | 18 |  81 | 8612
  82997 | 14 | 18 |  48 | 8615
  28557 | 14 | 18 |   8 | 8608
  32863 | 14 | 16 |  75 | 8635
  65975 | 14 | 16 |  16 | 8611
  30390 | 14 | 15 |  77 | 8617
  88516 | 14 | 14 |  13 | 8614
  98317 | 14 | 13 |  86 | 8631
 100866 | 14 | 13 |  68 | 8601
  58959 | 14 | 12 |  15 | 8606
 108224 | 14 | 11 |  41 | 8601
  14494 | 14 | 10 |   8 | 8615
   1141 | 14 |  9 |  64 | 8603
  37781 | 14 |  9 |  56 | 8636
  80573 | 14 |  9 |  45 | 8605
  29081 | 14 |  8 |  31 | 8612
   7419 | 14 |  7 |  18 | 8626
  25579 | 14 |  6 |  74 | 8627
  23561 | 14 |  5 |  81 | 8622
  65587 | 14 |  5 |  79 | 8625
  34723 | 14 |  5 |  71 | 8638
 113887 | 14 |  4 |  26 | 8637
 149584 | 14 |  4 |   7 | 8636
 124357 | 14 |  3 |  95 | 8620
  85203 | 14 |  2 |  99 | 8638
  47029 | 14 |  2 |  73 | 8630
  70398 | 14 |  2 |  19 | 8613
 141890 | 14 |  1 |  63 | 8614
 128988 | 13 |    |   4 | 8609
  38906 | 13 | 20 |  83 | 8609
 119588 | 13 | 16 |  86 | 8615
 137535 | 13 | 16 |  48 | 8640
  47569 | 13 | 14 |  39 | 8624
 137591 | 13 | 13 |  52 | 8621
  99697 | 13 | 12 |  78 | 8619
 105033 | 13 | 12 |   8 | 8614
  41120 | 13 | 11 |  57 | 8625
  75320 | 13 | 10 |  82 | 8634
  82725 | 13 | 10 |  63 | 8611
  17375 | 13 | 10 |  21 | 8619
  44323 | 13 |  9 |  99 | 8600
  77242 | 13 |  9 |  30 | 8601
  68881 | 13 |  5 |  94 | 8609
  36757 | 13 |  3 |  25 | 8601
  33902 | 13 |  1 |  24 | 8629
  39915 | 12 |    |  76 | 8634
  12236 | 12 | 19 |  96 | 8634
 118445 | 12 | 18 |  90 | 8615
  61835 | 12 | 17 |  78 | 8637
 117887 | 12 | 16 |  97 | 8613
  34068 | 12 | 13 |  65 | 8626
 121692 | 12 | 13 |  49 | 8620
 129415 | 12 |  9 |  34 | 8616
  44040 | 12 |  8 |  82 | 8634
 107855 | 12 |  8 |  32 | 8605
  18599 | 12 |  6 |  58 | 8606
  22359 | 12 |  1 |  76 | 8614
 102067 | 11 |    |  44 | 8631
 123909 | 11 | 20 |   4 | 8616
 147101 | 11 | 19 |  61 | 8618
  45334 | 11 | 18 |  77 | 8640
  97724 | 11 | 18 |  75 | 8609
  15240 | 11 | 17 |  91 | 8611
  86886 | 11 | 17 |  75 | 8608
 130878 | 11 | 16 |  86 | 8627
    295 | 11 | 16 |  30 | 8632
  18314 | 11 | 14 |  31 | 8607
  70327 | 11 | 13 |  75 | 8613
 119091 | 11 | 13 |  11 | 8615
   9015 | 11 | 12 |  39 | 8600
 131743 | 11 | 12 |  28 | 8610
  46513 | 11 | 11 |  66 | 8628
  54425 | 11 | 10 |  51 | 8631
  13039 | 11 |  9 |  63 | 8608
  63133 | 11 |  9 |  18 | 8612
 124289 | 11 |  8 |  20 | 8611
  93055 | 11 |  8 |  13 | 8628
  15400 | 11 |  3 |  54 | 8621
   7801 | 11 |  2 |  24 | 8602
  69666 | 11 |  1 |  99 | 8640
 121786 | 11 |  1 |  70 | 8608
  73984 | 10 |    |  23 | 8627
  92542 | 10 | 20 |  96 | 8638
 146084 | 10 | 20 |  21 | 8601
  96701 | 10 | 19 |  99 | 8621
  73580 | 10 | 19 |  79 | 8606
  53416 | 10 | 19 |  45 | 8609
  76876 | 10 | 18 |  98 | 8611
 121393 | 10 | 18 |  37 | 8637
 116024 | 10 | 17 |  97 | 8632
  21709 | 10 | 17 |   9 | 8621
 104074 | 10 | 16 |  30 | 8633
  51386 | 10 | 15 |  57 | 8611
  78094 | 10 | 14 |  54 | 8634
 144949 | 10 | 14 |  11 | 8612
  75551 | 10 | 13 |  89 | 8627
  17515 | 10 | 13 |  48 | 8631
  87139 | 10 | 13 |  14 | 8605
 107768 | 10 | 12 |  43 | 8635
  26213 | 10 | 11 |  51 | 8605
 120241 | 10 | 10 |  57 | 8615
  69877 | 10 | 10 |  40 | 8601
 133367 | 10 |  9 |  16 | 8633
  22505 | 10 |  8 |   1 | 8635
  89048 | 10 |  7 |  51 | 8626
 147003 | 10 |  6 |  87 | 8635
  95467 | 10 |  5 |  93 | 8631
  58302 | 10 |  5 |  76 | 8635
  13195 | 10 |  2 |   4 | 8609
  45137 | 10 |  1 |  59 | 8611
  39791 | 10 |  1 |  32 | 8619
  53899 | 10 |  1 |  17 | 8626
 131119 | 10 |  1 |  15 | 8618
  29179 |  9 |    |  72 | 8606
  68236 |  9 |    |  36 | 8610
 136898 |  9 |    |  25 | 8602
  97908 |  9 | 20 |  68 | 8615
 146612 |  9 | 18 |  67 | 8608
 106140 |  9 | 18 |   8 | 8614
  13135 |  9 | 17 |  74 | 8636
 103161 |  9 | 16 |  77 | 8630
 112741 |  9 | 16 |  50 | 8633
 119375 |  9 | 16 |  35 | 8635
   9868 |  9 | 15 |  58 | 8626
 149396 |  9 | 13 |  22 | 8606
 100235 |  9 | 13 |  15 | 8631
  29257 |  9 | 12 |  23 | 8624
   5325 |  9 | 12 |   2 | 8633
   2110 |  9 | 11 |  37 | 8635
 116549 |  9 | 10 |  14 | 8616
  72834 |  9 |  9 |  21 | 8600
  84515 |  9 |  9 |  15 | 8604
  79352 |  9 |  9 |   6 | 8617
 145340 |  9 |  7 |  48 | 8629
 148153 |  9 |  7 |   9 | 8615
 112620 |  9 |  6 |  42 | 8630
   4603 |  9 |  5 |  63 | 8614
  74227 |  9 |  3 |  26 | 8614
 138440 |  9 |  1 |  78 | 8608
  58305 |  9 |  1 |  77 | 8615
 114750 |  8 | 20 |  98 | 8629
  77111 |  8 | 20 |  80 | 8603
   9317 |  8 | 20 |  52 | 8630
  43770 |  8 | 20 |  30 | 8629
  66075 |  8 | 19 |  52 | 8630
  41804 |  8 | 18 |  42 | 8640
 149261 |  8 | 15 |  71 | 8614
  50426 |  8 | 15 |  48 | 8620
  43176 |  8 | 14 |  78 | 8615
 141678 |  8 | 13 |  22 | 8639
  66995 |  8 | 12 |  56 | 8615
  36605 |  8 | 12 |  44 | 8633
  20293 |  8 | 11 |  27 | 8608
 117547 |  8 | 11 |  14 | 8639
 134604 |  8 |  8 |  56 | 8601
  11896 |  8 |  7 |  13 | 8630
  25692 |  8 |  6 |  65 | 8601
  49361 |  8 |  6 |  49 | 8639
  69121 |  8 |  3 |  65 | 8628
 134470 |  8 |  3 |   7 | 8604
 124854 |  8 |  2 |  99 | 8629
  12402 |  8 |  1 |  10 | 8605
 116211 |  7 |    |  75 | 8638
  24835 |  7 |    |  61 | 8628
  39447 |  7 |    |  51 | 8620
 145700 |  7 |    |  39 | 8610
  61267 |  7 |    |  14 | 8616
 114200 |  7 | 20 |  77 | 8617
 100095 |  7 | 20 |  38 | 8622
  81747 |  7 | 19 |  34 | 8621
  46928 |  7 | 19 |  34 | 8614
 100496 |  7 | 18 |  61 | 8635
 134428 |  7 | 18 |  30 | 8621
  90206 |  7 | 17 |  20 | 8631
   6419 |  7 | 17 |   4 | 8622
  81010 |  7 | 16 |  36 | 8611
   4113 |  7 | 15 |  44 | 8607
   4503 |  7 | 13 |  89 | 8639
 143452 |  7 | 13 |  80 | 8617
  48351 |  7 | 13 |  62 | 8615
 134804 |  7 | 13 |  57 | 8623
  10470 |  7 | 11 |  98 | 8624
   8606 |  7 | 11 |  75 | 8638
   2299 |  7 | 11 |  11 | 8602
 119139 |  7 | 10 |  85 | 8609
  63814 |  7 | 10 |  60 | 8621
  68927 |  7 | 10 |  33 | 8600
 120908 |  7 |  7 |  50 | 8611
  24354 |  7 |  6 |   3 | 8617
 123759 |  7 |  5 |  86 | 8626
  70915 |  7 |  5 |  76 | 8605
  84980 |  7 |  3 |  16 | 8633
 119386 |  7 |  2 |  14 | 8633
  64320 |  7 |  1 |  90 | 8601
 128811 |  7 |  1 |  26 | 8616
   1423 |  6 |    |  83 | 8630
  25635 |  6 |    |  50 | 8617
 100354 |  6 | 19 |  80 | 8617
 111243 |  6 | 18 |  95 | 8603
 109748 |  6 | 18 |  11 | 8640
   1904 |  6 | 17 |  77 | 8604
  36950 |  6 | 16 |  92 | 8604
 124033 |  6 | 16 |  36 | 8633
  75554 |  6 | 16 |  20 | 8628
  12685 |  6 | 15 |  93 | 8618
  45920 |  6 | 15 |  38 | 8630
  25326 |  6 | 14 |  99 | 8609
  98089 |  6 | 14 |  14 | 8607
 129004 |  6 | 13 |  88 | 8612
 128794 |  6 | 11 |  67 | 8640
  95640 |  6 |  9 |  48 | 8611
  64049 |  6 |  8 |  52 | 8640
  16338 |  6 |  7 |  81 | 8638
  83774 |  6 |  7 |  64 | 8601
 149516 |  6 |  6 |   8 | 8621
  12142 |  6 |  4 |  86 | 8636
 147784 |  6 |  3 |  93 | 8623
  59152 |  6 |  3 |  64 | 8637
 132330 |  6 |  2 |  31 | 8613
 145696 |  6 |  2 |  18 | 8607
 142134 |  6 |  2 |   1 | 8602
 109526 |  6 |  1 |  27 | 8613
  49081 |  5 | 20 |  53 | 8615
  97648 |  5 | 18 |  88 | 8627
  17035 |  5 | 18 |  33 | 8629
  41016 |  5 | 14 |  76 | 8600
  23927 |  5 | 14 |  25 | 8613
  69379 |  5 | 13 |  60 | 8605
 112003 |  5 | 11 |  87 | 8625
  53085 |  5 | 10 |  60 | 8625
  33580 |  5 |  5 |  41 | 8608
  37524 |  5 |  4 |  72 | 8626
 102545 |  5 |  2 |  87 | 8632
  22924 |  5 |  1 |  14 | 8635
 119524 |  4 |    |  92 | 8635
  27275 |  4 |    |  74 | 8620
  39072 |  4 |    |  25 | 8627
  66238 |  4 | 19 |  28 | 8625
 120353 |  4 | 19 |   4 | 8617
 143481 |  4 | 18 |  26 | 8601
  96653 |  4 | 17 |  79 | 8635
 136560 |  4 | 16 |  82 | 8639
  31628 |  4 | 16 |  46 | 8608
 103958 |  4 | 16 |  18 | 8634
  62996 |  4 | 15 |  52 | 8610
  91320 |  4 | 14 |  95 | 8610
  12610 |  4 | 14 |  80 | 8605
  52983 |  4 | 13 |  64 | 8619
  16194 |  4 | 13 |  31 | 8636
  66863 |  4 | 10 |  77 | 8606
  98326 |  4 | 10 |  25 | 8617
  28388 |  4 |  9 |  84 | 8623
 102437 |  4 |  9 |  67 | 8629
  39001 |  4 |  9 |  32 | 8612
  76276 |  4 |  8 |  87 | 8638
  10104 |  4 |  7 |  50 | 8631
  22235 |  4 |  7 |  22 | 8640
  76043 |  4 |  6 |  96 | 8625
  58681 |  4 |  4 |  79 | 8636
 118263 |  4 |  4 |  11 | 8622
 131736 |  4 |  3 |  46 | 8615
  75571 |  3 |    |  26 | 8602
  10050 |  3 | 20 |  93 | 8614
   9503 |  3 | 20 |  88 | 8628
  83174 |  3 | 20 |  17 | 8640
 148874 |  3 | 18 |  94 | 8610
  42390 |  3 | 16 |  39 | 8607
 149942 |  3 | 15 |  39 | 8609
 103569 |  3 | 15 |  28 | 8620
 127446 |  3 | 14 |   4 | 8635
  16606 |  3 | 13 |  55 | 8639
  37228 |  3 | 13 |  44 | 8635
  59145 |  3 | 12 |  44 | 8605
 133553 |  3 | 11 |  96 | 8611
   1474 |  3 | 11 |  45 | 8626
 142299 |  3 | 11 |   3 | 8607
  51906 |  3 | 10 |  67 | 8618
   9101 |  3 |  8 |  28 | 8634
 145252 |  3 |  7 |  88 | 8611
 149655 |  3 |  7 |  40 | 8628
  37766 |  3 |  6 |  78 | 8609
  66276 |  3 |  6 |   4 | 8610
  51197 |  3 |  5 |  79 | 8631
  28435 |  3 |  5 |  76 | 8611
  98750 |  3 |  3 |  65 | 8639
 134243 |  3 |  3 |  53 | 8609
  42906 |  3 |  3 |  16 | 8602
  87763 |  3 |  2 |  71 | 8621
  13864 |  3 |  1 |  96 | 8630
  49979 |  3 |  1 |  52 | 8614
   1440 |  3 |  1 |  37 | 8611
  62573 |  2 |    | 100 | 8630
  42561 |  2 |    |  10 | 8621
 104237 |  2 | 20 |  40 | 8602
  85297 |  2 | 20 |   5 | 8637
  90402 |  2 | 19 |  88 | 8613
  55551 |  2 | 19 |  33 | 8628
 134130 |  2 | 19 |  30 | 8640
 111232 |  2 | 19 |  15 | 8638
 139361 |  2 | 16 |  40 | 8615
  29911 |  2 | 12 | 100 | 8639
  93183 |  2 | 12 |  80 | 8624
  36134 |  2 | 12 |  35 | 8633
  99137 |  2 |  9 |  62 | 8619
  30545 |  2 |  9 |   5 | 8619
 136736 |  2 |  7 |  30 | 8612
  80166 |  2 |  6 |  65 | 8610
   4218 |  2 |  6 |   3 | 8619
  60295 |  2 |  5 |  51 | 8609
 111468 |  2 |  5 |  50 | 8636
 127105 |  2 |  5 |  50 | 8608
 112123 |  2 |  5 |  42 | 8626
 124336 |  2 |  3 |  99 | 8625
  98841 |  2 |  3 |  79 | 8609
 118254 |  2 |  2 |  38 | 8609
 130710 |  2 |  2 |  31 | 8628
  29075 |  2 |  1 |  18 | 8604
  33652 |  1 |    |  75 | 8605
  14837 |  1 |    |  63 | 8632
 122684 |  1 |    |  36 | 8620
  44419 |  1 |    |  14 | 8617
  93009 |  1 | 20 |  80 | 8626
 127239 |  1 | 20 |  72 | 8613
 118090 |  1 | 18 |  81 | 8629
  68123 |  1 | 18 |  55 | 8618
  80173 |  1 | 16 |  72 | 8622
 133248 |  1 | 15 |  40 | 8631
 104572 |  1 | 14 |  85 | 8623
 102455 |  1 | 13 |  91 | 8607
  38285 |  1 | 11 |  67 | 8603
 137926 |  1 |  9 |  94 | 8607
  78145 |  1 |  9 |  62 | 8622
  12464 |  1 |  9 |  20 | 8629
 102083 |  1 |  7 |  59 | 8616
  87467 |  1 |  5 |  93 | 8608
  72835 |  1 |  5 |  43 | 8638
  86678 |  1 |  4 |  63 | 8626
  65208 |  1 |  3 |  85 | 8615
  36310 |  1 |  3 |  10 | 8617
  82380 |  1 |  3 |   2 | 8611
  36382 |  1 |  2 |  93 | 8606
  82774 |  1 |  2 |  24 | 8616
  58102 |  1 |  2 |   8 | 8612
  51945 |  1 |  1 |  98 | 8639
   3794 |  1 |  1 |  28 | 8608
(553 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where
  c is not null and d >= 8600 and d <= 8640
order by a desc, b desc, c desc, d desc;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..4678.40 rows=798 width=20) (actual rows=553.00 loops=1)
   Index Cond: ((c IS NOT NULL) AND (d >= 8600) AND (d <= 8640))
   Index Searches: 1
   Buffers: shared hit=1321
(4 rows)

-- Test coverage for _bt_set_startikey IS NOT NULL path:
/*
index 91ff52868..7783fc29f 100644
--- a/src/backend/access/nbtree/nbtutils.c
+++ b/src/backend/access/nbtree/nbtutils.c
@@ -2577,8 +2577,8 @@ _bt_set_startikey(IndexScanDesc scan, BTReadPageState *pstate)
                 Assert(key->sk_flags & SK_SEARCHNOTNULL);

-                if (firstnull || lastnull)
-                    break;      /* unsafe */
+                // if (firstnull || lastnull)
+                //  break;      /* unsafe */
*/
select count(*)
from fuzz_skip_scan
where c is not null;
 count  
--------
 142612
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select count(*)
from fuzz_skip_scan
where c is not null;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=6625.99..6626.01 rows=1 width=8) (actual rows=1.00 loops=1)
   Buffers: shared hit=143225
   ->  Index Scan using fuzz_skip_scan_abcd_nullsfirst on fuzz_skip_scan  (cost=0.42..6226.80 rows=159678 width=0) (actual rows=142612.00 loops=1)
         Index Cond: (c IS NOT NULL)
         Index Searches: 1
         Buffers: shared hit=143225
(6 rows)

-- Test coverage for _bt_set_startikey IS NULL path:
select *
from fuzz_skip_scan
where a >= 7 and a <= 7 and b is null
order by a desc, b desc, c desc, d desc;
   id   | a | b |  c  |  d   
--------+---+---+-----+------
  68936 | 7 |   |     |     
  95154 | 7 |   |     | 9094
 121346 | 7 |   |     | 8715
 110932 | 7 |   |     | 8670
   3534 | 7 |   |     | 7943
  46012 | 7 |   |     | 6633
  78480 | 7 |   |     | 6269
  88148 | 7 |   |     | 6243
  64947 | 7 |   |     | 5592
 136791 | 7 |   |     | 5557
  15107 | 7 |   |     | 5538
 111118 | 7 |   |     | 4934
 137834 | 7 |   |     | 4831
  41534 | 7 |   |     | 3043
 144594 | 7 |   |     | 2344
 114071 | 7 |   |     | 1857
  29217 | 7 |   | 100 | 8267
  48146 | 7 |   | 100 | 5650
 109384 | 7 |   | 100 | 4914
 101263 | 7 |   | 100 | 4495
  71869 | 7 |   | 100 | 1971
 138749 | 7 |   | 100 | 1139
  35097 | 7 |   |  99 | 5562
 111826 | 7 |   |  99 | 4675
 137014 | 7 |   |  99 | 4080
  25303 | 7 |   |  99 | 1794
 119310 | 7 |   |  98 | 9059
  47535 | 7 |   |  98 | 7284
  69706 | 7 |   |  98 | 4372
  67297 | 7 |   |  97 | 9771
 138869 | 7 |   |  97 | 6199
   4327 | 7 |   |  97 | 2817
 127529 | 7 |   |  96 | 9957
  41937 | 7 |   |  95 | 9041
  25065 | 7 |   |  95 | 6748
  42493 | 7 |   |  95 | 4439
 137989 | 7 |   |  95 | 2960
  67137 | 7 |   |  95 |  462
  43146 | 7 |   |  94 | 8062
  35300 | 7 |   |  94 | 5843
  53558 | 7 |   |  93 | 9627
  16350 | 7 |   |  93 | 7635
 111160 | 7 |   |  93 | 2287
 122981 | 7 |   |  93 |  911
  35840 | 7 |   |  92 |     
  39300 | 7 |   |  92 | 3351
  60083 | 7 |   |  91 | 2390
 148119 | 7 |   |  90 | 6028
  16368 | 7 |   |  89 | 9578
  85223 | 7 |   |  89 | 1176
  89118 | 7 |   |  88 | 7089
  20282 | 7 |   |  88 | 5617
 147424 | 7 |   |  88 | 5186
 109003 | 7 |   |  87 | 9916
 139644 | 7 |   |  87 | 7305
 105223 | 7 |   |  87 | 6432
  46490 | 7 |   |  87 | 5173
 101442 | 7 |   |  87 | 1961
  41896 | 7 |   |  86 | 9846
  57886 | 7 |   |  86 | 6008
 137271 | 7 |   |  86 | 4715
 115599 | 7 |   |  86 | 4379
  65286 | 7 |   |  86 | 3535
 106628 | 7 |   |  86 | 2359
 142623 | 7 |   |  86 |  820
 108275 | 7 |   |  85 | 6703
 106447 | 7 |   |  85 | 1632
  43374 | 7 |   |  84 | 4412
 119884 | 7 |   |  84 |  516
 142938 | 7 |   |  83 |     
  49079 | 7 |   |  83 | 7171
 103193 | 7 |   |  83 | 6143
  55426 | 7 |   |  83 | 5791
  30454 | 7 |   |  83 | 4289
  74113 | 7 |   |  83 | 4126
  40809 | 7 |   |  83 | 3388
  54302 | 7 |   |  83 | 2171
  14941 | 7 |   |  83 | 1654
  24792 | 7 |   |  82 | 5922
  73997 | 7 |   |  81 | 8032
 124439 | 7 |   |  81 | 6585
  29190 | 7 |   |  81 | 5923
 132493 | 7 |   |  81 | 5821
  55907 | 7 |   |  81 | 4748
 142896 | 7 |   |  81 | 2487
  10419 | 7 |   |  79 | 8650
 115094 | 7 |   |  78 | 2151
  94686 | 7 |   |  77 | 8907
  31130 | 7 |   |  77 | 6312
 113800 | 7 |   |  77 | 6158
 115470 | 7 |   |  77 | 4222
  35144 | 7 |   |  76 | 9891
 125139 | 7 |   |  76 | 9457
  23254 | 7 |   |  76 | 8676
  24508 | 7 |   |  76 | 7488
  45683 | 7 |   |  76 | 4313
  78772 | 7 |   |  76 | 3821
  14367 | 7 |   |  76 | 2553
 112606 | 7 |   |  75 | 8696
 116211 | 7 |   |  75 | 8638
   1016 | 7 |   |  75 | 8121
  72319 | 7 |   |  75 | 6406
  10264 | 7 |   |  75 | 1773
  21223 | 7 |   |  74 | 9038
  75045 | 7 |   |  74 | 7599
  99130 | 7 |   |  74 | 7481
    334 | 7 |   |  74 | 3419
  87835 | 7 |   |  74 | 1895
 122743 | 7 |   |  73 | 8214
 142413 | 7 |   |  73 | 6581
 145792 | 7 |   |  73 | 2280
  52950 | 7 |   |  72 | 5870
  91761 | 7 |   |  72 | 5602
  31296 | 7 |   |  72 | 3778
   8223 | 7 |   |  71 | 7214
 108201 | 7 |   |  71 | 3492
 115870 | 7 |   |  71 | 2017
 131585 | 7 |   |  71 | 1847
   7770 | 7 |   |  71 | 1501
  99488 | 7 |   |  71 | 1432
 100696 | 7 |   |  71 |  269
 100493 | 7 |   |  70 | 5810
  22740 | 7 |   |  70 | 4415
  32323 | 7 |   |  69 | 9974
  90020 | 7 |   |  69 | 6273
 134662 | 7 |   |  69 | 5036
  94584 | 7 |   |  69 | 1730
   8147 | 7 |   |  68 | 7681
 111117 | 7 |   |  68 | 5391
 146420 | 7 |   |  68 | 1381
  50617 | 7 |   |  67 | 7358
 138964 | 7 |   |  67 | 6577
  66087 | 7 |   |  67 | 2905
  14180 | 7 |   |  66 | 9915
  16636 | 7 |   |  66 | 5748
 101952 | 7 |   |  66 | 5189
  73837 | 7 |   |  65 | 9156
  12852 | 7 |   |  65 | 1504
  95603 | 7 |   |  64 |     
 141663 | 7 |   |  64 | 3554
  34464 | 7 |   |  64 | 2959
  28679 | 7 |   |  64 |  832
  54692 | 7 |   |  64 |  726
  32498 | 7 |   |  63 | 5905
 117077 | 7 |   |  63 | 5238
  17811 | 7 |   |  63 | 4781
 103745 | 7 |   |  62 | 9738
  24835 | 7 |   |  61 | 8628
  79355 | 7 |   |  61 | 4655
 117976 | 7 |   |  60 | 6993
  22152 | 7 |   |  60 | 5511
  48729 | 7 |   |  58 | 9695
  25542 | 7 |   |  58 | 6717
  75290 | 7 |   |  58 | 2601
 137978 | 7 |   |  58 | 2360
 131747 | 7 |   |  57 | 4417
  60079 | 7 |   |  57 | 1607
 140718 | 7 |   |  56 | 9423
  87740 | 7 |   |  56 | 4199
 141778 | 7 |   |  56 | 2748
  83958 | 7 |   |  56 | 1244
 126750 | 7 |   |  56 | 1040
  92878 | 7 |   |  55 | 6308
  26809 | 7 |   |  55 | 2561
  32698 | 7 |   |  54 | 5770
 102061 | 7 |   |  53 | 6364
  35874 | 7 |   |  53 | 4647
 129713 | 7 |   |  53 | 4200
 111995 | 7 |   |  53 |  982
  58299 | 7 |   |  52 |     
  58577 | 7 |   |  52 | 8906
  88509 | 7 |   |  52 | 8103
 121402 | 7 |   |  52 | 2472
  39410 | 7 |   |  52 | 1504
  65355 | 7 |   |  51 | 9909
  39447 | 7 |   |  51 | 8620
  71400 | 7 |   |  51 | 6023
 114377 | 7 |   |  51 | 3572
  10226 | 7 |   |  51 | 3534
  75852 | 7 |   |  51 | 2915
  11919 | 7 |   |  50 |     
  58051 | 7 |   |  50 | 5784
 133335 | 7 |   |  50 |  726
  46906 | 7 |   |  50 |  610
 112321 | 7 |   |  48 | 4568
 109797 | 7 |   |  48 | 1971
  25871 | 7 |   |  47 | 8143
  27660 | 7 |   |  46 | 8707
 128382 | 7 |   |  46 | 8533
  90257 | 7 |   |  46 | 5530
  40013 | 7 |   |  46 | 5295
  43066 | 7 |   |  46 | 4893
  55631 | 7 |   |  46 | 4169
  27397 | 7 |   |  45 | 9842
  32622 | 7 |   |  44 | 9101
 110104 | 7 |   |  44 | 6887
   6432 | 7 |   |  44 | 2613
  29183 | 7 |   |  44 | 2159
  76502 | 7 |   |  43 | 7596
  48203 | 7 |   |  43 | 2949
  65139 | 7 |   |  42 | 8499
  46102 | 7 |   |  42 | 6619
  66756 | 7 |   |  42 | 6234
  88300 | 7 |   |  42 | 3979
  57797 | 7 |   |  42 | 3123
  48343 | 7 |   |  42 | 1349
  98740 | 7 |   |  41 | 7975
 107650 | 7 |   |  41 | 7192
  75992 | 7 |   |  41 |  104
  86351 | 7 |   |  40 |     
  92139 | 7 |   |  40 | 6019
  59110 | 7 |   |  40 | 3528
  66923 | 7 |   |  40 | 1454
  80227 | 7 |   |  39 | 9090
 145700 | 7 |   |  39 | 8610
 107171 | 7 |   |  39 | 6561
  29607 | 7 |   |  39 | 6116
  64423 | 7 |   |  39 | 5587
   1716 | 7 |   |  38 | 2901
 100196 | 7 |   |  38 |   63
 148514 | 7 |   |  37 |     
 141518 | 7 |   |  37 | 6387
  20104 | 7 |   |  37 | 5851
 142306 | 7 |   |  37 | 2687
     81 | 7 |   |  37 | 2234
  14188 | 7 |   |  36 |     
  57707 | 7 |   |  35 | 7554
 109372 | 7 |   |  35 | 7349
 107521 | 7 |   |  35 | 1289
  12266 | 7 |   |  35 | 1225
  93859 | 7 |   |  35 |  318
  11956 | 7 |   |  34 | 6073
 146761 | 7 |   |  34 |  163
 134311 | 7 |   |  33 | 4334
  35953 | 7 |   |  33 | 2867
 105274 | 7 |   |  32 | 9401
   7402 | 7 |   |  32 | 7538
  62836 | 7 |   |  32 | 7511
 123618 | 7 |   |  32 | 6175
  61047 | 7 |   |  32 | 1710
  12317 | 7 |   |  31 | 8874
 107749 | 7 |   |  31 | 3174
  23578 | 7 |   |  30 | 4579
  15215 | 7 |   |  30 | 4330
 138277 | 7 |   |  30 | 3643
  89323 | 7 |   |  30 | 3336
  35463 | 7 |   |  29 | 5691
 117412 | 7 |   |  29 | 4940
  34657 | 7 |   |  29 | 3487
 126499 | 7 |   |  28 | 2889
 137307 | 7 |   |  28 | 2607
   9259 | 7 |   |  28 | 2396
  32768 | 7 |   |  28 | 1702
  86309 | 7 |   |  27 | 8145
  87040 | 7 |   |  27 | 7895
  54318 | 7 |   |  27 | 7052
 102374 | 7 |   |  27 | 4225
  35742 | 7 |   |  26 |     
 122863 | 7 |   |  26 |     
  67227 | 7 |   |  26 | 5829
  32914 | 7 |   |  25 |     
 138376 | 7 |   |  25 | 7786
 111152 | 7 |   |  25 | 3957
  29738 | 7 |   |  25 | 2557
  25986 | 7 |   |  24 |     
  39207 | 7 |   |  24 | 7873
  44808 | 7 |   |  23 | 6519
  53001 | 7 |   |  23 | 4217
  10630 | 7 |   |  22 | 5336
  78057 | 7 |   |  22 | 4431
 129827 | 7 |   |  22 | 3748
    521 | 7 |   |  21 | 6336
  88628 | 7 |   |  21 | 5128
  98968 | 7 |   |  21 | 1515
 144050 | 7 |   |  20 | 9907
 142631 | 7 |   |  20 | 7329
 149505 | 7 |   |  19 | 7175
  25850 | 7 |   |  19 | 6080
 128555 | 7 |   |  19 |   47
  82536 | 7 |   |  18 | 9228
  26513 | 7 |   |  17 | 7135
 110011 | 7 |   |  17 | 7037
  50826 | 7 |   |  16 |     
 136552 | 7 |   |  16 | 9573
 128841 | 7 |   |  16 | 7996
  67300 | 7 |   |  16 | 6072
 142296 | 7 |   |  16 | 3528
 106081 | 7 |   |  16 |  752
  33392 | 7 |   |  15 | 8811
 127310 | 7 |   |  15 | 7743
 122839 | 7 |   |  15 | 7665
 124578 | 7 |   |  15 | 1157
  61267 | 7 |   |  14 | 8616
  13253 | 7 |   |  14 | 7942
 129535 | 7 |   |  14 |  793
  48294 | 7 |   |  13 | 1662
  41286 | 7 |   |  12 | 8426
 129000 | 7 |   |  12 | 3947
  83364 | 7 |   |  12 | 2862
  54136 | 7 |   |  12 | 2332
  48119 | 7 |   |  11 | 9279
 126822 | 7 |   |  11 | 8355
  99126 | 7 |   |  11 | 5937
  60013 | 7 |   |  11 | 4616
  53179 | 7 |   |  10 | 2041
  36037 | 7 |   |   9 | 8026
  31198 | 7 |   |   9 | 7054
  92948 | 7 |   |   9 | 6064
     31 | 7 |   |   8 | 9993
 100241 | 7 |   |   8 | 9198
  33428 | 7 |   |   8 | 8006
  74178 | 7 |   |   8 | 7652
  92208 | 7 |   |   8 | 4499
  59926 | 7 |   |   8 |  678
  71761 | 7 |   |   7 | 9320
 118859 | 7 |   |   7 | 4124
 135485 | 7 |   |   7 | 2802
  94968 | 7 |   |   7 | 1637
 146641 | 7 |   |   6 | 5124
  62818 | 7 |   |   6 | 4849
  12215 | 7 |   |   6 | 1677
 112400 | 7 |   |   5 | 9543
   5612 | 7 |   |   4 | 6677
  44683 | 7 |   |   4 | 4685
  53037 | 7 |   |   4 | 4677
  59595 | 7 |   |   3 | 8293
   3495 | 7 |   |   3 | 7582
 142446 | 7 |   |   3 | 2976
  90013 | 7 |   |   3 | 2773
  30346 | 7 |   |   3 |  996
   3786 | 7 |   |   2 | 8209
 113437 | 7 |   |   2 | 6834
  77640 | 7 |   |   2 | 5274
  22060 | 7 |   |   2 | 1811
  62259 | 7 |   |   1 | 3006
  92380 | 7 |   |   1 | 2608
(336 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where a >= 7 and a <= 7 and b is null
order by a desc, b desc, c desc, d desc;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..26.48 rows=4 width=20) (actual rows=336.00 loops=1)
   Index Cond: ((a >= 7) AND (a <= 7) AND (b IS NULL))
   Index Searches: 1
   Buffers: shared hit=341
(4 rows)

-- More _bt_set_startikey test coverage, for simple = keys (should return no
-- rows, buggy code can return a row):
select *
from fuzz_skip_scan
where a = 12 and b = 9 and c is not null and d >= 4730 and d <= 4780
order by a desc, b desc, c desc, d desc;
 id | a | b | c | d 
----+---+---+---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where a = 12 and b = 9 and c is not null and d >= 4730 and d <= 4780
order by a desc, b desc, c desc, d desc;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..4.50 rows=1 width=20) (actual rows=0.00 loops=1)
   Index Cond: ((a = 12) AND (b = 9) AND (c IS NOT NULL) AND (d >= 4730) AND (d <= 4780))
   Index Searches: 1
   Buffers: shared hit=5
(4 rows)

-- 2025-06-08 10:51
-- Test case showing that I was wrong to remove forcenonrequired argument from
-- _bt_check_rowcompare function, since it leads to an assertion failure here:
select a, b, c, d
from fuzz_skip_scan
where b is not null and (c, d) < (60, 0)
order by a, b, c, d
limit 200 offset 80_000;
 a | b  | c  |  d   
---+----+----+------
   | 20 | 14 | 8124
   | 20 | 14 | 9683
   | 20 | 15 |  676
   | 20 | 15 | 2364
   | 20 | 15 | 4866
   | 20 | 15 | 9374
   | 20 | 15 | 9508
   | 20 | 16 | 2910
   | 20 | 17 |   24
   | 20 | 17 | 1043
   | 20 | 17 | 3931
   | 20 | 17 | 4723
   | 20 | 17 | 8855
   | 20 | 17 | 9617
   | 20 | 18 | 1750
   | 20 | 18 | 1825
   | 20 | 18 | 3434
   | 20 | 18 | 3677
   | 20 | 18 | 3846
   | 20 | 18 | 6973
   | 20 | 18 | 9343
   | 20 | 19 | 2217
   | 20 | 19 | 2687
   | 20 | 19 | 4254
   | 20 | 20 |  269
   | 20 | 20 | 3181
   | 20 | 20 | 4035
   | 20 | 20 | 7067
   | 20 | 20 | 7912
   | 20 | 20 | 8837
   | 20 | 21 | 3917
   | 20 | 21 | 5847
   | 20 | 21 | 7393
   | 20 | 21 | 8253
   | 20 | 22 |  213
   | 20 | 22 | 6775
   | 20 | 22 | 7514
   | 20 | 22 | 8065
   | 20 | 22 | 8826
   | 20 | 23 | 1228
   | 20 | 23 | 4376
   | 20 | 23 | 7583
   | 20 | 23 | 8647
   | 20 | 23 | 8973
   | 20 | 23 |     
   | 20 | 24 | 9058
   | 20 | 25 | 4642
   | 20 | 25 | 6049
   | 20 | 25 | 7115
   | 20 | 25 | 9739
   | 20 | 26 | 4364
   | 20 | 26 | 9313
   | 20 | 27 | 5996
   | 20 | 27 | 6115
   | 20 | 28 | 9276
   | 20 | 28 | 9556
   | 20 | 28 |     
   | 20 | 29 |  534
   | 20 | 29 | 4761
   | 20 | 29 | 4831
   | 20 | 30 | 4231
   | 20 | 30 | 6076
   | 20 | 30 | 6789
   | 20 | 30 | 6892
   | 20 | 30 | 7480
   | 20 | 30 | 8764
   | 20 | 30 |     
   | 20 | 31 | 7879
   | 20 | 32 |  254
   | 20 | 32 |  352
   | 20 | 32 | 4579
   | 20 | 32 | 8909
   | 20 | 32 | 9165
   | 20 | 33 |  585
   | 20 | 33 | 8009
   | 20 | 33 | 8702
   | 20 | 34 | 4309
   | 20 | 34 | 6733
   | 20 | 34 | 9565
   | 20 | 34 |     
   | 20 | 35 | 5706
   | 20 | 35 | 9469
   | 20 | 36 |  848
   | 20 | 36 | 2285
   | 20 | 36 | 2509
   | 20 | 36 | 5894
   | 20 | 36 | 6338
   | 20 | 37 |  355
   | 20 | 37 | 4668
   | 20 | 37 | 4728
   | 20 | 37 | 7248
   | 20 | 37 | 9283
   | 20 | 38 |  830
   | 20 | 38 | 1073
   | 20 | 38 | 5793
   | 20 | 38 | 8839
   | 20 | 39 | 1933
   | 20 | 40 | 5780
   | 20 | 40 | 7798
   | 20 | 40 | 8153
   | 20 | 42 | 3166
   | 20 | 42 | 3668
   | 20 | 42 | 5345
   | 20 | 42 |     
   | 20 | 43 | 7249
   | 20 | 43 | 7513
   | 20 | 43 | 8148
   | 20 | 43 | 9109
   | 20 | 44 |  388
   | 20 | 44 | 2470
   | 20 | 45 | 3247
   | 20 | 45 | 4327
   | 20 | 45 | 6505
   | 20 | 46 |  907
   | 20 | 46 | 1035
   | 20 | 46 | 3827
   | 20 | 46 | 5021
   | 20 | 46 | 7581
   | 20 | 46 | 8831
   | 20 | 47 |  687
   | 20 | 47 |  787
   | 20 | 47 |  874
   | 20 | 47 |  922
   | 20 | 47 | 7808
   | 20 | 48 |  312
   | 20 | 48 | 4352
   | 20 | 48 | 7809
   | 20 | 48 | 8043
   | 20 | 48 | 8418
   | 20 | 49 |  767
   | 20 | 49 | 3234
   | 20 | 49 |     
   | 20 | 50 | 2194
   | 20 | 50 | 6603
   | 20 | 50 | 8802
   | 20 | 51 | 1060
   | 20 | 51 | 2537
   | 20 | 51 | 4331
   | 20 | 51 | 6291
   | 20 | 51 | 6639
   | 20 | 51 | 9878
   | 20 | 51 |     
   | 20 | 52 | 1742
   | 20 | 52 | 2374
   | 20 | 52 | 2718
   | 20 | 52 | 2847
   | 20 | 52 | 4336
   | 20 | 52 | 4938
   | 20 | 52 | 5739
   | 20 | 52 | 5795
   | 20 | 52 | 7912
   | 20 | 52 | 8478
   | 20 | 53 | 7030
   | 20 | 53 | 7435
   | 20 | 53 | 7515
   | 20 | 54 | 7429
   | 20 | 54 | 7470
   | 20 | 54 | 9079
   | 20 | 55 | 1904
   | 20 | 55 | 4214
   | 20 | 55 | 7926
   | 20 | 55 | 9101
   | 20 | 56 |  436
   | 20 | 56 | 3030
   | 20 | 56 | 6108
   | 20 | 56 | 7981
   | 20 | 56 | 9817
   | 20 | 56 | 9858
   | 20 | 57 | 3230
   | 20 | 57 | 5802
   | 20 | 58 | 1975
   | 20 | 58 | 3958
   | 20 | 58 |     
   | 20 | 59 | 1966
   | 20 | 59 | 4436
   | 20 | 59 | 5344
   | 20 | 59 | 6254
   | 20 | 59 |     
   | 20 | 59 |     
(179 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b, c, d
from fuzz_skip_scan
where b is not null and (c, d) < (60, 0)
order by a, b, c, d
limit 200 offset 80_000;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5567.48..5567.58 rows=1 width=16) (actual rows=179.00 loops=1)
   Buffers: shared hit=80939
   ->  Index Scan using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..5567.48 rows=53226 width=16) (actual rows=80179.00 loops=1)
         Index Cond: ((b IS NOT NULL) AND (ROW(c, d) < ROW(60, 0)))
         Index Searches: 48
         Buffers: shared hit=80939
(6 rows)

-- 2025-06-11 17:21
-- Similar though crashier test case to the above forcenonrequired test case
--
-- This test case will actually segfault on a release build due to pstate NULL
-- pointer dereference inside _bt_advance_array_keys.  Keep it around, just in
-- case.
select *
from fuzz_skip_scan
where a = 19 and (c, d) >=(54, 5976) and c <= 58
order by a desc, b desc, c desc, d desc;
   id   | a  | b  | c  |  d   
--------+----+----+----+------
   5250 | 19 |    | 58 |     
  17263 | 19 |    | 58 | 6660
  13060 | 19 |    | 58 | 6032
  48949 | 19 |    | 57 | 7452
 128740 | 19 |    | 57 | 6861
  83445 | 19 |    | 57 | 3480
  15051 | 19 |    | 56 | 8275
 105893 | 19 |    | 56 | 4650
  55476 | 19 |    | 56 | 3241
 116936 | 19 |    | 55 | 9391
  21651 | 19 |    | 55 | 9155
  82728 | 19 |    | 55 | 7910
  38707 | 19 |    | 55 | 2173
 140057 | 19 |    | 55 |  162
 117264 | 19 |    | 54 | 8676
 133587 | 19 | 20 | 58 | 9790
 138213 | 19 | 20 | 58 | 1595
  38873 | 19 | 20 | 57 | 2571
  27194 | 19 | 20 | 56 | 5686
  71185 | 19 | 20 | 56 | 5099
    715 | 19 | 20 | 56 | 4915
  36404 | 19 | 20 | 56 | 4253
  14747 | 19 | 20 | 56 | 4193
  53016 | 19 | 20 | 55 | 4481
 103655 | 19 | 20 | 55 | 3917
  29473 | 19 | 20 | 54 | 7371
  18236 | 19 | 19 | 58 | 9577
  54276 | 19 | 19 | 58 | 6907
 145023 | 19 | 19 | 58 | 4635
  71000 | 19 | 19 | 58 | 4045
 137071 | 19 | 19 | 58 | 3997
  61938 | 19 | 19 | 57 | 8506
  35377 | 19 | 19 | 57 | 3472
  70613 | 19 | 19 | 57 |  158
  96570 | 19 | 19 | 56 |  965
  11732 | 19 | 19 | 55 |     
  68956 | 19 | 19 | 55 | 7612
  56105 | 19 | 19 | 54 | 9886
 147050 | 19 | 18 | 58 | 8033
  32984 | 19 | 18 | 57 | 9091
  66036 | 19 | 18 | 57 | 6255
 108108 | 19 | 18 | 57 | 5029
 110258 | 19 | 18 | 57 | 4919
  35392 | 19 | 18 | 57 | 4077
  55259 | 19 | 18 | 57 |  826
  47747 | 19 | 18 | 56 | 8718
   9948 | 19 | 18 | 56 | 6713
  66300 | 19 | 18 | 56 | 6027
 133897 | 19 | 18 | 56 | 2683
  92685 | 19 | 18 | 56 |  763
  10034 | 19 | 18 | 55 | 9163
 102859 | 19 | 18 | 55 | 5804
  47110 | 19 | 18 | 55 | 5399
  15678 | 19 | 18 | 55 | 2630
 111715 | 19 | 18 | 54 | 9537
  26933 | 19 | 18 | 54 | 8015
 123309 | 19 | 17 | 58 | 6625
  75327 | 19 | 17 | 57 | 1687
  16396 | 19 | 17 | 56 | 9894
  50473 | 19 | 17 | 56 | 8678
 143765 | 19 | 17 | 56 | 7131
 149162 | 19 | 17 | 56 | 6528
  46376 | 19 | 17 | 56 | 2098
 115346 | 19 | 17 | 55 |     
   1985 | 19 | 17 | 55 | 8546
  22065 | 19 | 17 | 55 | 1946
  68055 | 19 | 17 | 54 | 8542
  11016 | 19 | 16 | 58 | 7597
 142684 | 19 | 16 | 58 | 7446
 102871 | 19 | 16 | 58 | 7388
   7791 | 19 | 16 | 57 | 6297
   6476 | 19 | 16 | 57 | 5648
 108192 | 19 | 16 | 57 | 1398
   9895 | 19 | 16 | 57 |  179
  54626 | 19 | 16 | 56 | 7778
 133003 | 19 | 16 | 56 | 7747
  92244 | 19 | 16 | 56 | 6688
  52012 | 19 | 16 | 56 | 5706
 101941 | 19 | 16 | 56 | 3948
  37464 | 19 | 16 | 56 | 1161
  63528 | 19 | 16 | 55 | 9702
  74596 | 19 | 16 | 55 | 9271
 140699 | 19 | 16 | 54 | 7854
 146903 | 19 | 15 | 58 | 8765
  45148 | 19 | 15 | 58 |    8
 133571 | 19 | 15 | 57 | 5177
  92284 | 19 | 15 | 57 | 3855
  26146 | 19 | 15 | 57 | 3350
  21348 | 19 | 15 | 56 | 7331
  89774 | 19 | 15 | 56 | 6272
  58429 | 19 | 15 | 56 |  339
  28131 | 19 | 15 | 55 | 8472
   9935 | 19 | 15 | 55 | 8410
 108387 | 19 | 15 | 55 | 7854
 148946 | 19 | 15 | 55 | 4813
  29067 | 19 | 15 | 55 | 3961
  26229 | 19 | 15 | 54 | 7278
  77036 | 19 | 14 | 58 | 3832
  81435 | 19 | 14 | 58 | 2276
  82939 | 19 | 14 | 58 | 1343
  43154 | 19 | 14 | 57 | 9064
 148836 | 19 | 14 | 57 | 6849
 105448 | 19 | 14 | 57 | 4875
  76805 | 19 | 14 | 56 | 7815
  31574 | 19 | 14 | 56 | 4929
  17155 | 19 | 14 | 56 | 1545
  86431 | 19 | 14 | 55 | 9268
  74723 | 19 | 14 | 55 | 5116
 148018 | 19 | 14 | 55 | 2326
  67018 | 19 | 14 | 55 | 1548
 119534 | 19 | 14 | 54 | 9049
  59206 | 19 | 13 | 58 | 8632
 121750 | 19 | 13 | 58 | 3372
  57155 | 19 | 13 | 58 |  882
 112385 | 19 | 13 | 57 |     
  31991 | 19 | 13 | 57 | 8097
  75689 | 19 | 13 | 57 | 7865
  24176 | 19 | 13 | 57 | 4258
  55106 | 19 | 13 | 57 |  256
  47252 | 19 | 13 | 56 | 9746
 141474 | 19 | 13 | 56 | 7012
  37783 | 19 | 13 | 56 | 1838
  64772 | 19 | 13 | 55 |     
  27771 | 19 | 13 | 55 | 9020
  11411 | 19 | 13 | 55 | 1469
   6126 | 19 | 13 | 55 |   74
  90767 | 19 | 13 | 54 | 7172
  55463 | 19 | 13 | 54 | 7152
 102149 | 19 | 12 | 58 | 8962
  95092 | 19 | 12 | 58 | 5928
  71609 | 19 | 12 | 58 |  313
 146158 | 19 | 12 | 57 |     
  36062 | 19 | 12 | 56 | 3548
  84713 | 19 | 12 | 55 | 4933
  33300 | 19 | 12 | 54 | 8676
  41736 | 19 | 12 | 54 | 7807
  90429 | 19 | 11 | 57 | 8298
  93616 | 19 | 11 | 57 | 1962
  14147 | 19 | 11 | 57 | 1797
  57678 | 19 | 11 | 57 |  869
 115878 | 19 | 11 | 56 | 5115
 140228 | 19 | 11 | 55 |     
  29139 | 19 | 11 | 55 | 9463
 124705 | 19 | 11 | 55 | 5834
  49605 | 19 | 11 | 55 | 5461
  80784 | 19 | 11 | 55 | 4282
 145784 | 19 | 10 | 58 | 6854
 142336 | 19 | 10 | 58 | 4915
 111326 | 19 | 10 | 58 | 3917
  67440 | 19 | 10 | 58 | 2552
 114963 | 19 | 10 | 57 | 8460
  86566 | 19 | 10 | 57 | 7190
  15884 | 19 | 10 | 57 | 5394
 142553 | 19 | 10 | 57 | 4239
  85128 | 19 | 10 | 57 | 3396
 125110 | 19 | 10 | 57 | 1268
  66487 | 19 | 10 | 56 | 9499
 125093 | 19 | 10 | 56 | 4526
  86954 | 19 | 10 | 55 | 9815
 103823 | 19 | 10 | 55 | 4825
  28562 | 19 |  9 | 58 | 7966
  81013 | 19 |  9 | 58 | 7406
 118427 | 19 |  9 | 58 | 6770
  89592 | 19 |  9 | 58 | 5706
 114579 | 19 |  9 | 58 | 4602
  45397 | 19 |  9 | 57 | 3883
 116105 | 19 |  9 | 57 | 2546
  58317 | 19 |  9 | 56 | 6777
   4167 | 19 |  9 | 56 | 6068
 123093 | 19 |  9 | 56 | 5085
 125183 | 19 |  9 | 56 | 4988
  97249 | 19 |  9 | 56 | 2118
  53231 | 19 |  9 | 56 | 1766
  23831 | 19 |  9 | 55 |  188
 112669 | 19 |  9 | 54 | 9339
 134195 | 19 |  8 | 58 | 5180
 134595 | 19 |  8 | 58 |  979
  51630 | 19 |  8 | 57 | 4797
 102917 | 19 |  8 | 57 | 4714
  20101 | 19 |  8 | 57 | 2440
  18716 | 19 |  8 | 56 | 9062
  42729 | 19 |  8 | 56 | 5802
  74536 | 19 |  8 | 56 | 4335
  25639 | 19 |  8 | 56 | 1539
 118556 | 19 |  8 | 56 |  769
  53178 | 19 |  8 | 55 | 9573
  94292 | 19 |  8 | 55 | 6988
 114510 | 19 |  8 | 55 | 6789
  71043 | 19 |  8 | 55 | 4592
 113299 | 19 |  8 | 55 | 3946
 111698 | 19 |  8 | 54 | 9963
   9663 | 19 |  8 | 54 | 9738
  17928 | 19 |  8 | 54 | 9697
  34655 | 19 |  8 | 54 | 8390
 136539 | 19 |  8 | 54 | 6425
 128277 | 19 |  7 | 58 |  240
 119839 | 19 |  7 | 57 | 6598
  12524 | 19 |  7 | 56 | 7865
  44061 | 19 |  7 | 56 | 6255
 122996 | 19 |  7 | 56 | 5024
  18831 | 19 |  7 | 56 | 2821
  17488 | 19 |  7 | 56 |  957
 140095 | 19 |  7 | 56 |  359
 143594 | 19 |  7 | 55 |     
  90114 | 19 |  7 | 55 | 6831
  51948 | 19 |  7 | 55 | 6606
  50923 | 19 |  7 | 55 | 2828
  93444 | 19 |  7 | 55 | 2741
  75577 | 19 |  7 | 54 | 6210
  99415 | 19 |  6 | 58 |     
 123132 | 19 |  6 | 58 | 7678
  71404 | 19 |  6 | 57 | 5655
  67572 | 19 |  6 | 57 | 3795
  91052 | 19 |  6 | 57 | 3416
   8676 | 19 |  6 | 57 | 2362
 126230 | 19 |  6 | 56 | 5171
 142925 | 19 |  6 | 55 | 5927
 149028 | 19 |  6 | 54 | 8972
  86326 | 19 |  6 | 54 | 7123
  11218 | 19 |  5 | 58 | 5484
  99470 | 19 |  5 | 58 | 5022
 112419 | 19 |  5 | 58 | 3884
  23987 | 19 |  5 | 58 | 2421
 148687 | 19 |  5 | 57 | 8116
  71165 | 19 |  5 | 57 | 4649
 134821 | 19 |  5 | 56 | 7542
 139991 | 19 |  5 | 55 |     
  38049 | 19 |  5 | 55 |     
 146629 | 19 |  5 | 55 | 7283
 148936 | 19 |  5 | 55 | 2820
 144743 | 19 |  5 | 55 | 1903
 148451 | 19 |  4 | 58 |     
  10217 | 19 |  4 | 58 | 6746
  17272 | 19 |  4 | 58 | 5958
  31117 | 19 |  4 | 57 | 9958
  94575 | 19 |  4 | 57 | 9889
 139583 | 19 |  4 | 57 | 9697
  52453 | 19 |  4 | 57 | 7987
 120306 | 19 |  4 | 57 | 6336
  51661 | 19 |  4 | 57 | 5994
  16823 | 19 |  4 | 57 | 4121
   2838 | 19 |  4 | 57 | 1851
  31215 | 19 |  4 | 56 |     
 104939 | 19 |  4 | 56 | 6320
  42845 | 19 |  4 | 55 | 9856
 130926 | 19 |  4 | 55 | 9784
 120979 | 19 |  4 | 55 | 9386
  43094 | 19 |  4 | 55 | 6149
  19835 | 19 |  4 | 55 | 5028
 120483 | 19 |  4 | 54 | 8004
  86480 | 19 |  3 | 58 | 8871
   8883 | 19 |  3 | 58 | 8171
  54267 | 19 |  3 | 58 | 7167
  98566 | 19 |  3 | 58 | 3642
  31922 | 19 |  3 | 58 | 2864
 139334 | 19 |  3 | 57 | 9911
  23053 | 19 |  3 | 57 | 9229
  66703 | 19 |  3 | 57 | 4292
  35854 | 19 |  3 | 57 | 1562
  86408 | 19 |  3 | 56 | 9362
 125297 | 19 |  3 | 56 | 7405
  55939 | 19 |  3 | 56 | 1990
   7253 | 19 |  3 | 55 |     
  29509 | 19 |  3 | 55 | 9369
 110472 | 19 |  3 | 55 | 6356
 110198 | 19 |  3 | 55 | 5859
 108299 | 19 |  3 | 55 | 5626
 128046 | 19 |  3 | 55 | 4630
   3222 | 19 |  2 | 58 | 9627
 100292 | 19 |  2 | 57 |     
  82559 | 19 |  2 | 57 |  993
  35174 | 19 |  2 | 57 |  792
 110184 | 19 |  2 | 56 | 8446
  32982 | 19 |  2 | 56 | 4012
  36129 | 19 |  2 | 56 | 3383
 144528 | 19 |  2 | 55 | 6990
 135965 | 19 |  2 | 55 | 6217
  22310 | 19 |  2 | 55 | 4311
  84743 | 19 |  2 | 55 | 2996
  92051 | 19 |  2 | 55 |  436
 147196 | 19 |  1 | 58 | 9710
 132227 | 19 |  1 | 58 | 9031
  57805 | 19 |  1 | 58 | 7753
  64181 | 19 |  1 | 58 | 4990
  55480 | 19 |  1 | 58 | 1318
  57355 | 19 |  1 | 58 |  770
  10649 | 19 |  1 | 58 |  354
 115413 | 19 |  1 | 58 |  306
 142857 | 19 |  1 | 57 | 8536
 133239 | 19 |  1 | 57 | 6806
  40729 | 19 |  1 | 57 | 4095
  70537 | 19 |  1 | 56 | 2791
  56870 | 19 |  1 | 56 | 2483
  75965 | 19 |  1 | 55 | 8719
 145564 | 19 |  1 | 55 | 6186
 136289 | 19 |  1 | 55 | 4677
  82582 | 19 |  1 | 55 | 4475
  19230 | 19 |  1 | 55 | 1031
(298 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where a = 19 and (c, d) >=(54, 5976) and c <= 58
order by a desc, b desc, c desc, d desc;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..189.33 rows=89 width=20) (actual rows=298.00 loops=1)
   Index Cond: ((a = 19) AND (ROW(c, d) >= ROW(54, 5976)) AND (c <= 58))
   Index Searches: 13
   Buffers: shared hit=361
(4 rows)

-- 2025-06-18 17:46
-- RowCompares probably don't need to disable forcenonrequired when we reach
-- them within _bt_set_startikey, after all.  However, that requires better
-- _bt_first row compare initial positioning logic in the presence of NULL row
-- members.  We have good tests for that elsewhere.  This test exists to prove
-- that it is also necessary to make the relevant "NULL row member/row
-- element" code within _bt_check_rowcompare more particular about the attno
-- of the required scan key that it gets to via "subkey--"; there cannot be a
-- "index attribute gap" between it and the NULL row member.
--
-- Here the gap is between "b" and "d" row members.  Since we have a skip
-- array on "a", and since we're now going to allow forcenonrequired with row
-- compares, this test case will spin ceaselessly without those
-- _bt_set_startikey changes playing their part in avoiding confusion:
select *
from fuzz_skip_scan
where (b, d) >= (6, null) and (b, d) <= (7, null)
order by a desc, b desc, c desc, d desc;
 id | a | b | c | d 
----+---+---+---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where (b, d) >= (6, null) and (b, d) <= (7, null)
order by a desc, b desc, c desc, d desc;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..5213.53 rows=17831 width=20) (actual rows=0.00 loops=1)
   Index Cond: ((ROW(b, d) >= ROW(6, NULL::integer)) AND (ROW(b, d) <= ROW(7, NULL::integer)))
   Index Searches: 23
   Buffers: shared hit=69
(4 rows)

-- 2025-06-19 21:10
--
-- Following v2 of RowCompare patch, add this test to prove that we need to be
-- careful about stopping the scan on a NULL for a scan key not marked
-- required in the current scan direction (unless dealing with the first row
-- member's scan key)
select *
from fuzz_skip_scan
where (a, b, c) >= (4, 12, 64) and (a, b, c) <= (7, null, 0) and d = 4904
order by a, b, c, d;
   id   | a | b  | c  |  d   
--------+---+----+----+------
 138800 | 5 | 11 | 77 | 4904
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where (a, b, c) >= (4, 12, 64) and (a, b, c) <= (7, null, 0) and d = 4904
order by a, b, c, d;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Index Scan using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..566.20 rows=89 width=20) (actual rows=1.00 loops=1)
   Index Cond: ((ROW(a, b, c) >= ROW(4, 12, 64)) AND (ROW(a, b, c) <= ROW(7, NULL::integer, 0)) AND (d = 4904))
   Index Searches: 1
   Buffers: shared hit=89
(4 rows)

-- 2025-06-19 21:15
--
-- Essentially tests the same thing as last time, except now we show it with a
-- backwards scan, instead of a forwards scan (which necessitates use of the
-- alternative NULLS FIRST index, since it's only wrong that way around)
select *
from fuzz_skip_scan
where (a, b) > (7, 11) and (a, b) < (11, 0)
  and c is not null
  and d = 3765
order by a desc NULLS last, b desc NULLS last, c desc NULLS last, d desc NULLS last;
  id   | a | b  | c  |  d   
-------+---+----+----+------
 19345 | 9 | 17 | 87 | 3765
 91653 | 9 | 14 | 42 | 3765
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where (a, b) > (7, 11) and (a, b) < (11, 0)
  and c is not null
  and d = 3765
order by a desc NULLS last, b desc NULLS last, c desc NULLS last, d desc NULLS last;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd_nullsfirst on fuzz_skip_scan  (cost=0.42..610.77 rows=89 width=20) (actual rows=2.00 loops=1)
   Index Cond: ((ROW(a, b) > ROW(7, 11)) AND (ROW(a, b) < ROW(11, 0)) AND (c IS NOT NULL) AND (d = 3765))
   Index Searches: 1
   Buffers: shared hit=136
(4 rows)

-- 2025-06-20 17:22
--
-- It comes to light on Friday (day after Juneteenth) that use of
-- forcenonrequired mode with a RowCompare key isn't actually made safe by my
-- RowCompare patch; at least not when we mix in potentially redundant or
-- contradictory scalar keys.
--
-- The following are a few samples of this -- "can't forcenonrequired with
-- contradictory inequality" tests
-- "can't forcenonrequired with contradictory inequality" test # 1
select *
from fuzz_skip_scan
where
(b, d) > (7, 10000) and b > 15 and (b, d) <= (8, 4766) and d < 5861
order by a, b, c, d;
 id | a | b | c | d 
----+---+---+---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where
(b, d) > (7, 10000) and b > 15 and (b, d) <= (8, 4766) and d < 5861
order by a, b, c, d;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Index Scan using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..5857.43 rows=1981 width=20) (actual rows=0.00 loops=1)
   Index Cond: ((ROW(b, d) > ROW(7, 10000)) AND (b > 15) AND (ROW(b, d) <= ROW(8, 4766)) AND (d < 5861))
   Index Searches: 23
   Buffers: shared hit=151
(4 rows)

-- "can't forcenonrequired with contradictory inequality" test # 2
select *
from fuzz_skip_scan
where
a <= 9 and a is not null and (b, d) > (4, 3634) and b > 8 and (b, d) < (9, 0) and c = 23 and d >= 4909
order by a NULLS first, b NULLS first, c NULLS first, d NULLS first;
 id | a | b | c | d 
----+---+---+---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where
a <= 9 and a is not null and (b, d) > (4, 3634) and b > 8 and (b, d) < (9, 0) and c = 23 and d >= 4909
order by a NULLS first, b NULLS first, c NULLS first, d NULLS first;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using fuzz_skip_scan_abcd_nullsfirst on fuzz_skip_scan  (cost=0.42..1716.04 rows=3 width=20) (actual rows=0.00 loops=1)
   Index Cond: ((a <= 9) AND (a IS NOT NULL) AND (ROW(b, d) > ROW(4, 3634)) AND (b > 8) AND (ROW(b, d) < ROW(9, 0)) AND (c = 23) AND (d >= 4909))
   Index Searches: 10
   Buffers: shared hit=132
(4 rows)

-- "can't forcenonrequired with contradictory inequality" test # 3
select *
from fuzz_skip_scan
where a > 0 and a is not null and (b, c, d) >= (8, null, null) and b < 4 and (b, c, d) <= (11, 61, 2787) and c > 15
order by a desc NULLS last, b desc NULLS last, c desc NULLS last, d desc NULLS last;
 id | a | b | c | d 
----+---+---+---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where a > 0 and a is not null and (b, c, d) >= (8, null, null) and b < 4 and (b, c, d) <= (11, 61, 2787) and c > 15
order by a desc NULLS last, b desc NULLS last, c desc NULLS last, d desc NULLS last;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd_nullsfirst on fuzz_skip_scan  (cost=0.42..2559.51 rows=657 width=20) (actual rows=0.00 loops=1)
   Index Cond: ((a > 0) AND (a IS NOT NULL) AND (ROW(b, c, d) >= ROW(8, NULL::integer, NULL::integer)) AND (b < 4) AND (ROW(b, c, d) <= ROW(11, 61, 2787)) AND (c > 15))
   Index Searches: 21
   Buffers: shared hit=174
(4 rows)

-- 2025-06-20 17:52
--
-- "ERROR:  pageNum 730 already visited" with patch enabled that does that,
-- this is a forwards scan with more contradictory inequalities:
select *
from fuzz_skip_scan
where a > 0 and a is not null and (b, c, d) >=(8, null, null)
  and b < 4 and (b, c, d) <= (11, 61, 2787)
  and c > 15
order by
  a NULLS first,
  b NULLS first,
  c NULLS first,
  d NULLS first;
 id | a | b | c | d 
----+---+---+---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where a > 0 and a is not null and (b, c, d) >=(8, null, null)
  and b < 4 and (b, c, d) <= (11, 61, 2787)
  and c > 15
order by
  a NULLS first,
  b NULLS first,
  c NULLS first,
  d NULLS first;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using fuzz_skip_scan_abcd_nullsfirst on fuzz_skip_scan  (cost=0.42..2559.51 rows=657 width=20) (actual rows=0.00 loops=1)
   Index Cond: ((a > 0) AND (a IS NOT NULL) AND (ROW(b, c, d) >= ROW(8, NULL::integer, NULL::integer)) AND (b < 4) AND (ROW(b, c, d) <= ROW(11, 61, 2787)) AND (c > 15))
   Index Searches: 21
   Buffers: shared hit=175
(4 rows)

-- 2025-06-21 12:30
--
-- "However, on a forwards scan, we must keep going, because we may have
-- initially positioned to the start of the index". -- verifies that we didn't
-- get this point wrong in _bt_check_rowcompare (just have it for paranoia's sake)
select *
from fuzz_skip_scan
where a = 6 and b <= 9 and (c, d) >= (79, 7218) and (c, d) <= (83, 0)
order by a NULLS first, b NULLS first, c NULLS first, d NULLS first;
   id   | a | b | c  |  d   
--------+---+---+----+------
  91640 | 6 | 1 | 79 | 7377
  76864 | 6 | 1 | 79 | 8222
  38152 | 6 | 1 | 80 | 8485
   6021 | 6 | 1 | 80 | 9999
  11578 | 6 | 1 | 81 | 2096
  26090 | 6 | 1 | 81 | 3205
  12506 | 6 | 1 | 81 | 5446
 110040 | 6 | 1 | 82 |     
 109904 | 6 | 1 | 82 | 5222
 130905 | 6 | 2 | 79 | 8860
  82573 | 6 | 2 | 79 | 9754
  31096 | 6 | 2 | 80 | 6456
  63082 | 6 | 2 | 81 |     
 107053 | 6 | 2 | 81 | 2931
  45100 | 6 | 2 | 81 | 4387
  45369 | 6 | 2 | 82 |     
 120836 | 6 | 2 | 82 | 1399
 147205 | 6 | 2 | 82 | 3499
  55560 | 6 | 2 | 82 | 4303
  66301 | 6 | 2 | 82 | 4875
 117736 | 6 | 2 | 82 | 7037
   1400 | 6 | 3 | 79 | 8324
  45979 | 6 | 3 | 79 | 9163
    677 | 6 | 3 | 80 | 7063
  43326 | 6 | 3 | 80 | 7131
 114942 | 6 | 3 | 80 | 8735
 111596 | 6 | 3 | 81 |     
 117273 | 6 | 3 | 81 | 1213
  90958 | 6 | 3 | 81 | 6415
  57542 | 6 | 3 | 81 | 7491
 136031 | 6 | 3 | 82 | 4801
  92997 | 6 | 4 | 79 | 9762
  93765 | 6 | 4 | 80 |     
  38384 | 6 | 4 | 80 |  999
 125739 | 6 | 4 | 80 | 1546
  71122 | 6 | 4 | 80 | 6696
 142821 | 6 | 4 | 80 | 7688
  78062 | 6 | 4 | 80 | 9702
 108954 | 6 | 4 | 82 | 2053
 124120 | 6 | 4 | 82 | 3337
  66544 | 6 | 4 | 82 | 9330
  68565 | 6 | 5 | 79 | 7704
  35963 | 6 | 5 | 80 |     
 143190 | 6 | 5 | 80 |  152
 142243 | 6 | 5 | 80 | 1617
   1870 | 6 | 5 | 80 | 2693
  29655 | 6 | 5 | 80 | 2899
 130492 | 6 | 5 | 80 | 5347
 110842 | 6 | 5 | 81 | 1095
  48429 | 6 | 5 | 81 | 1794
  85478 | 6 | 5 | 81 | 8430
   2335 | 6 | 5 | 81 | 9897
 135691 | 6 | 5 | 82 | 2074
  43165 | 6 | 5 | 82 | 2721
  23306 | 6 | 5 | 82 | 5107
  52879 | 6 | 5 | 82 | 6415
  20088 | 6 | 6 | 79 | 7448
  44345 | 6 | 6 | 79 | 9386
  65157 | 6 | 6 | 79 | 9812
  27969 | 6 | 6 | 80 | 1486
  38981 | 6 | 6 | 80 | 3451
 107414 | 6 | 6 | 81 | 2300
  48070 | 6 | 6 | 81 | 2713
   9991 | 6 | 6 | 81 | 6887
  90835 | 6 | 6 | 82 |   79
 147473 | 6 | 6 | 82 | 2723
  97904 | 6 | 6 | 82 | 5677
  72745 | 6 | 6 | 82 | 8373
 148364 | 6 | 6 | 82 | 9213
 107307 | 6 | 7 | 81 |  548
  22966 | 6 | 7 | 81 | 5141
  16338 | 6 | 7 | 81 | 8638
  33455 | 6 | 7 | 82 | 1704
  90412 | 6 | 8 | 80 |  397
 139014 | 6 | 8 | 80 | 4087
 102311 | 6 | 8 | 80 | 4149
 125814 | 6 | 8 | 81 | 3623
  23201 | 6 | 8 | 82 | 6175
  95477 | 6 | 8 | 82 | 9240
  73359 | 6 | 9 | 80 | 1214
   4987 | 6 | 9 | 80 | 3692
  20789 | 6 | 9 | 80 | 5085
  62373 | 6 | 9 | 80 | 8169
  44938 | 6 | 9 | 81 | 2546
 115899 | 6 | 9 | 81 | 2723
  76261 | 6 | 9 | 81 | 3563
  58590 | 6 | 9 | 81 | 4641
 102879 | 6 | 9 | 81 | 8250
 138117 | 6 | 9 | 82 |  908
(89 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where a = 6 and b <= 9 and (c, d) >= (79, 7218) and (c, d) <= (83, 0)
order by a NULLS first, b NULLS first, c NULLS first, d NULLS first;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using fuzz_skip_scan_abcd_nullsfirst on fuzz_skip_scan  (cost=0.42..68.72 rows=30 width=20) (actual rows=89.00 loops=1)
   Index Cond: ((a = 6) AND (b <= 9) AND (ROW(c, d) >= ROW(79, 7218)) AND (ROW(c, d) <= ROW(83, 0)))
   Index Searches: 7
   Buffers: shared hit=118
(4 rows)

-- 2025-06-21 12:30
--
-- "However, on a backwards scan, we must keep going, because we may have
-- initially positioned to the end of the index". -- verifies that we didn't
-- get this point wrong in _bt_check_rowcompare (just have this test for
-- paranoia's sake)
select *
from fuzz_skip_scan
where a = 8 and (c, d) >= (53, 8221) and c < 86 and (c, d) <= (54, null)
order by a desc, b desc, c desc, d desc;
   id   | a | b  | c  |  d   
--------+---+----+----+------
  89976 | 8 | 20 | 53 | 9865
 113380 | 8 |  9 | 53 | 8717
  66973 | 8 |  7 | 53 | 9332
  68405 | 8 |  6 | 53 | 9759
  23209 | 8 |  3 | 53 | 8813
  82856 | 8 |  2 | 53 | 9626
 101752 | 8 |  1 | 53 | 9942
  11645 | 8 |  1 | 53 | 9355
 126602 | 8 |  1 | 53 | 9013
(9 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select *
from fuzz_skip_scan
where a = 8 and (c, d) >= (53, 8221) and c < 86 and (c, d) <= (54, null)
order by a desc, b desc, c desc, d desc;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using fuzz_skip_scan_abcd on fuzz_skip_scan  (cost=0.42..80.75 rows=30 width=20) (actual rows=9.00 loops=1)
   Index Cond: ((a = 8) AND (ROW(c, d) >= ROW(53, 8221)) AND (c < 86) AND (ROW(c, d) <= ROW(54, NULL::integer)))
   Index Searches: 23
   Buffers: shared hit=79
(4 rows)

-- Reset
set enable_bitmapscan to on;
set enable_indexonlyscan to on;
--
-- Heikki CREATE INDEX regression stress test query (miniaturized) --
--
-- Test case taken from: https://postgr.es/m/aa55adf3-6466-4324-92e6-5ef54e7c3918@iki.fi
--
-- set enable_seqscan=off; set max_parallel_workers_per_gather=0;
-- Setup:
set client_min_messages=error;
drop table if exists heikki_skiptest_small;
reset client_min_messages;
-- First do retail insert version of his query, where suffix truncation is
-- effective:
create unlogged table heikki_skiptest_small (a int, b int);
create index heikki_skiptest_small_idx on heikki_skiptest_small (a, b);
insert into heikki_skiptest_small
select g / 10 as a, g % 10 as b
from generate_series(1, 10_000) g;
vacuum freeze heikki_skiptest_small;
-- Forwards:
select count(*)
from heikki_skiptest_small
where b = 1;
 count 
-------
  1000
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select count(*)
from heikki_skiptest_small
where b = 1;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=133.91..133.92 rows=1 width=8) (actual rows=1.00 loops=1)
   Buffers: shared hit=29
   ->  Index Only Scan using heikki_skiptest_small_idx on heikki_skiptest_small  (cost=0.29..133.78 rows=50 width=0) (actual rows=1000.00 loops=1)
         Index Cond: (b = 1)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=29
(7 rows)

-- Backwards:
select a, b
from heikki_skiptest_small
where b = 1
order by a desc, b desc
limit 1 offset 20_000;
 a | b 
---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b
from heikki_skiptest_small
where b = 1
order by a desc, b desc
limit 1 offset 20_000;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=133.78..136.45 rows=1 width=8) (actual rows=0.00 loops=1)
   Buffers: shared hit=29
   ->  Index Only Scan Backward using heikki_skiptest_small_idx on heikki_skiptest_small  (cost=0.29..133.78 rows=50 width=8) (actual rows=1000.00 loops=1)
         Index Cond: (b = 1)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=29
(7 rows)

-- Okay, now the actual adversarial case, which requires that suffix
-- truncation wasn't very effective -- REINDEX to get that:
reindex index heikki_skiptest_small_idx;
-- Now repeat exactly the same queries as first time around:
-- Forwards:
select count(*)
from heikki_skiptest_small
where b = 1;
 count 
-------
  1000
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select count(*)
from heikki_skiptest_small
where b = 1;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=135.91..135.92 rows=1 width=8) (actual rows=1.00 loops=1)
   Buffers: shared hit=30
   ->  Index Only Scan using heikki_skiptest_small_idx on heikki_skiptest_small  (cost=0.29..135.78 rows=50 width=0) (actual rows=1000.00 loops=1)
         Index Cond: (b = 1)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=30
(7 rows)

-- Backwards:
select a, b
from heikki_skiptest_small
where b = 1
order by a desc, b desc
limit 1 offset 20_000;
 a | b 
---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b
from heikki_skiptest_small
where b = 1
order by a desc, b desc
limit 1 offset 20_000;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=135.78..138.50 rows=1 width=8) (actual rows=0.00 loops=1)
   Buffers: shared hit=30
   ->  Index Only Scan Backward using heikki_skiptest_small_idx on heikki_skiptest_small  (cost=0.29..135.78 rows=50 width=8) (actual rows=1000.00 loops=1)
         Index Cond: (b = 1)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=30
(7 rows)

----------------------
-- Misc multi tests --
----------------------
set client_min_messages=error;
drop table if exists multi_test_skip;
reset client_min_messages;
create unlogged table multi_test_skip(
  a int,
  b int,
  c int
);
create index multi_test_skip_idx on multi_test_skip(a, b);
insert into multi_test_skip
select
  j,
  case when i < 14 then
    0
  else
    1
  end
from
  generate_series(1, 14) i,
  generate_series(1, 400) j
order by
  j,
  i;
vacuum analyze multi_test_skip;
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
-- Harder case
select a, b from multi_test_skip where a in (123, 182, 183) and b in (1,2);
  a  | b 
-----+---
 123 | 1
 182 | 1
 183 | 1
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b from multi_test_skip where a in (123, 182, 183) and b in (1,2);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=6.88..11.89 rows=3 width=8) (actual rows=3.00 loops=1)
   Recheck Cond: ((a = ANY ('{123,182,183}'::integer[])) AND (b = ANY ('{1,2}'::integer[])))
   Heap Blocks: exact=2
   Buffers: shared hit=4
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..6.88 rows=3 width=0) (actual rows=3.00 loops=1)
         Index Cond: ((a = ANY ('{123,182,183}'::integer[])) AND (b = ANY ('{1,2}'::integer[])))
         Index Searches: 1
         Buffers: shared hit=2
(8 rows)

-- Hard case
select a, b from multi_test_skip where a in (182, 183, 184) and b in (1,2);
  a  | b 
-----+---
 182 | 1
 183 | 1
 184 | 1
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b from multi_test_skip where a in (182, 183, 184) and b in (1,2);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=6.88..11.89 rows=3 width=8) (actual rows=3.00 loops=1)
   Recheck Cond: ((a = ANY ('{182,183,184}'::integer[])) AND (b = ANY ('{1,2}'::integer[])))
   Heap Blocks: exact=1
   Buffers: shared hit=4
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..6.88 rows=3 width=0) (actual rows=3.00 loops=1)
         Index Cond: ((a = ANY ('{182,183,184}'::integer[])) AND (b = ANY ('{1,2}'::integer[])))
         Index Searches: 1
         Buffers: shared hit=3
(8 rows)

select a, b from multi_test_skip where a in (3,4,5) and b > 0;
 a | b 
---+---
 3 | 1
 4 | 1
 5 | 1
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b from multi_test_skip where a in (3,4,5) and b > 0;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=6.88..11.89 rows=3 width=8) (actual rows=3.00 loops=1)
   Recheck Cond: ((a = ANY ('{3,4,5}'::integer[])) AND (b > 0))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..6.88 rows=3 width=0) (actual rows=3.00 loops=1)
         Index Cond: ((a = ANY ('{3,4,5}'::integer[])) AND (b > 0))
         Index Searches: 1
         Buffers: shared hit=2
(8 rows)

set enable_indexscan to on;
-- Backwards scan:
select a, b from multi_test_skip where a in (3,4,5) and b > 0
order by a desc, b desc;
 a | b 
---+---
 5 | 1
 4 | 1
 3 | 1
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b from multi_test_skip where a in (3,4,5) and b > 0
order by a desc, b desc;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using multi_test_skip_idx on multi_test_skip  (cost=0.28..10.66 rows=3 width=8) (actual rows=3.00 loops=1)
   Index Cond: ((a = ANY ('{3,4,5}'::integer[])) AND (b > 0))
   Index Searches: 1
   Buffers: shared hit=3
(4 rows)

set enable_indexscan to off;
-- (July 24, day before taking the train to Cambridge)
--
-- Make sure that skip array stores no more than a single inequality in a
-- cross-type scenario where we cannot prove which type/operator (the > operator
-- or the >= operator) is the redundant of the two lower bound operators.
--
-- The bug here was that we senselessly clobbered the skip array's
-- array.lower_bound field.  We must avoid behaving as if we can roll more
-- than a single lower/upper bound inequality into a skip array.
select
  a, b from
  multi_test_skip
where
  a > 395 and a >= 390::int8 and b = 1;
  a  | b 
-----+---
 396 | 1
 397 | 1
 398 | 1
 399 | 1
 400 | 1
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a > 395 and a >= 390::int8 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=6.92..14.78 rows=5 width=8) (actual rows=5.00 loops=1)
   Recheck Cond: ((a > 395) AND (a >= '390'::bigint) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..6.92 rows=5 width=0) (actual rows=5.00 loops=1)
         Index Cond: ((a > 395) AND (a >= '390'::bigint) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=3
(10 rows)

-- (July 24, day before taking the train to Cambridge)
--
-- This test shouldn't get confused about which is the most restrictive scan
-- key -- it's important that we not start the scan on a leaf page to the left
-- of the tree needlessly:
--
-- (This behvior might be acceptable with an incomplete opfamily, but that's
-- not why we have here)
select
  a, b from
  multi_test_skip
where
  a > 1 and a >= 400::int8 and b = 1;
  a  | b 
-----+---
 400 | 1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 2 buffer hits, not 8
select
  a, b from
  multi_test_skip
where
  a > 1 and a >= 400::int8 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=2.46..4.48 rows=1 width=8) (actual rows=1.00 loops=1)
   Recheck Cond: ((a > 1) AND (a >= '400'::bigint) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..2.46 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((a > 1) AND (a >= '400'::bigint) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 1:
select
  a, b from
  multi_test_skip
where
  a > 399 and a >= 400::int8 and b = 1;
  a  | b 
-----+---
 400 | 1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a > 399 and a >= 400::int8 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=2.46..4.48 rows=1 width=8) (actual rows=1.00 loops=1)
   Recheck Cond: ((a > 399) AND (a >= '400'::bigint) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..2.46 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((a > 399) AND (a >= '400'::bigint) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 2:
select
  a, b from
  multi_test_skip
where
  a > 399::int8 and a >= 400 and b = 1;
  a  | b 
-----+---
 400 | 1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a > 399::int8 and a >= 400 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=2.46..4.48 rows=1 width=8) (actual rows=1.00 loops=1)
   Recheck Cond: ((a > '399'::bigint) AND (a >= 400) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..2.46 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((a > '399'::bigint) AND (a >= 400) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 3:
select
  a, b from
  multi_test_skip
where
  a >= 400::int8 and a > 399 and b = 1;
  a  | b 
-----+---
 400 | 1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a >= 400::int8 and a > 399 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=2.46..4.48 rows=1 width=8) (actual rows=1.00 loops=1)
   Recheck Cond: ((a >= '400'::bigint) AND (a > 399) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..2.46 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((a >= '400'::bigint) AND (a > 399) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 4:
select
  a, b from
  multi_test_skip
where
  a >= 400 and a > 399::int8 and b = 1;
  a  | b 
-----+---
 400 | 1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a >= 400 and a > 399::int8 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=2.46..4.48 rows=1 width=8) (actual rows=1.00 loops=1)
   Recheck Cond: ((a >= 400) AND (a > '399'::bigint) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..2.46 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((a >= 400) AND (a > '399'::bigint) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 5:
select
  a, b from
  multi_test_skip
where
  a > 399 and a >= 400::int8 and b = 1;
  a  | b 
-----+---
 400 | 1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a > 399 and a >= 400::int8 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=2.46..4.48 rows=1 width=8) (actual rows=1.00 loops=1)
   Recheck Cond: ((a > 399) AND (a >= '400'::bigint) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..2.46 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((a > 399) AND (a >= '400'::bigint) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 6:
select
  a, b from
  multi_test_skip
where
  a > 399 and a >= 399::int8 and b = 1;
  a  | b 
-----+---
 400 | 1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a > 399 and a >= 399::int8 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=2.46..4.48 rows=1 width=8) (actual rows=1.00 loops=1)
   Recheck Cond: ((a > 399) AND (a >= '399'::bigint) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..2.46 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((a > 399) AND (a >= '399'::bigint) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 7:
select
  a, b from
  multi_test_skip
where
  a >= 399 and a > 399::int8 and b = 1;
  a  | b 
-----+---
 400 | 1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a >= 399 and a > 399::int8 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=2.46..4.48 rows=1 width=8) (actual rows=1.00 loops=1)
   Recheck Cond: ((a >= 399) AND (a > '399'::bigint) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..2.46 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((a >= 399) AND (a > '399'::bigint) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 8:
select
  a, b from
  multi_test_skip
where
  a <= 3 and a < 3::int8 and b = 1;
 a | b 
---+---
 1 | 1
 2 | 1
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a <= 3 and a < 3::int8 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=4.59..8.06 rows=2 width=8) (actual rows=2.00 loops=1)
   Recheck Cond: ((a <= 3) AND (a < '3'::bigint) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..4.59 rows=2 width=0) (actual rows=2.00 loops=1)
         Index Cond: ((a <= 3) AND (a < '3'::bigint) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 9:
select
  a, b from
  multi_test_skip
where
  a <= 2 and a < 3::int8 and b = 1;
 a | b 
---+---
 1 | 1
 2 | 1
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a <= 2 and a < 3::int8 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=4.59..8.06 rows=2 width=8) (actual rows=2.00 loops=1)
   Recheck Cond: ((a <= 2) AND (a < '3'::bigint) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..4.59 rows=2 width=0) (actual rows=2.00 loops=1)
         Index Cond: ((a <= 2) AND (a < '3'::bigint) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Variant 10:
select
  a, b from
  multi_test_skip
where
  a <= 2::int8 and a < 3 and b = 1;
 a | b 
---+---
 1 | 1
 2 | 1
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  a, b from
  multi_test_skip
where
  a <= 2::int8 and a < 3 and b = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=4.59..8.06 rows=2 width=8) (actual rows=2.00 loops=1)
   Recheck Cond: ((a <= '2'::bigint) AND (a < 3) AND (b = 1))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..4.59 rows=2 width=0) (actual rows=2.00 loops=1)
         Index Cond: ((a <= '2'::bigint) AND (a < 3) AND (b = 1))
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=6
(10 rows)

-- Redundant test:
select a, b
from multi_test_skip
where
  a in (1, 99, 182, 183, 184)
  and a > 183;
  a  | b 
-----+---
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 1
(14 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b
from multi_test_skip
where
  a in (1, 99, 182, 183, 184)
  and a > 183;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=7.25..31.32 rows=38 width=8) (actual rows=14.00 loops=1)
   Recheck Cond: ((a = ANY ('{1,99,182,183,184}'::integer[])) AND (a > 183))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..7.24 rows=38 width=0) (actual rows=14.00 loops=1)
         Index Cond: ((a = ANY ('{1,99,182,183,184}'::integer[])) AND (a > 183))
         Index Searches: 1
         Buffers: shared hit=2
(8 rows)

-- Redundant test, flip order:
select a, b
from multi_test_skip
where
  a > 183
  and a in (1, 99, 182, 183, 184);
  a  | b 
-----+---
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 0
 184 | 1
(14 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 0 buffer hits (contradictory qual)
select a, b
from multi_test_skip
where
  a > 183
  and a in (1, 99, 182, 183, 184);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=7.25..31.32 rows=38 width=8) (actual rows=14.00 loops=1)
   Recheck Cond: ((a > 183) AND (a = ANY ('{1,99,182,183,184}'::integer[])))
   Heap Blocks: exact=1
   Buffers: shared hit=3
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..7.24 rows=38 width=0) (actual rows=14.00 loops=1)
         Index Cond: ((a > 183) AND (a = ANY ('{1,99,182,183,184}'::integer[])))
         Index Searches: 1
         Buffers: shared hit=2
(8 rows)

select a, b
from multi_test_skip
where
  a in (180, 345)
  and a in (230, 300);
 a | b 
---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 0 buffer hits (contradictory qual)
select a, b
from multi_test_skip
where
  a in (180, 345)
  and a in (230, 300);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=6.88..8.89 rows=1 width=8) (actual rows=0.00 loops=1)
   Recheck Cond: ((a = ANY ('{180,345}'::integer[])) AND (a = ANY ('{230,300}'::integer[])))
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..6.88 rows=1 width=0) (actual rows=0.00 loops=1)
         Index Cond: ((a = ANY ('{180,345}'::integer[])) AND (a = ANY ('{230,300}'::integer[])))
         Index Searches: 0
(5 rows)

insert into multi_test_skip
select
  NULL,
  j
from
  generate_series(1, 10) j
order by j;
vacuum analyze multi_test_skip;
select a, b
from multi_test_skip
where b = 1;
  a  | b 
-----+---
   1 | 1
   2 | 1
   3 | 1
   4 | 1
   5 | 1
   6 | 1
   7 | 1
   8 | 1
   9 | 1
  10 | 1
  11 | 1
  12 | 1
  13 | 1
  14 | 1
  15 | 1
  16 | 1
  17 | 1
  18 | 1
  19 | 1
  20 | 1
  21 | 1
  22 | 1
  23 | 1
  24 | 1
  25 | 1
  26 | 1
  27 | 1
  28 | 1
  29 | 1
  30 | 1
  31 | 1
  32 | 1
  33 | 1
  34 | 1
  35 | 1
  36 | 1
  37 | 1
  38 | 1
  39 | 1
  40 | 1
  41 | 1
  42 | 1
  43 | 1
  44 | 1
  45 | 1
  46 | 1
  47 | 1
  48 | 1
  49 | 1
  50 | 1
  51 | 1
  52 | 1
  53 | 1
  54 | 1
  55 | 1
  56 | 1
  57 | 1
  58 | 1
  59 | 1
  60 | 1
  61 | 1
  62 | 1
  63 | 1
  64 | 1
  65 | 1
  66 | 1
  67 | 1
  68 | 1
  69 | 1
  70 | 1
  71 | 1
  72 | 1
  73 | 1
  74 | 1
  75 | 1
  76 | 1
  77 | 1
  78 | 1
  79 | 1
  80 | 1
  81 | 1
  82 | 1
  83 | 1
  84 | 1
  85 | 1
  86 | 1
  87 | 1
  88 | 1
  89 | 1
  90 | 1
  91 | 1
  92 | 1
  93 | 1
  94 | 1
  95 | 1
  96 | 1
  97 | 1
  98 | 1
  99 | 1
 100 | 1
 101 | 1
 102 | 1
 103 | 1
 104 | 1
 105 | 1
 106 | 1
 107 | 1
 108 | 1
 109 | 1
 110 | 1
 111 | 1
 112 | 1
 113 | 1
 114 | 1
 115 | 1
 116 | 1
 117 | 1
 118 | 1
 119 | 1
 120 | 1
 121 | 1
 122 | 1
 123 | 1
 124 | 1
 125 | 1
 126 | 1
 127 | 1
 128 | 1
 129 | 1
 130 | 1
 131 | 1
 132 | 1
 133 | 1
 134 | 1
 135 | 1
 136 | 1
 137 | 1
 138 | 1
 139 | 1
 140 | 1
 141 | 1
 142 | 1
 143 | 1
 144 | 1
 145 | 1
 146 | 1
 147 | 1
 148 | 1
 149 | 1
 150 | 1
 151 | 1
 152 | 1
 153 | 1
 154 | 1
 155 | 1
 156 | 1
 157 | 1
 158 | 1
 159 | 1
 160 | 1
 161 | 1
 162 | 1
 163 | 1
 164 | 1
 165 | 1
 166 | 1
 167 | 1
 168 | 1
 169 | 1
 170 | 1
 171 | 1
 172 | 1
 173 | 1
 174 | 1
 175 | 1
 176 | 1
 177 | 1
 178 | 1
 179 | 1
 180 | 1
 181 | 1
 182 | 1
 183 | 1
 184 | 1
 185 | 1
 186 | 1
 187 | 1
 188 | 1
 189 | 1
 190 | 1
 191 | 1
 192 | 1
 193 | 1
 194 | 1
 195 | 1
 196 | 1
 197 | 1
 198 | 1
 199 | 1
 200 | 1
 201 | 1
 202 | 1
 203 | 1
 204 | 1
 205 | 1
 206 | 1
 207 | 1
 208 | 1
 209 | 1
 210 | 1
 211 | 1
 212 | 1
 213 | 1
 214 | 1
 215 | 1
 216 | 1
 217 | 1
 218 | 1
 219 | 1
 220 | 1
 221 | 1
 222 | 1
 223 | 1
 224 | 1
 225 | 1
 226 | 1
 227 | 1
 228 | 1
 229 | 1
 230 | 1
 231 | 1
 232 | 1
 233 | 1
 234 | 1
 235 | 1
 236 | 1
 237 | 1
 238 | 1
 239 | 1
 240 | 1
 241 | 1
 242 | 1
 243 | 1
 244 | 1
 245 | 1
 246 | 1
 247 | 1
 248 | 1
 249 | 1
 250 | 1
 251 | 1
 252 | 1
 253 | 1
 254 | 1
 255 | 1
 256 | 1
 257 | 1
 258 | 1
 259 | 1
 260 | 1
 261 | 1
 262 | 1
 263 | 1
 264 | 1
 265 | 1
 266 | 1
 267 | 1
 268 | 1
 269 | 1
 270 | 1
 271 | 1
 272 | 1
 273 | 1
 274 | 1
 275 | 1
 276 | 1
 277 | 1
 278 | 1
 279 | 1
 280 | 1
 281 | 1
 282 | 1
 283 | 1
 284 | 1
 285 | 1
 286 | 1
 287 | 1
 288 | 1
 289 | 1
 290 | 1
 291 | 1
 292 | 1
 293 | 1
 294 | 1
 295 | 1
 296 | 1
 297 | 1
 298 | 1
 299 | 1
 300 | 1
 301 | 1
 302 | 1
 303 | 1
 304 | 1
 305 | 1
 306 | 1
 307 | 1
 308 | 1
 309 | 1
 310 | 1
 311 | 1
 312 | 1
 313 | 1
 314 | 1
 315 | 1
 316 | 1
 317 | 1
 318 | 1
 319 | 1
 320 | 1
 321 | 1
 322 | 1
 323 | 1
 324 | 1
 325 | 1
 326 | 1
 327 | 1
 328 | 1
 329 | 1
 330 | 1
 331 | 1
 332 | 1
 333 | 1
 334 | 1
 335 | 1
 336 | 1
 337 | 1
 338 | 1
 339 | 1
 340 | 1
 341 | 1
 342 | 1
 343 | 1
 344 | 1
 345 | 1
 346 | 1
 347 | 1
 348 | 1
 349 | 1
 350 | 1
 351 | 1
 352 | 1
 353 | 1
 354 | 1
 355 | 1
 356 | 1
 357 | 1
 358 | 1
 359 | 1
 360 | 1
 361 | 1
 362 | 1
 363 | 1
 364 | 1
 365 | 1
 366 | 1
 367 | 1
 368 | 1
 369 | 1
 370 | 1
 371 | 1
 372 | 1
 373 | 1
 374 | 1
 375 | 1
 376 | 1
 377 | 1
 378 | 1
 379 | 1
 380 | 1
 381 | 1
 382 | 1
 383 | 1
 384 | 1
 385 | 1
 386 | 1
 387 | 1
 388 | 1
 389 | 1
 390 | 1
 391 | 1
 392 | 1
 393 | 1
 394 | 1
 395 | 1
 396 | 1
 397 | 1
 398 | 1
 399 | 1
 400 | 1
     | 1
(401 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b
from multi_test_skip
where b = 1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on multi_test_skip  (cost=60.46..90.47 rows=401 width=8) (actual rows=401.00 loops=1)
   Recheck Cond: (b = 1)
   Heap Blocks: exact=25
   Buffers: shared hit=33
   ->  Bitmap Index Scan on multi_test_skip_idx  (cost=0.00..60.36 rows=401 width=0) (actual rows=401.00 loops=1)
         Index Cond: (b = 1)
         Index Searches: 1
         Buffers: shared hit=8
(8 rows)

-- Reset
set enable_indexonlyscan to on;
set enable_indexscan to on;
-- (June 6)
-- Backwards scan, visibly breaks when I was refactoring code in
-- _bt_advance_array_keys so that it dealt with out-of-bounds skip array case more
-- like conventional array case (i.e. by using result/beyond_end_advance
-- variables directly, not just taking instructions from _bt_binsrch_array_skey
-- skip array logic):
select a, b from multi_test_skip where a in (3,4,5) and b < 1
order by a desc, b desc;
 a | b 
---+---
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
(39 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b from multi_test_skip where a in (3,4,5) and b < 1
order by a desc, b desc;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using multi_test_skip_idx on multi_test_skip  (cost=0.28..7.63 rows=39 width=8) (actual rows=39.00 loops=1)
   Index Cond: ((a = ANY ('{3,4,5}'::integer[])) AND (b < 1))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=3
(5 rows)

drop index multi_test_skip_idx;
-- Test that roll over logic doesn't increment sk_datum plus remove NULL sk
-- marking when it should just do the latter.  Bug found in NULLS FIRST case
-- after returning from pgConf.dev.
--
-- (June 3)
create index multi_test_skip_idx_nulls_first on multi_test_skip(a nulls first, b);
-- Insert INT_MIN value that had better not be overlooked here:
insert into multi_test_skip
select -2147483648, 1;
vacuum analyze multi_test_skip;
select a, b
from multi_test_skip
where b = 1
order by a nulls first, b limit 5;
      a      | b 
-------------+---
             | 1
 -2147483648 | 1
           1 | 1
           2 | 1
           3 | 1
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b
from multi_test_skip
where b = 1
order by a nulls first, b limit 5;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.28..1.08 rows=5 width=8) (actual rows=5.00 loops=1)
   Buffers: shared hit=3
   ->  Index Only Scan using multi_test_skip_idx_nulls_first on multi_test_skip  (cost=0.28..64.38 rows=402 width=8) (actual rows=5.00 loops=1)
         Index Cond: (b = 1)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=3
(7 rows)

drop index multi_test_skip_idx_nulls_first;
-- (June 9)
-- DESC NULLS LAST
create index multi_test_skip_idx_desc_nulls_last on multi_test_skip(a desc nulls last, b);
select a, b
from multi_test_skip
where b = 1
order by a desc nulls last, b limit 5;
  a  | b 
-----+---
 400 | 1
 399 | 1
 398 | 1
 397 | 1
 396 | 1
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b
from multi_test_skip
where b = 1
order by a desc nulls last, b limit 5;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.28..1.08 rows=5 width=8) (actual rows=5.00 loops=1)
   Buffers: shared hit=3
   ->  Index Only Scan using multi_test_skip_idx_desc_nulls_last on multi_test_skip  (cost=0.28..64.38 rows=402 width=8) (actual rows=5.00 loops=1)
         Index Cond: (b = 1)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=3
(7 rows)

select a, b
from multi_test_skip
where b = 1
order by a desc nulls last, b limit 5 offset 397;
      a      | b 
-------------+---
           3 | 1
           2 | 1
           1 | 1
 -2147483648 | 1
             | 1
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b
from multi_test_skip
where b = 1
order by a desc nulls last, b limit 5 offset 397;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=63.59..64.38 rows=5 width=8) (actual rows=5.00 loops=1)
   Buffers: shared hit=9
   ->  Index Only Scan using multi_test_skip_idx_desc_nulls_last on multi_test_skip  (cost=0.28..64.38 rows=402 width=8) (actual rows=402.00 loops=1)
         Index Cond: (b = 1)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=9
(7 rows)

drop index multi_test_skip_idx_desc_nulls_last;
create index multi_test_skip_desc_idx on multi_test_skip(a desc, b desc);
-- Backwards scan:
select a, b from multi_test_skip where a in (3,4,5) and b > 0
order by a, b;
 a | b 
---+---
 3 | 1
 4 | 1
 5 | 1
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b from multi_test_skip where a in (3,4,5) and b > 0
order by a, b;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using multi_test_skip_desc_idx on multi_test_skip  (cost=0.28..6.91 rows=3 width=8) (actual rows=3.00 loops=1)
   Index Cond: ((a = ANY ('{3,4,5}'::integer[])) AND (b > 0))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=3
(5 rows)

-- Forwards scan:
select a, b from multi_test_skip where a in (3,4,5) and b > 0
order by a desc, b desc;
 a | b 
---+---
 5 | 1
 4 | 1
 3 | 1
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b from multi_test_skip where a in (3,4,5) and b > 0
order by a desc, b desc;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using multi_test_skip_desc_idx on multi_test_skip  (cost=0.28..6.91 rows=3 width=8) (actual rows=3.00 loops=1)
   Index Cond: ((a = ANY ('{3,4,5}'::integer[])) AND (b > 0))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=3
(5 rows)

-- Backwards scan:
select a, b from multi_test_skip where a in (3,4,5) and b < 1
order by a, b;
 a | b 
---+---
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
(39 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b from multi_test_skip where a in (3,4,5) and b < 1
order by a, b;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using multi_test_skip_desc_idx on multi_test_skip  (cost=0.28..7.63 rows=39 width=8) (actual rows=39.00 loops=1)
   Index Cond: ((a = ANY ('{3,4,5}'::integer[])) AND (b < 1))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=3
(5 rows)

-- Forwards scan:
select a, b from multi_test_skip where a in (3,4,5) and b < 1
order by a desc, b desc;
 a | b 
---+---
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 5 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 4 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
 3 | 0
(39 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b from multi_test_skip where a in (3,4,5) and b < 1
order by a desc, b desc;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using multi_test_skip_desc_idx on multi_test_skip  (cost=0.28..7.63 rows=39 width=8) (actual rows=39.00 loops=1)
   Index Cond: ((a = ANY ('{3,4,5}'::integer[])) AND (b < 1))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=3
(5 rows)

-- (August 13)
--
-- Add test coverage for this code path:
--
-- @@ -1924,7 +1927,10 @@ _bt_binsrch_skiparray_skey(FmgrInfo *orderproc,
--          if (array->null_elem)
--              *set_elem_result = 0;   /* NULL "=" NULL */
--          else if (cur->sk_flags & SK_BT_NULLS_FIRST)
-- +        {
-- +            elog(WARNING, "fff");   <-- fff indicates covered path
--              *set_elem_result = -1;  /* NULL "<" NOT_NULL */
-- +        }
--          else
--              *set_elem_result = 1;   /* NULL ">" NOT_NULL */
create index multi_test_skip_idx_nulls_first_nulls_first
on
multi_test_skip(a asc nulls first, b asc nulls first, c);
insert into multi_test_skip
select
  3,
  case when i < 14 then
    NULL
  else
    1
  end
from
  generate_series(1, 14) i,
  generate_series(1, 400) j
order by
  j,
  i;
vacuum analyze multi_test_skip;
select a, b, c
from multi_test_skip
where b < 1 and c is not null
order by a desc nulls last, b desc nulls last;
 a | b | c 
---+---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select a, b, c
from multi_test_skip
where b < 1 and c is not null
order by a desc nulls last, b desc nulls last;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using multi_test_skip_idx_nulls_first_nulls_first on multi_test_skip  (cost=0.29..146.41 rows=1 width=12) (actual rows=0.00 loops=1)
   Index Cond: ((b < 1) AND (c IS NOT NULL))
   Heap Fetches: 0
   Index Searches: 2
   Buffers: shared hit=14
(5 rows)

drop index multi_test_skip_idx_nulls_first_nulls_first;
----------------
-- UUID tests --
----------------
-- (June 5)
--
-- UUID is notable for being a pass-by-reference type that can use the
-- increment/decrement stuff in roughly the same way as types like integer and
-- date.  It's a good way of making things like memory management and copying
-- of datums work, because I can do that stuff without first figuring out how
-- to do next value probes that are expected to be required by more popular
-- pass-by-reference types such as text.
--
-- Another notable thing about UUID is that it's unlikely that rolling over and
-- incrementing the existing UUID value will result in a UUID value that
-- actually finds a match in the index -- that makes it a lot closer to types
-- like text than to discrete types like integer.  With types like integer,
-- we somewhat expect that incrementing/decrementing the current value will
-- actually result in a value that finds matches in the index.
set client_min_messages=error;
DROP TABLE if exists uuid_tests;
reset client_min_messages;
create unlogged table uuid_tests
(
  skippy uuid,
  predval int4
);
create index uuid_tests_idx on uuid_tests(skippy, predval);
insert into uuid_tests
select '00000000-0000-0000-0000-000000000001', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select '10000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select '20000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select '30000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select '40000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select '50000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select '60000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select '70000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select '80000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select '90000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select 'A0000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select 'B0000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select 'C0000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select 'D0000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select 'E0000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select 'F0000000-0000-0000-0000-000000000000', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFE', j from
  generate_series(1, 5000) j;
insert into uuid_tests
select NULL, j from
  generate_series(1, 5000) j;
vacuum analyze uuid_tests;
-- Basic skip scan test case for UUID:
select skippy, predval
from uuid_tests
where predval = 777 order by skippy, predval;
                skippy                | predval 
--------------------------------------+---------
 00000000-0000-0000-0000-000000000001 |     777
 10000000-0000-0000-0000-000000000000 |     777
 20000000-0000-0000-0000-000000000000 |     777
 30000000-0000-0000-0000-000000000000 |     777
 40000000-0000-0000-0000-000000000000 |     777
 50000000-0000-0000-0000-000000000000 |     777
 60000000-0000-0000-0000-000000000000 |     777
 70000000-0000-0000-0000-000000000000 |     777
 80000000-0000-0000-0000-000000000000 |     777
 90000000-0000-0000-0000-000000000000 |     777
 a0000000-0000-0000-0000-000000000000 |     777
 b0000000-0000-0000-0000-000000000000 |     777
 c0000000-0000-0000-0000-000000000000 |     777
 d0000000-0000-0000-0000-000000000000 |     777
 e0000000-0000-0000-0000-000000000000 |     777
 f0000000-0000-0000-0000-000000000000 |     777
 ffffffff-ffff-ffff-ffff-fffffffffffe |     777
                                      |     777
(18 rows)

-- The number of descents of the index significantly exceeds the number of
-- distinct "skippy" values, since we effectively probe for the next UUID
-- value by incrementing here.  Even though explicit probes aren't really used,
-- it more or less looks like they're used in practice.
EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select skippy, predval
from uuid_tests
where predval = 777 order by skippy, predval;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Only Scan using uuid_tests_idx on uuid_tests  (cost=0.42..43.83 rows=18 width=20) (actual rows=18.00 loops=1)
   Index Cond: (predval = 777)
   Heap Fetches: 0
   Index Searches: 36
   Buffers: shared hit=111
(5 rows)

-- Basic skip scan test case for UUID, backwards scan:
select skippy, predval
from uuid_tests
where predval = 777 order by skippy desc, predval desc;
                skippy                | predval 
--------------------------------------+---------
                                      |     777
 ffffffff-ffff-ffff-ffff-fffffffffffe |     777
 f0000000-0000-0000-0000-000000000000 |     777
 e0000000-0000-0000-0000-000000000000 |     777
 d0000000-0000-0000-0000-000000000000 |     777
 c0000000-0000-0000-0000-000000000000 |     777
 b0000000-0000-0000-0000-000000000000 |     777
 a0000000-0000-0000-0000-000000000000 |     777
 90000000-0000-0000-0000-000000000000 |     777
 80000000-0000-0000-0000-000000000000 |     777
 70000000-0000-0000-0000-000000000000 |     777
 60000000-0000-0000-0000-000000000000 |     777
 50000000-0000-0000-0000-000000000000 |     777
 40000000-0000-0000-0000-000000000000 |     777
 30000000-0000-0000-0000-000000000000 |     777
 20000000-0000-0000-0000-000000000000 |     777
 10000000-0000-0000-0000-000000000000 |     777
 00000000-0000-0000-0000-000000000001 |     777
(18 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select skippy, predval
from uuid_tests
where predval = 777 order by skippy desc, predval desc;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using uuid_tests_idx on uuid_tests  (cost=0.42..43.83 rows=18 width=20) (actual rows=18.00 loops=1)
   Index Cond: (predval = 777)
   Heap Fetches: 0
   Index Searches: 36
   Buffers: shared hit=109
(5 rows)

-- (July 16) Same again ("Basic skip scan test case for UUID, backwards
-- scan"), but no skip support this time around.
-- This caught a silly bug, fixed like so:
-- diff --git a/src/backend/access/nbtree/nbtutils.c b/src/backend/access/nbtree/nbtutils.c
-- index 4b7b55a9f..d75b3e54a 100644
-- --- a/src/backend/access/nbtree/nbtutils.c
-- +++ b/src/backend/access/nbtree/nbtutils.c
-- @@ -2475,7 +2475,7 @@ _bt_scankey_skip_increment(Relation rel, ScanDirection dir,
--               * This saves a useless primitive index scan that would otherwise
--               * try to locate a value before NULL.
--               */
-- -            if (sk_isnull && !(skey->sk_flags & SK_BT_NULLS_FIRST))
-- +            if (sk_isnull && (skey->sk_flags & SK_BT_NULLS_FIRST))
--                  goto rollover;
--
-- Test:
set skipscan_skipsupport_enabled=false;
ERROR:  unrecognized configuration parameter "skipscan_skipsupport_enabled"
select skippy, predval
from uuid_tests
where predval = 777 order by skippy desc, predval desc;
                skippy                | predval 
--------------------------------------+---------
                                      |     777
 ffffffff-ffff-ffff-ffff-fffffffffffe |     777
 f0000000-0000-0000-0000-000000000000 |     777
 e0000000-0000-0000-0000-000000000000 |     777
 d0000000-0000-0000-0000-000000000000 |     777
 c0000000-0000-0000-0000-000000000000 |     777
 b0000000-0000-0000-0000-000000000000 |     777
 a0000000-0000-0000-0000-000000000000 |     777
 90000000-0000-0000-0000-000000000000 |     777
 80000000-0000-0000-0000-000000000000 |     777
 70000000-0000-0000-0000-000000000000 |     777
 60000000-0000-0000-0000-000000000000 |     777
 50000000-0000-0000-0000-000000000000 |     777
 40000000-0000-0000-0000-000000000000 |     777
 30000000-0000-0000-0000-000000000000 |     777
 20000000-0000-0000-0000-000000000000 |     777
 10000000-0000-0000-0000-000000000000 |     777
 00000000-0000-0000-0000-000000000001 |     777
(18 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select skippy, predval
from uuid_tests
where predval = 777 order by skippy desc, predval desc;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using uuid_tests_idx on uuid_tests  (cost=0.42..43.83 rows=18 width=20) (actual rows=18.00 loops=1)
   Index Cond: (predval = 777)
   Heap Fetches: 0
   Index Searches: 36
   Buffers: shared hit=109
(5 rows)

reset skipscan_skipsupport_enabled;
ERROR:  unrecognized configuration parameter "skipscan_skipsupport_enabled"
-- SAOP skip scan test case for UUID:
select count(*)
from uuid_tests
where predval in (333, 4000, 4500, 5000);
 count 
-------
    72
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select count(*)
from uuid_tests
where predval in (333, 4000, 4500, 5000);
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=165.50..165.51 rows=1 width=8) (actual rows=1.00 loops=1)
   Buffers: shared hit=222
   ->  Index Only Scan using uuid_tests_idx on uuid_tests  (cost=0.42..165.32 rows=72 width=0) (actual rows=72.00 loops=1)
         Index Cond: (predval = ANY ('{333,4000,4500,5000}'::integer[]))
         Heap Fetches: 0
         Index Searches: 73
         Buffers: shared hit=222
(7 rows)

-- Equivalent-ish range scan formulation (expected to do same accesses, and
-- give same answer):
select count(*)
from uuid_tests
where skippy between '00000000-0000-0000-0000-000000000000' and 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF'
and
predval in (333, 4000, 4500, 5000);
 count 
-------
    68
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- COSTS OFF added to get stable test output
select count(*)
from uuid_tests
where skippy between '00000000-0000-0000-0000-000000000000' and 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF'
and
predval in (333, 4000, 4500, 5000);
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate (actual rows=1.00 loops=1)
   Buffers: shared hit=210
   ->  Index Only Scan using uuid_tests_idx on uuid_tests (actual rows=68.00 loops=1)
         Index Cond: ((skippy >= '00000000-0000-0000-0000-000000000000'::uuid) AND (skippy <= 'ffffffff-ffff-ffff-ffff-ffffffffffff'::uuid) AND (predval = ANY ('{333,4000,4500,5000}'::integer[])))
         Heap Fetches: 0
         Index Searches: 69
         Buffers: shared hit=210
(7 rows)

-- Equivalent-ish range scan formulation using > and < operators (expected to do same accesses, and
-- give same answer) -- stresses preprocessing with pass-by-reference types:
--
-- (UPDATE July 22) This arguably regressed a bit when we went from setting
-- low_elem and high_elem during preprocessing to always directly using the
-- inequalities to fix cross-type range bugs.  One extra primitive index scan.
select count(*)
from uuid_tests
where skippy > '00000000-0000-0000-0000-000000000000' and skippy < 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF'
and
predval in (333, 4000, 4500, 5000);
 count 
-------
    68
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- COSTS OFF added to get stable test output
select count(*)
from uuid_tests
where skippy > '00000000-0000-0000-0000-000000000000' and skippy < 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF'
and
predval in (333, 4000, 4500, 5000);
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate (actual rows=1.00 loops=1)
   Buffers: shared hit=207
   ->  Index Only Scan using uuid_tests_idx on uuid_tests (actual rows=68.00 loops=1)
         Index Cond: ((skippy > '00000000-0000-0000-0000-000000000000'::uuid) AND (skippy < 'ffffffff-ffff-ffff-ffff-ffffffffffff'::uuid) AND (predval = ANY ('{333,4000,4500,5000}'::integer[])))
         Heap Fetches: 0
         Index Searches: 68
         Buffers: shared hit=207
(7 rows)

-- For good luck, more inequality stuff designed to stress preprocessing code
-- (note that these are boundary cases):
--
-- (UPDATE July 22) This arguably regressed a bit when we went from setting
-- low_elem and high_elem during preprocessing to always directly using the
-- inequalities to fix cross-type range bugs.  One extra primitive index scan.
prepare uuid_good_luck as
select count(*)
from uuid_tests
where skippy > '0FFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF' and skippy < 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFE'
and
predval in (333, 4000, 4500, 5000);
execute uuid_good_luck;
 count 
-------
    60
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- COSTS OFF added to get stable test output
execute uuid_good_luck;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate (actual rows=1.00 loops=1)
   Buffers: shared hit=182
   ->  Index Only Scan using uuid_tests_idx on uuid_tests (actual rows=60.00 loops=1)
         Index Cond: ((skippy > '0fffffff-ffff-ffff-ffff-ffffffffffff'::uuid) AND (skippy < 'ffffffff-ffff-ffff-ffff-fffffffffffe'::uuid) AND (predval = ANY ('{333,4000,4500,5000}'::integer[])))
         Heap Fetches: 0
         Index Searches: 60
         Buffers: shared hit=182
(7 rows)

deallocate uuid_good_luck;
-----------------------------
-- create_index NULL tests --
-----------------------------
set client_min_messages=error;
DROP TABLE if exists onek_skipscan;
DROP TABLE if exists onek_with_null;
reset client_min_messages;
CREATE unlogged TABLE onek_skipscan (
	unique1		int4,
	unique2		int4,
	two			int4,
	four		int4,
	ten			int4,
	twenty		int4,
	hundred		int4,
	thousand	int4,
	twothousand	int4,
	fivethous	int4,
	tenthous	int4,
	odd			int4,
	even		int4,
	stringu1	name,
	stringu2	name,
	string4		name
);
\getenv abs_srcdir PG_ABS_SRCDIR
\set filename :abs_srcdir '/data/onek.data'
COPY onek_skipscan FROM :'filename';
VACUUM ANALYZE onek_skipscan;
SET enable_indexscan = ON;
SET enable_bitmapscan = ON;
-- First with skip support
set skipscan_skipsupport_enabled=true;
ERROR:  unrecognized configuration parameter "skipscan_skipsupport_enabled"
CREATE unlogged TABLE onek_with_null AS SELECT unique1, unique2 FROM onek_skipscan ;
INSERT INTO onek_with_null (unique1,unique2) VALUES (NULL, -1), (NULL, NULL);
CREATE UNIQUE INDEX onek_with_null_unique2_unique1 ON onek_with_null (unique2,unique1);
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

 /* 1 */ SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
   499
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_with_null_unique2_unique1;
CREATE UNIQUE INDEX onek_with_null_unique2desc_unique1 ON onek_with_null (unique2 desc,unique1);
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

 /* 2 */ SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
   499
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IN (-1, 0, 1);
 count 
-------
     1
(1 row)

DROP INDEX onek_with_null_unique2desc_unique1;
CREATE UNIQUE INDEX onek_with_null_unique2descnullslast_unique1 ON onek_with_null (unique2 desc nulls last,unique1);
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

 /* 3 */ SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
   499
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_with_null_unique2descnullslast_unique1;
CREATE UNIQUE INDEX onek_with_null_unique2ascnullsfirst_unique1 ON onek_with_null (unique2  nulls first,unique1);
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

 /* 4 */ SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
   499
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_with_null_unique2ascnullsfirst_unique1;
-- Check initial-positioning logic too
CREATE UNIQUE INDEX onek_with_null_unique2 ON onek_with_null (unique2);
SET enable_indexscan = ON;
SET enable_bitmapscan = OFF;
SELECT unique1, unique2 FROM onek_with_null
  ORDER BY unique2 LIMIT 2;
 unique1 | unique2 
---------+---------
         |      -1
     147 |       0
(2 rows)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 >= 0
  ORDER BY unique2 LIMIT 2;
 unique1 | unique2 
---------+---------
     147 |       0
     931 |       1
(2 rows)

SELECT unique1, unique2 FROM onek_with_null
  ORDER BY unique2 DESC LIMIT 2;
 unique1 | unique2 
---------+---------
         |        
     278 |     999
(2 rows)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 >= -1
  ORDER BY unique2 DESC LIMIT 2;
 unique1 | unique2 
---------+---------
     278 |     999
       0 |     998
(2 rows)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 < 999
  ORDER BY unique2 DESC LIMIT 2;
 unique1 | unique2 
---------+---------
       0 |     998
     744 |     997
(2 rows)

-- Now without skip support
DROP TABLE onek_with_null;
set skipscan_skipsupport_enabled=false;
ERROR:  unrecognized configuration parameter "skipscan_skipsupport_enabled"
CREATE unlogged TABLE onek_with_null AS SELECT unique1, unique2 FROM onek_skipscan ;
INSERT INTO onek_with_null (unique1,unique2) VALUES (NULL, -1), (NULL, NULL);
CREATE UNIQUE INDEX onek_with_null_unique2_unique1 ON onek_with_null (unique2,unique1);
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

 /* 5 */ SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
   499
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_with_null_unique2_unique1;
CREATE UNIQUE INDEX onek_with_null_unique2desc_unique1 ON onek_with_null (unique2 desc,unique1);
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

 /* 6 */ SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
   499
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IN (-1, 0, 1);
 count 
-------
     1
(1 row)

DROP INDEX onek_with_null_unique2desc_unique1;
CREATE UNIQUE INDEX onek_with_null_unique2descnullslast_unique1 ON onek_with_null (unique2 desc nulls last,unique1);
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

 /* 7 */ SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
   499
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_with_null_unique2descnullslast_unique1;
CREATE UNIQUE INDEX onek_with_null_unique2ascnullsfirst_unique1 ON onek_with_null (unique2  nulls first,unique1);
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

 /* 8 */ SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
   499
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_with_null_unique2ascnullsfirst_unique1;
-- Check initial-positioning logic too
CREATE UNIQUE INDEX onek_with_null_unique2 ON onek_with_null (unique2);
SET enable_indexscan = ON;
SET enable_bitmapscan = OFF;
SELECT unique1, unique2 FROM onek_with_null
  ORDER BY unique2 LIMIT 2;
 unique1 | unique2 
---------+---------
         |      -1
     147 |       0
(2 rows)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 >= 0
  ORDER BY unique2 LIMIT 2;
 unique1 | unique2 
---------+---------
     147 |       0
     931 |       1
(2 rows)

SELECT unique1, unique2 FROM onek_with_null
  ORDER BY unique2 DESC LIMIT 2;
 unique1 | unique2 
---------+---------
         |        
     278 |     999
(2 rows)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 >= -1
  ORDER BY unique2 DESC LIMIT 2;
 unique1 | unique2 
---------+---------
     278 |     999
       0 |     998
(2 rows)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 < 999
  ORDER BY unique2 DESC LIMIT 2;
 unique1 | unique2 
---------+---------
       0 |     998
     744 |     997
(2 rows)

reset skipscan_skipsupport_enabled;
ERROR:  unrecognized configuration parameter "skipscan_skipsupport_enabled"
RESET enable_indexscan;
RESET enable_bitmapscan;
--------------------------------
-- MDAM paper small test case --
--------------------------------
set client_min_messages=error;
drop table if exists sales_mdam_paper_small;
reset client_min_messages;
create unlogged table sales_mdam_paper_small
(
  dept int4,
  sdate date,
  item_class serial,
  store int4,
  item int4,
  total_sales numeric
);
create index mdam_small_idx on sales_mdam_paper_small(dept, sdate, item_class, store);
vacuum analyze sales_mdam_paper_small;
-- Load data
insert into sales_mdam_paper_small (dept, sdate, item_class, store, total_sales)
select
  dept,
  '1995-01-01'::date + sdate,
  item_class,
  store,
  (random() * 500.0) as total_sales
from
  generate_series(1, 1) dept,
  generate_series(1, 4) sdate,
  generate_series(1, 8) item_class,
  generate_series(1, 3) store;
-- Mixes range arrays with conventional SAOPs, leading to confusion about
-- boundary conditions:
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate between '1995-01-04' and '1995-01-05'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
  ctid  | dept |   sdate    | item_class | store 
--------+------+------------+------------+-------
 (0,8)  |    1 | 01-04-1995 |          1 |     2
 (0,9)  |    1 | 01-04-1995 |          1 |     3
 (0,32) |    1 | 01-04-1995 |          3 |     2
 (0,33) |    1 | 01-04-1995 |          3 |     3
 (0,56) |    1 | 01-04-1995 |          5 |     2
 (0,57) |    1 | 01-04-1995 |          5 |     3
 (0,11) |    1 | 01-05-1995 |          1 |     2
 (0,12) |    1 | 01-05-1995 |          1 |     3
 (0,35) |    1 | 01-05-1995 |          3 |     2
 (0,36) |    1 | 01-05-1995 |          3 |     3
 (0,59) |    1 | 01-05-1995 |          5 |     2
 (0,60) |    1 | 01-05-1995 |          5 |     3
(12 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate between '1995-01-04' and '1995-01-05'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using mdam_small_idx on sales_mdam_paper_small  (cost=0.14..7.68 rows=1 width=22) (actual rows=12.00 loops=1)
   Index Cond: ((sdate >= '01-04-1995'::date) AND (sdate <= '01-05-1995'::date) AND (item_class = ANY ('{1,3,5}'::integer[])) AND (store = ANY ('{2,3}'::integer[])))
   Index Searches: 1
   Buffers: shared hit=2
(4 rows)

-- Non-skip-support, repeat "Mixes range arrays with conventional SAOPs,
-- leading to confusion about boundary conditions":
set skipscan_skipsupport_enabled=false;
ERROR:  unrecognized configuration parameter "skipscan_skipsupport_enabled"
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate between '1995-01-04' and '1995-01-05'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
  ctid  | dept |   sdate    | item_class | store 
--------+------+------------+------------+-------
 (0,8)  |    1 | 01-04-1995 |          1 |     2
 (0,9)  |    1 | 01-04-1995 |          1 |     3
 (0,32) |    1 | 01-04-1995 |          3 |     2
 (0,33) |    1 | 01-04-1995 |          3 |     3
 (0,56) |    1 | 01-04-1995 |          5 |     2
 (0,57) |    1 | 01-04-1995 |          5 |     3
 (0,11) |    1 | 01-05-1995 |          1 |     2
 (0,12) |    1 | 01-05-1995 |          1 |     3
 (0,35) |    1 | 01-05-1995 |          3 |     2
 (0,36) |    1 | 01-05-1995 |          3 |     3
 (0,59) |    1 | 01-05-1995 |          5 |     2
 (0,60) |    1 | 01-05-1995 |          5 |     3
(12 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate between '1995-01-04' and '1995-01-05'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using mdam_small_idx on sales_mdam_paper_small  (cost=0.14..7.68 rows=1 width=22) (actual rows=12.00 loops=1)
   Index Cond: ((sdate >= '01-04-1995'::date) AND (sdate <= '01-05-1995'::date) AND (item_class = ANY ('{1,3,5}'::integer[])) AND (store = ANY ('{2,3}'::integer[])))
   Index Searches: 1
   Buffers: shared hit=2
(4 rows)

reset skipscan_skipsupport_enabled;
ERROR:  unrecognized configuration parameter "skipscan_skipsupport_enabled"
-- Same again, but this time we use different operators/constants to get the
-- same effective date range as original BETWEEN version:
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate > '1995-01-03' and sdate <= '1995-01-05'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
  ctid  | dept |   sdate    | item_class | store 
--------+------+------------+------------+-------
 (0,8)  |    1 | 01-04-1995 |          1 |     2
 (0,9)  |    1 | 01-04-1995 |          1 |     3
 (0,32) |    1 | 01-04-1995 |          3 |     2
 (0,33) |    1 | 01-04-1995 |          3 |     3
 (0,56) |    1 | 01-04-1995 |          5 |     2
 (0,57) |    1 | 01-04-1995 |          5 |     3
 (0,11) |    1 | 01-05-1995 |          1 |     2
 (0,12) |    1 | 01-05-1995 |          1 |     3
 (0,35) |    1 | 01-05-1995 |          3 |     2
 (0,36) |    1 | 01-05-1995 |          3 |     3
 (0,59) |    1 | 01-05-1995 |          5 |     2
 (0,60) |    1 | 01-05-1995 |          5 |     3
(12 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate > '1995-01-03' and sdate <= '1995-01-05'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using mdam_small_idx on sales_mdam_paper_small  (cost=0.14..7.68 rows=1 width=22) (actual rows=12.00 loops=1)
   Index Cond: ((sdate > '01-03-1995'::date) AND (sdate <= '01-05-1995'::date) AND (item_class = ANY ('{1,3,5}'::integer[])) AND (store = ANY ('{2,3}'::integer[])))
   Index Searches: 1
   Buffers: shared hit=2
(4 rows)

-- Ditto:
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate > '1995-01-03' and sdate < '1995-01-06'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
  ctid  | dept |   sdate    | item_class | store 
--------+------+------------+------------+-------
 (0,8)  |    1 | 01-04-1995 |          1 |     2
 (0,9)  |    1 | 01-04-1995 |          1 |     3
 (0,32) |    1 | 01-04-1995 |          3 |     2
 (0,33) |    1 | 01-04-1995 |          3 |     3
 (0,56) |    1 | 01-04-1995 |          5 |     2
 (0,57) |    1 | 01-04-1995 |          5 |     3
 (0,11) |    1 | 01-05-1995 |          1 |     2
 (0,12) |    1 | 01-05-1995 |          1 |     3
 (0,35) |    1 | 01-05-1995 |          3 |     2
 (0,36) |    1 | 01-05-1995 |          3 |     3
 (0,59) |    1 | 01-05-1995 |          5 |     2
 (0,60) |    1 | 01-05-1995 |          5 |     3
(12 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate > '1995-01-03' and sdate < '1995-01-06'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using mdam_small_idx on sales_mdam_paper_small  (cost=0.14..7.68 rows=1 width=22) (actual rows=12.00 loops=1)
   Index Cond: ((sdate > '01-03-1995'::date) AND (sdate < '01-06-1995'::date) AND (item_class = ANY ('{1,3,5}'::integer[])) AND (store = ANY ('{2,3}'::integer[])))
   Index Searches: 1
   Buffers: shared hit=2
(4 rows)

-- range on date has no lower bound (or lower bound is -inf):
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate < '1995-01-04'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
  ctid  | dept |   sdate    | item_class | store 
--------+------+------------+------------+-------
 (0,2)  |    1 | 01-02-1995 |          1 |     2
 (0,3)  |    1 | 01-02-1995 |          1 |     3
 (0,26) |    1 | 01-02-1995 |          3 |     2
 (0,27) |    1 | 01-02-1995 |          3 |     3
 (0,50) |    1 | 01-02-1995 |          5 |     2
 (0,51) |    1 | 01-02-1995 |          5 |     3
 (0,5)  |    1 | 01-03-1995 |          1 |     2
 (0,6)  |    1 | 01-03-1995 |          1 |     3
 (0,29) |    1 | 01-03-1995 |          3 |     2
 (0,30) |    1 | 01-03-1995 |          3 |     3
 (0,53) |    1 | 01-03-1995 |          5 |     2
 (0,54) |    1 | 01-03-1995 |          5 |     3
(12 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate < '1995-01-04'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Index Scan using mdam_small_idx on sales_mdam_paper_small  (cost=0.14..7.43 rows=1 width=22) (actual rows=12.00 loops=1)
   Index Cond: ((sdate < '01-04-1995'::date) AND (item_class = ANY ('{1,3,5}'::integer[])) AND (store = ANY ('{2,3}'::integer[])))
   Index Searches: 1
   Buffers: shared hit=2
(4 rows)

-- range on date has no upper bound (or upper bound is +inf):
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate > '1995-01-04'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
  ctid  | dept |   sdate    | item_class | store 
--------+------+------------+------------+-------
 (0,11) |    1 | 01-05-1995 |          1 |     2
 (0,12) |    1 | 01-05-1995 |          1 |     3
 (0,35) |    1 | 01-05-1995 |          3 |     2
 (0,36) |    1 | 01-05-1995 |          3 |     3
 (0,59) |    1 | 01-05-1995 |          5 |     2
 (0,60) |    1 | 01-05-1995 |          5 |     3
(6 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  sdate > '1995-01-04'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Index Scan using mdam_small_idx on sales_mdam_paper_small  (cost=0.14..7.43 rows=1 width=22) (actual rows=6.00 loops=1)
   Index Cond: ((sdate > '01-04-1995'::date) AND (item_class = ANY ('{1,3,5}'::integer[])) AND (store = ANY ('{2,3}'::integer[])))
   Index Searches: 1
   Buffers: shared hit=2
(4 rows)

-- Now don't omit dept key, without changing rows returned:
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  dept between 0 and 100
  and sdate between '1995-01-04' and '1995-01-05'
  and item_class = 3
  and store = 2
order by dept, sdate, item_class, store;
  ctid  | dept |   sdate    | item_class | store 
--------+------+------------+------------+-------
 (0,32) |    1 | 01-04-1995 |          3 |     2
 (0,35) |    1 | 01-05-1995 |          3 |     2
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  dept between 0 and 100
  and sdate between '1995-01-04' and '1995-01-05'
  and item_class = 3
  and store = 2
order by dept, sdate, item_class, store;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using mdam_small_idx on sales_mdam_paper_small  (cost=0.14..4.17 rows=1 width=22) (actual rows=2.00 loops=1)
   Index Cond: ((dept >= 0) AND (dept <= 100) AND (sdate >= '01-04-1995'::date) AND (sdate <= '01-05-1995'::date) AND (item_class = 3) AND (store = 2))
   Index Searches: 1
   Buffers: shared hit=2
(4 rows)

-- Now don't omit dept key, without changing rows returned (matches original
-- query by including conventional SAOPs to make it harder to get right):
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  dept between 0 and 100
  and sdate between '1995-01-04' and '1995-01-05'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
  ctid  | dept |   sdate    | item_class | store 
--------+------+------------+------------+-------
 (0,8)  |    1 | 01-04-1995 |          1 |     2
 (0,9)  |    1 | 01-04-1995 |          1 |     3
 (0,32) |    1 | 01-04-1995 |          3 |     2
 (0,33) |    1 | 01-04-1995 |          3 |     3
 (0,56) |    1 | 01-04-1995 |          5 |     2
 (0,57) |    1 | 01-04-1995 |          5 |     3
 (0,11) |    1 | 01-05-1995 |          1 |     2
 (0,12) |    1 | 01-05-1995 |          1 |     3
 (0,35) |    1 | 01-05-1995 |          3 |     2
 (0,36) |    1 | 01-05-1995 |          3 |     3
 (0,59) |    1 | 01-05-1995 |          5 |     2
 (0,60) |    1 | 01-05-1995 |          5 |     3
(12 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select
  ctid, dept, sdate, item_class, store
from sales_mdam_paper_small
where
  dept between 0 and 100
  and sdate between '1995-01-04' and '1995-01-05'
  and item_class in (1, 3, 5)
  and store in (2, 3)
order by dept, sdate, item_class, store;
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using mdam_small_idx on sales_mdam_paper_small  (cost=0.14..4.17 rows=1 width=22) (actual rows=12.00 loops=1)
   Index Cond: ((dept >= 0) AND (dept <= 100) AND (sdate >= '01-04-1995'::date) AND (sdate <= '01-05-1995'::date) AND (item_class = ANY ('{1,3,5}'::integer[])) AND (store = ANY ('{2,3}'::integer[])))
   Index Searches: 1
   Buffers: shared hit=2
(4 rows)

-----------------------
-- tenk1 test cases  --
-----------------------
set client_min_messages=error;
drop table if exists tenk1_skipscan;
reset client_min_messages;
CREATE UNLOGGED TABLE tenk1_skipscan (
	unique1		int4,
	unique2		int4,
	two			int4,
	four		int4,
	ten			int4,
	twenty		int4,
	hundred		int4,
	thousand	int4,
	twothousand	int4,
	fivethous	int4,
	tenthous	int4,
	odd			int4,
	even		int4,
	stringu1	name,
	stringu2	name,
	string4		name
);
ALTER TABLE tenk1_skipscan SET (autovacuum_enabled=off);
\getenv abs_srcdir PG_ABS_SRCDIR
\set filename :abs_srcdir '/data/tenk.data'
COPY tenk1_skipscan FROM :'filename';
VACUUM ANALYZE tenk1_skipscan;
CREATE INDEX tenk1_skipscan_four_unique1 ON tenk1_skipscan (four, unique1);
prepare tenk1_four_skipscan as
SELECT four, unique1 FROM tenk1_skipscan
 WHERE unique1 = 444;
execute tenk1_four_skipscan;
 four | unique1 
------+---------
    0 |     444
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- master 30 hits
execute tenk1_four_skipscan;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using tenk1_skipscan_four_unique1 on tenk1_skipscan  (cost=0.29..11.47 rows=1 width=8) (actual rows=1.00 loops=1)
   Index Cond: (unique1 = 444)
   Heap Fetches: 0
   Index Searches: 5
   Buffers: shared hit=11
(5 rows)

deallocate tenk1_four_skipscan;
prepare tenk1_four_skipscan_with_saop as
select four, unique1 from tenk1_skipscan where unique1 in (4444, 4445) limit 3;
execute tenk1_four_skipscan_with_saop;
 four | unique1 
------+---------
    0 |    4444
    1 |    4445
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- master 31 hits
execute tenk1_four_skipscan_with_saop;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..20.95 rows=2 width=8) (actual rows=2.00 loops=1)
   Buffers: shared hit=13
   ->  Index Only Scan using tenk1_skipscan_four_unique1 on tenk1_skipscan  (cost=0.29..20.95 rows=2 width=8) (actual rows=2.00 loops=1)
         Index Cond: (unique1 = ANY ('{4444,4445}'::integer[]))
         Heap Fetches: 0
         Index Searches: 6
         Buffers: shared hit=13
(7 rows)

deallocate tenk1_four_skipscan_with_saop;
-- Challenge here is to not do significantly worse than master branch's
-- traditional full index scan, since skipping isn't going to work here:
drop index tenk1_skipscan_four_unique1;
CREATE INDEX tenk1_skipscan_hundred_unique1 ON tenk1_skipscan (hundred, unique1);
prepare tenk1_fallback_to_regular_fullscan as
SELECT hundred, unique1 FROM tenk1_skipscan
 WHERE unique1 = 444;
execute tenk1_fallback_to_regular_fullscan;
 hundred | unique1 
---------+---------
      44 |     444
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- master 30 hits
execute tenk1_fallback_to_regular_fullscan;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using tenk1_skipscan_hundred_unique1 on tenk1_skipscan  (cost=0.29..135.29 rows=1 width=8) (actual rows=1.00 loops=1)
   Index Cond: (unique1 = 444)
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=30
(5 rows)

deallocate tenk1_fallback_to_regular_fullscan;
drop index tenk1_skipscan_hundred_unique1;
CREATE INDEX tenk1_skipscan_two_four_twenty ON tenk1_skipscan (two, four, twenty);
-- This test case caught sloppiness in adding new "input" skip scan keys for
-- index attributes that already had = strategy scan keys:
set enable_hashagg=off; -- XXX 2024-12-18 force sort-based agg, to get stable test output
select distinct four, twenty from tenk1_skipscan
where four in (1, 2) and twenty in (1, 2);
 four | twenty 
------+--------
    1 |      1
    2 |      2
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select distinct four, twenty from tenk1_skipscan
where four in (1, 2) and twenty in (1, 2);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=41.55..45.30 rows=80 width=8) (actual rows=2.00 loops=1)
   Buffers: shared hit=11
   ->  Sort  (cost=41.55..42.80 rows=500 width=8) (actual rows=1000.00 loops=1)
         Sort Key: four, twenty
         Sort Method: quicksort  Memory: 48kB
         Buffers: shared hit=11
         ->  Index Only Scan using tenk1_skipscan_two_four_twenty on tenk1_skipscan  (cost=0.29..19.14 rows=500 width=8) (actual rows=1000.00 loops=1)
               Index Cond: ((four = ANY ('{1,2}'::integer[])) AND (twenty = ANY ('{1,2}'::integer[])))
               Heap Fetches: 0
               Index Searches: 5
               Buffers: shared hit=11
(11 rows)

set enable_indexonlyscan=on;
-- Redundant attributes test related to bug where equality input keys
-- spuriously get their own skip input key:
select distinct two, four, twenty, hundred
from tenk1_skipscan
where
  four in (0, 1)
  and four in (1, 2)
  and twenty = 1
order by two, four, twenty;
 two | four | twenty | hundred 
-----+------+--------+---------
   1 |    1 |      1 |       1
   1 |    1 |      1 |      21
   1 |    1 |      1 |      41
   1 |    1 |      1 |      61
   1 |    1 |      1 |      81
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select distinct two, four, twenty, hundred
from tenk1_skipscan
where
  four in (0, 1)
  and four in (1, 2)
  and twenty = 1
order by two, four, twenty;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=170.51..171.76 rows=116 width=16) (actual rows=5.00 loops=1)
   Buffers: shared hit=271
   ->  Sort  (cost=170.51..170.82 rows=125 width=16) (actual rows=500.00 loops=1)
         Sort Key: two, four, hundred
         Sort Method: quicksort  Memory: 40kB
         Buffers: shared hit=271
         ->  Bitmap Heap Scan on tenk1_skipscan  (cost=10.72..166.15 rows=125 width=16) (actual rows=500.00 loops=1)
               Recheck Cond: ((four = ANY ('{0,1}'::integer[])) AND (four = ANY ('{1,2}'::integer[])) AND (twenty = 1))
               Heap Blocks: exact=263
               Buffers: shared hit=271
               ->  Bitmap Index Scan on tenk1_skipscan_two_four_twenty  (cost=0.00..10.69 rows=125 width=0) (actual rows=500.00 loops=1)
                     Index Cond: ((four = ANY ('{0,1}'::integer[])) AND (four = ANY ('{1,2}'::integer[])) AND (twenty = 1))
                     Index Searches: 4
                     Buffers: shared hit=8
(14 rows)

drop index tenk1_skipscan_two_four_twenty;
create index on tenk1_skipscan (two, four, twenty, hundred);
prepare tenk1_two_four_twenty_hundred_inequal as
select count(*), two, four, twenty, hundred
from tenk1_skipscan
where
  four in (1, 2, 3)
  and four = 1
  and twenty in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
  and hundred < 50
group by two, four, twenty, hundred
order by two, four, twenty, hundred;
execute tenk1_two_four_twenty_hundred_inequal;
 count | two | four | twenty | hundred 
-------+-----+------+--------+---------
   100 |   1 |    1 |      1 |       1
   100 |   1 |    1 |      1 |      21
   100 |   1 |    1 |      1 |      41
   100 |   1 |    1 |      5 |       5
   100 |   1 |    1 |      5 |      25
   100 |   1 |    1 |      5 |      45
   100 |   1 |    1 |      9 |       9
   100 |   1 |    1 |      9 |      29
   100 |   1 |    1 |      9 |      49
   100 |   1 |    1 |     13 |      13
   100 |   1 |    1 |     13 |      33
   100 |   1 |    1 |     17 |      17
   100 |   1 |    1 |     17 |      37
(13 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute tenk1_two_four_twenty_hundred_inequal;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=0.29..42.66 rows=564 width=24) (actual rows=13.00 loops=1)
   Group Key: two, twenty, hundred
   Buffers: shared hit=12
   ->  Index Only Scan using tenk1_skipscan_two_four_twenty_hundred_idx on tenk1_skipscan  (cost=0.29..29.05 rows=797 width=16) (actual rows=1300.00 loops=1)
         Index Cond: ((four = ANY ('{1,2,3}'::integer[])) AND (four = 1) AND (twenty = ANY ('{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}'::integer[])) AND (hundred < 50))
         Heap Fetches: 0
         Index Searches: 4
         Buffers: shared hit=12
(8 rows)

deallocate tenk1_two_four_twenty_hundred_inequal;
-------------------------------------------------------------------------------
-- upper range tenk1 test case based on aggregates.out from regression tests --
-------------------------------------------------------------------------------
create index on tenk1_skipscan (unique1, unique2);
-- Closest match for regression test:
select unique1
from tenk1_skipscan
where unique1 > 2147483647
limit 3;
 unique1 
---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select unique1
from tenk1_skipscan
where unique1 > 2147483647
limit 3;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
   Buffers: shared hit=2
   ->  Index Only Scan using tenk1_skipscan_unique1_unique2_idx on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
         Index Cond: (unique1 > 2147483647)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=3
(9 rows)

-- Same again, this time force a skip array on unique1, so that now we can
-- try to increment > to >=, but get overflow (this will make the scan qual
-- unsatisfiable, unlike the prior no-skip-array example):
--
-- XXX (November 15 2024) This used to work like this, then I stopped making
-- overflow make the qual unsatisfiable in order to make cross-type "> to >="
-- transformations work, and finally just today I decided that cross-type
-- transformations weren't going to happen -- and so we might as well have
-- this small thing in return (once you assume that cross-type support isn't
-- happening, which now seems inevitable, then it also seems easy to do this
-- marginal optimization too).
select unique1
from tenk1_skipscan
where unique1 > 2147483647
and unique2 = 101010 -- Forces unique1 to have skip array, so it gets skip array preprocessing
limit 3;
 unique1 
---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- no buffer hits this time
select unique1
from tenk1_skipscan
where unique1 > 2147483647
and unique2 = 101010 -- Forces unique1 to have skip array, so it gets skip array preprocessing
limit 3;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
   ->  Index Only Scan using tenk1_skipscan_unique1_unique2_idx on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
         Index Cond: ((unique1 > 2147483647) AND (unique2 = 101010))
         Heap Fetches: 0
         Index Searches: 0
 Planning:
   Buffers: shared hit=3
(7 rows)

-- (November 15 2024)
-- Same again, this time decrement < to <= instead (this will make the scan qual
-- unsatisfiable, too):
select unique1
from tenk1_skipscan
where unique1 < (-2147483648)::int4
and unique2 = 101010
limit 3;
 unique1 
---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- no buffer hits this time
select unique1
from tenk1_skipscan
where unique1 < (-2147483648)::int4
and unique2 = 101010
limit 3;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
   ->  Index Only Scan using tenk1_skipscan_unique1_unique2_idx on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
         Index Cond: ((unique1 < '-2147483648'::integer) AND (unique2 = 101010))
         Heap Fetches: 0
         Index Searches: 0
 Planning:
   Buffers: shared hit=3
(7 rows)

-- Variant:
select unique1
from tenk1_skipscan
where unique1 >= 2147483647
and unique2 = 101010 -- Forces unique1 to have skip array, so it gets skip array preprocessing
limit 3;
 unique1 
---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select unique1
from tenk1_skipscan
where unique1 >= 2147483647
and unique2 = 101010 -- Forces unique1 to have skip array, so it gets skip array preprocessing
limit 3;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
   Buffers: shared hit=2
   ->  Index Only Scan using tenk1_skipscan_unique1_unique2_idx on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
         Index Cond: ((unique1 >= 2147483647) AND (unique2 = 101010))
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=3
(9 rows)

-- Variant:
select unique1
from tenk1_skipscan
where unique1 > 2147483648
limit 3;
 unique1 
---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select unique1
from tenk1_skipscan
where unique1 > 2147483648
limit 3;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
   Buffers: shared hit=2
   ->  Index Only Scan using tenk1_skipscan_unique1_unique2_idx on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
         Index Cond: (unique1 > '2147483648'::bigint)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=3
(9 rows)

-- Same again, this time force a skip array on unique1, so that now we can
-- try and fail to increment > to >=:
select unique1
from tenk1_skipscan
where unique1 > 2147483648
and unique2 = 101010 -- Forces unique1 to have skip array, so it gets skip array preprocessing
limit 3;
 unique1 
---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select unique1
from tenk1_skipscan
where unique1 > 2147483648
and unique2 = 101010 -- Forces unique1 to have skip array, so it gets skip array preprocessing
limit 3;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
   Buffers: shared hit=2
   ->  Index Only Scan using tenk1_skipscan_unique1_unique2_idx on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
         Index Cond: ((unique1 > '2147483648'::bigint) AND (unique2 = 101010))
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=3
(9 rows)

-- Variant:
select unique1
from tenk1_skipscan
where unique1 < (-2147483649)
limit 3;
 unique1 
---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select unique1
from tenk1_skipscan
where unique1 < (-2147483649)
limit 3;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
   Buffers: shared hit=2
   ->  Index Only Scan using tenk1_skipscan_unique1_unique2_idx on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
         Index Cond: (unique1 < '-2147483649'::bigint)
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=3
(9 rows)

-- Same again, this time force a skip array on unique1, so that now we can
-- try and fail to increment < to <=:
select unique1
from tenk1_skipscan
where unique1 < (-2147483649)
and unique2 = 101010 -- Forces unique1 to have skip array, so it gets skip array preprocessing
limit 3;
 unique1 
---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- no buffer hits this time
select unique1
from tenk1_skipscan
where unique1 < (-2147483649)
and unique2 = 101010 -- Forces unique1 to have skip array, so it gets skip array preprocessing
limit 3;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
   Buffers: shared hit=2
   ->  Index Only Scan using tenk1_skipscan_unique1_unique2_idx on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
         Index Cond: ((unique1 < '-2147483649'::bigint) AND (unique2 = 101010))
         Heap Fetches: 0
         Index Searches: 1
         Buffers: shared hit=2
 Planning:
   Buffers: shared hit=3
(9 rows)

-- SAOP project regression test that once failed 32-bit platforms including CI:
prepare floatbyref_preproc as
select
  unique1
from
  tenk1_skipscan
where
  unique1 < 3
  and unique1 <(-1)::bigint;
-- Note: This doesn't fail reliably when run on horse server (with "#define
-- USE_FLOAT8_BYVAL" commented out), though using ../coredump-run.sh seems to
-- help it to fail
execute floatbyref_preproc;
 unique1 
---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute floatbyref_preproc;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using tenk1_skipscan_unique1_unique2_idx on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=4) (actual rows=0.00 loops=1)
   Index Cond: ((unique1 < 3) AND (unique1 < '-1'::bigint))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=2
(5 rows)

deallocate floatbyref_preproc;
--------------------------------------------------------------------------------------------------
-- (November 15) Cross-type opclasses from datetime_ops opfamily "> to >=" transformation tests --
--------------------------------------------------------------------------------------------------
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
set client_min_messages=error;
drop table if exists timestamp_date_crosstype_test;
reset client_min_messages;
create unlogged table timestamp_date_crosstype_test(
  t timestamp,
  i int4
);
create index timestamp_date_crosstype_test_idx on timestamp_date_crosstype_test (t, i);
insert into timestamp_date_crosstype_test
select ('1995-01-01'::date + i)::timestamp + interval '1 second', i
from generate_series(0, 100) i;
vacuum analyze timestamp_date_crosstype_test;
-- This had better not increment "t > 1995-01-01" into "t >= 1995-01-02",
-- given that the underlying column is actually a timestamp, not a date:
prepare crosstype_test_qry as
select *
from timestamp_date_crosstype_test
where
  t > '1995-01-01'::date and i = 0;
execute crosstype_test_qry;
            t             | i 
--------------------------+---
 Sun Jan 01 00:00:01 1995 | 0
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute crosstype_test_qry;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on timestamp_date_crosstype_test  (cost=5.15..7.17 rows=1 width=12) (actual rows=1.00 loops=1)
   Recheck Cond: ((t > '01-01-1995'::date) AND (i = 0))
   Heap Blocks: exact=1
   Buffers: shared hit=2
   ->  Bitmap Index Scan on timestamp_date_crosstype_test_idx  (cost=0.00..5.15 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((t > '01-01-1995'::date) AND (i = 0))
         Index Searches: 1
         Buffers: shared hit=1
(8 rows)

deallocate crosstype_test_qry;
-- Same again, but timestamptz this time (just for good luck):
set client_min_messages=error;
drop table if exists timestamptz_date_crosstype_test;
reset client_min_messages;
create unlogged table timestamptz_date_crosstype_test(
  t timestamptz,
  i int4
);
create index timestamptz_date_crosstype_test_idx on timestamptz_date_crosstype_test (t, i);
insert into timestamptz_date_crosstype_test
select ('1995-01-01'::date + i)::timestamptz + interval '1 second', i
from generate_series(0, 100) i;
vacuum analyze timestamptz_date_crosstype_test;
prepare crosstype_test_qry as
select *
from timestamptz_date_crosstype_test
where
  t > '1995-01-01'::date and i = 0;
execute crosstype_test_qry;
              t               | i 
------------------------------+---
 Sun Jan 01 00:00:01 1995 PST | 0
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute crosstype_test_qry;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on timestamptz_date_crosstype_test  (cost=5.15..7.17 rows=1 width=12) (actual rows=1.00 loops=1)
   Recheck Cond: ((t > '01-01-1995'::date) AND (i = 0))
   Heap Blocks: exact=1
   Buffers: shared hit=2
   ->  Bitmap Index Scan on timestamptz_date_crosstype_test_idx  (cost=0.00..5.15 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: ((t > '01-01-1995'::date) AND (i = 0))
         Index Searches: 1
         Buffers: shared hit=1
(8 rows)

deallocate crosstype_test_qry;
--------------------------------------------------------------------------
-- (July 9) Terminate scan promptly when name column lacks skip support --
--------------------------------------------------------------------------
create index name_no_skip_support on tenk1_skipscan (string4, tenthous);
set enable_bitmapscan to on;
set enable_indexonlyscan to on;
set enable_indexscan to on;
-- This query shouldn't have to access more than one leaf page (the leftmost),
-- since string4 < 'AAAAxx' condition matches tuples that are before any
-- actual extant tuples from the index:
prepare just_scan_leftmost_page as
select string4, tenthous
from tenk1_skipscan
where string4 < 'AAAAxx' and tenthous = 21;
execute just_scan_leftmost_page;
 string4 | tenthous 
---------+----------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- Expect only 2 buffer hits
execute just_scan_leftmost_page;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using name_no_skip_support on tenk1_skipscan  (cost=0.29..2.30 rows=1 width=68) (actual rows=0.00 loops=1)
   Index Cond: ((string4 < 'AAAAxx'::name) AND (tenthous = 21))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=2
(5 rows)

deallocate just_scan_leftmost_page;
-- Forwards scan
prepare terminate_name_ontime_inequality as
SELECT string4, tenthous FROM tenk1_skipscan
 WHERE string4 < 'OOOOxx' and tenthous in (131, 997, 5997, 992);
-- When first working on range skip scans + no-skip-support, had this one
-- remaining failure to terminate the scan when it reached the leaf page where
-- we naturally expect it to end.  The usual familiar assertion failure (with
-- a lack of any wrong answers to queries) proved as much:
-- TRAP: failed Assert("!_bt_tuple_before_array_skeys(scan, dir, tuple, tupdesc, tupnatts, false, 0, NULL)"), File: "../source/src/backend/access/nbtree/nbtutils.c", Line: 3063, PID: 497118
-- [0x55627e45e524] _bt_advance_array_keys: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/nbtree/nbtutils.c:3062
-- [0x55627e45d20a] _bt_checkkeys: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/nbtree/nbtutils.c:5070
-- [0x55627e450d7f] _bt_readpage: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/nbtree/nbtsearch.c:2288
-- [0x55627e4500fb] _bt_first: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/nbtree/nbtsearch.c:1955
-- [0x55627e449e74] btgettuple: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/nbtree/nbtree.c:259
-- [0x55627e436625] index_getnext_tid: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/index/indexam.c:590
execute terminate_name_ontime_inequality;
 string4 | tenthous 
---------+----------
 AAAAxx  |      131
 AAAAxx  |      997
 HHHHxx  |      992
 HHHHxx  |     5997
(4 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute terminate_name_ontime_inequality;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using name_no_skip_support on tenk1_skipscan  (cost=0.29..18.38 rows=2 width=68) (actual rows=4.00 loops=1)
   Index Cond: ((string4 < 'OOOOxx'::name) AND (tenthous = ANY ('{131,997,5997,992}'::integer[])))
   Heap Fetches: 0
   Index Searches: 6
   Buffers: shared hit=13
(5 rows)

deallocate terminate_name_ontime_inequality;
-- Backwards scan
prepare terminate_name_ontime_inequality_backwards as
SELECT string4, tenthous FROM tenk1_skipscan
 WHERE string4 < 'OOOOxx' and tenthous in (131, 997, 5997, 992) order by string4 desc, tenthous desc;
execute terminate_name_ontime_inequality_backwards;
 string4 | tenthous 
---------+----------
 HHHHxx  |     5997
 HHHHxx  |      992
 AAAAxx  |      997
 AAAAxx  |      131
(4 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute terminate_name_ontime_inequality_backwards;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using name_no_skip_support on tenk1_skipscan  (cost=0.29..18.38 rows=2 width=68) (actual rows=4.00 loops=1)
   Index Cond: ((string4 < 'OOOOxx'::name) AND (tenthous = ANY ('{131,997,5997,992}'::integer[])))
   Heap Fetches: 0
   Index Searches: 6
   Buffers: shared hit=13
(5 rows)

deallocate terminate_name_ontime_inequality_backwards;
drop index name_no_skip_support;
-- (July 12) This is like the create_view.sql failure in the regression tests
-- (seen once skipping was enabled on catalog indexes)
--
-- This fails due to a simple lack of cross-type support in places where we
-- need to use non-input-opclass-type-typed inequality sk_argument values.
create index stringu1_tenthous_idx on tenk1_skipscan (stringu1, tenthous);
-- Simplest version:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  -- Original: stringu1 like 'A_%' and tenthous in (5174, 7384, 9438)
  stringu1 >= 'A'::text and stringu1 < 'B'::text and tenthous in (5174, 7384, 9438)
order by stringu1, tenthous;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ARAAAA   |     5174
 AYAAAA   |     7384
 AZAAAA   |     9438
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 >= 'A'::text) AND (stringu1 < 'B'::text) AND (tenthous = ANY ('{5174,7384,9438}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=4
(5 rows)

deallocate like_test;
-- Same, but this time as a backwards scan:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  -- Original: stringu1 like 'A_%' and tenthous in (5174, 7384, 9438)
  stringu1 >= 'A'::text and stringu1 < 'B'::text and tenthous in (5174, 7384, 9438)
order by stringu1 desc, tenthous desc;
execute like_test;
 stringu1 | tenthous 
----------+----------
 AZAAAA   |     9438
 AYAAAA   |     7384
 ARAAAA   |     5174
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 >= 'A'::text) AND (stringu1 < 'B'::text) AND (tenthous = ANY ('{5174,7384,9438}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=4
(5 rows)

deallocate like_test;
-- Other end of index this time:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  -- Original: stringu1 like 'Z_%' and tenthous in (25, 8787, 571)
  stringu1 >= 'Z'::text and stringu1 < '['::text and tenthous in (25, 8787, 571)
order by stringu1, tenthous;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ZAAAAA   |       25
 ZVAAAA   |      571
 ZZAAAA   |     8787
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 >= 'Z'::text) AND (stringu1 < '['::text) AND (tenthous = ANY ('{25,8787,571}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=5
(5 rows)

deallocate like_test;
-- Same, but this time as a backwards scan:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  -- Original: stringu1 like 'Z_%' and tenthous in (25, 8787, 571)
  stringu1 >= 'Z'::text and stringu1 < '['::text and tenthous in (25, 8787, 571)
order by stringu1 desc, tenthous desc;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ZZAAAA   |     8787
 ZVAAAA   |      571
 ZAAAAA   |       25
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 >= 'Z'::text) AND (stringu1 < '['::text) AND (tenthous = ANY ('{25,8787,571}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=5
(5 rows)

deallocate like_test;
-- (July 16) Variants with mixed inequalities:
-- > and < variants:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > '@'::text and stringu1 < 'B'::text and tenthous in (5174, 7384, 9438)
order by stringu1, tenthous;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ARAAAA   |     5174
 AYAAAA   |     7384
 AZAAAA   |     9438
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > '@'::text) AND (stringu1 < 'B'::text) AND (tenthous = ANY ('{5174,7384,9438}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=4
(5 rows)

deallocate like_test;
-- Same, but this time as a backwards scan:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > '@'::text and stringu1 < 'B'::text and tenthous in (5174, 7384, 9438)
order by stringu1 desc, tenthous desc;
execute like_test;
 stringu1 | tenthous 
----------+----------
 AZAAAA   |     9438
 AYAAAA   |     7384
 ARAAAA   |     5174
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > '@'::text) AND (stringu1 < 'B'::text) AND (tenthous = ANY ('{5174,7384,9438}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=4
(5 rows)

deallocate like_test;
-- Other end of index this time:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > 'Y'::text and stringu1 < '['::text and tenthous in (25, 8787, 571)
order by stringu1, tenthous;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ZAAAAA   |       25
 ZVAAAA   |      571
 ZZAAAA   |     8787
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..17.86 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > 'Y'::text) AND (stringu1 < '['::text) AND (tenthous = ANY ('{25,8787,571}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=6
(5 rows)

deallocate like_test;
-- Same, but this time as a backwards scan:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > 'Y'::text and stringu1 < '['::text and tenthous in (25, 8787, 571)
order by stringu1 desc, tenthous desc;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ZZAAAA   |     8787
 ZVAAAA   |      571
 ZAAAAA   |       25
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..17.86 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > 'Y'::text) AND (stringu1 < '['::text) AND (tenthous = ANY ('{25,8787,571}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=6
(5 rows)

deallocate like_test;
-- > and <= variants:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > '@'::text and stringu1 <= 'AZZZZZZ'::text and tenthous in (5174, 7384, 9438)
order by stringu1, tenthous;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ARAAAA   |     5174
 AYAAAA   |     7384
 AZAAAA   |     9438
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > '@'::text) AND (stringu1 <= 'AZZZZZZ'::text) AND (tenthous = ANY ('{5174,7384,9438}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=4
(5 rows)

deallocate like_test;
-- Same, but this time as a backwards scan:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > '@'::text and stringu1 <= 'AZZZZZZ'::text and tenthous in (5174, 7384, 9438)
order by stringu1 desc, tenthous desc;
execute like_test;
 stringu1 | tenthous 
----------+----------
 AZAAAA   |     9438
 AYAAAA   |     7384
 ARAAAA   |     5174
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > '@'::text) AND (stringu1 <= 'AZZZZZZ'::text) AND (tenthous = ANY ('{5174,7384,9438}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=4
(5 rows)

deallocate like_test;
-- Other end of index this time:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > 'Y'::text and stringu1 <= 'Z{'::text and tenthous in (25, 8787, 571)
order by stringu1, tenthous;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ZAAAAA   |       25
 ZVAAAA   |      571
 ZZAAAA   |     8787
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..17.86 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > 'Y'::text) AND (stringu1 <= 'Z{'::text) AND (tenthous = ANY ('{25,8787,571}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=6
(5 rows)

deallocate like_test;
-- Same, but this time as a backwards scan:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > 'Y'::text and stringu1 <= 'Z{'::text and tenthous in (25, 8787, 571)
order by stringu1 desc, tenthous desc;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ZZAAAA   |     8787
 ZVAAAA   |      571
 ZAAAAA   |       25
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using stringu1_tenthous_idx on tenk1_skipscan  (cost=0.29..17.86 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > 'Y'::text) AND (stringu1 <= 'Z{'::text) AND (tenthous = ANY ('{25,8787,571}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=6
(5 rows)

deallocate like_test;
-- (July 16) This time with DESC index cols, to make sure that we have
-- backwards scan coverage (using non-cross-type comparator accidentally fails
-- to fail without this extra dimension):
-- instead:
drop index stringu1_tenthous_idx;
create index stringu1_tenthous_desc_idx on tenk1_skipscan (stringu1 desc, tenthous desc);
-- > and <= variants:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > '@'::text and stringu1 <= 'AZZZZZZ'::text and tenthous in (5174, 7384, 9438)
order by stringu1, tenthous;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ARAAAA   |     5174
 AYAAAA   |     7384
 AZAAAA   |     9438
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using stringu1_tenthous_desc_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > '@'::text) AND (stringu1 <= 'AZZZZZZ'::text) AND (tenthous = ANY ('{5174,7384,9438}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=5
(5 rows)

deallocate like_test;
-- Same, but this time as a backwards scan:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > '@'::text and stringu1 <= 'AZZZZZZ'::text and tenthous in (5174, 7384, 9438)
order by stringu1 desc, tenthous desc;
execute like_test;
 stringu1 | tenthous 
----------+----------
 AZAAAA   |     9438
 AYAAAA   |     7384
 ARAAAA   |     5174
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using stringu1_tenthous_desc_idx on tenk1_skipscan  (cost=0.29..28.18 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > '@'::text) AND (stringu1 <= 'AZZZZZZ'::text) AND (tenthous = ANY ('{5174,7384,9438}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=5
(5 rows)

deallocate like_test;
-- Other end of index this time:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > 'Y'::text and stringu1 <= 'Z{'::text and tenthous in (25, 8787, 571)
order by stringu1, tenthous;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ZAAAAA   |       25
 ZVAAAA   |      571
 ZZAAAA   |     8787
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan Backward using stringu1_tenthous_desc_idx on tenk1_skipscan  (cost=0.29..17.86 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > 'Y'::text) AND (stringu1 <= 'Z{'::text) AND (tenthous = ANY ('{25,8787,571}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=5
(5 rows)

deallocate like_test;
-- Same, but this time as a backwards scan:
prepare like_test as
select stringu1, tenthous from tenk1_skipscan
where
  stringu1 > 'Y'::text and stringu1 <= 'Z{'::text and tenthous in (25, 8787, 571)
order by stringu1 desc, tenthous desc;
execute like_test;
 stringu1 | tenthous 
----------+----------
 ZZAAAA   |     8787
 ZVAAAA   |      571
 ZAAAAA   |       25
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
execute like_test;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Index Only Scan using stringu1_tenthous_desc_idx on tenk1_skipscan  (cost=0.29..17.86 rows=1 width=68) (actual rows=3.00 loops=1)
   Index Cond: ((stringu1 > 'Y'::text) AND (stringu1 <= 'Z{'::text) AND (tenthous = ANY ('{25,8787,571}'::integer[])))
   Heap Fetches: 0
   Index Searches: 1
   Buffers: shared hit=5
(5 rows)

deallocate like_test;
---------------------------
-- Wisconsin table tests --
---------------------------
set client_min_messages=error;
drop table if exists wisconsin;
reset client_min_messages;
create unlogged table wisconsin
(
unique1 int4,
unique2 int4,
two int4,
four int4,
ten int4,
twenty int4,
onepercent int4,
tenpercent int4,
twentypercent int4,
fiftypercent int4,
unique3 int4,
evenonepercent int4,
oddonepercent int4,
stringu1 text,
stringu2 text,
string4 text
);
\set filename :abs_srcdir '/data/wisconsin.csv'
COPY wisconsin FROM :'filename' with (format csv, encoding 'win1252', header false, null $$$$, quote $$'$$); -- Fix the syntax highlighting: '
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select
  5555,
  5555,
  2147483646,
  2147483646,
  2147483646,
  2147483646,
  2147483646;
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select
  5555,
  5555,
  2147483647,
  2147483647,
  2147483647,
  2147483647,
  2147483647;
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select
  5555,
  5555,
(-2147483647),
(-2147483647),
(-2147483647),
(-2147483647),
(-2147483647);
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select
  5555,
  5555,(-2147483648),
(-2147483648),
(-2147483648),
(-2147483648),
(-2147483648);
vacuum analyze wisconsin;
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
-- Two:
create index two_idx on wisconsin (two, unique1);
select two, unique1 from wisconsin where unique1 = 5555;
     two     | unique1 
-------------+---------
           0 |    5555
  2147483646 |    5555
  2147483647 |    5555
 -2147483647 |    5555
 -2147483648 |    5555
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select two, unique1 from wisconsin where unique1 = 5555;
                          QUERY PLAN                           
---------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=5.00 loops=1)
   Recheck Cond: (unique1 = 5555)
   Heap Blocks: exact=2
   Buffers: shared hit=14
   ->  Bitmap Index Scan on two_idx (actual rows=5.00 loops=1)
         Index Cond: (unique1 = 5555)
         Index Searches: 4
         Buffers: shared hit=12
(8 rows)

drop index two_idx;
-- Four:
create index four_idx on wisconsin (four, unique1);
-- Point lookup:
select four, unique1 from wisconsin where unique1 = 5555;
    four     | unique1 
-------------+---------
           0 |    5555
  2147483646 |    5555
  2147483647 |    5555
 -2147483647 |    5555
 -2147483648 |    5555
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select four, unique1 from wisconsin where unique1 = 5555;
                           QUERY PLAN                           
----------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=5.00 loops=1)
   Recheck Cond: (unique1 = 5555)
   Heap Blocks: exact=2
   Buffers: shared hit=20
   ->  Bitmap Index Scan on four_idx (actual rows=5.00 loops=1)
         Index Cond: (unique1 = 5555)
         Index Searches: 6
         Buffers: shared hit=18
(8 rows)

-- SAOP:
select four, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
    four     | unique1 
-------------+---------
           1 |  200000
           3 |  100000
           1 |       1
           0 |    5555
  2147483646 |    5555
  2147483647 |    5555
 -2147483647 |    5555
 -2147483648 |    5555
(8 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select four, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=8.00 loops=1)
   Recheck Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
   Heap Blocks: exact=5
   Buffers: shared hit=56
   ->  Bitmap Index Scan on four_idx (actual rows=8.00 loops=1)
         Index Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
         Index Searches: 17
         Buffers: shared hit=51
(8 rows)

drop index four_idx;
-- Ten:
create index ten_idx on wisconsin (ten, unique1);
-- Point lookup:
select ten, unique1 from wisconsin where unique1 = 5555;
     ten     | unique1 
-------------+---------
           2 |    5555
  2147483646 |    5555
  2147483647 |    5555
 -2147483647 |    5555
 -2147483648 |    5555
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select ten, unique1 from wisconsin where unique1 = 5555;
                          QUERY PLAN                           
---------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=5.00 loops=1)
   Recheck Cond: (unique1 = 5555)
   Heap Blocks: exact=2
   Buffers: shared hit=38
   ->  Bitmap Index Scan on ten_idx (actual rows=5.00 loops=1)
         Index Cond: (unique1 = 5555)
         Index Searches: 12
         Buffers: shared hit=36
(8 rows)

-- Range instead of skip attribute on "ten":
prepare range_instead as
select ten, unique1 from wisconsin where ten between -10000 and 4 and unique1 = 5555;
execute range_instead;
 ten | unique1 
-----+---------
   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF)
execute range_instead;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((ten >= '-10000'::integer) AND (ten <= 4) AND (unique1 = 5555))
   Heap Blocks: exact=1
   Buffers: shared hit=19
   ->  Bitmap Index Scan on ten_idx (actual rows=1.00 loops=1)
         Index Cond: ((ten >= '-10000'::integer) AND (ten <= 4) AND (unique1 = 5555))
         Index Searches: 6
         Buffers: shared hit=18
(8 rows)

-- Range instead of skip attribute on "ten", backwards scan:
set enable_bitmapscan to off;
set enable_indexscan to on;
prepare range_instead_backwards as
select ten, unique1 from wisconsin where ten between -10000 and 4 and unique1 = 5555 order by ten desc, unique1 desc;
execute range_instead_backwards;
 ten | unique1 
-----+---------
   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF)
execute range_instead_backwards;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Scan Backward using ten_idx on wisconsin (actual rows=1.00 loops=1)
   Index Cond: ((ten >= '-10000'::integer) AND (ten <= 4) AND (unique1 = 5555))
   Index Searches: 6
   Buffers: shared hit=19
(4 rows)

set enable_bitmapscan to on;
set enable_indexscan to off;
-- SAOP:
select ten, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
     ten     | unique1 
-------------+---------
           9 |  200000
           3 |  100000
           9 |       1
           2 |    5555
  2147483646 |    5555
  2147483647 |    5555
 -2147483647 |    5555
 -2147483648 |    5555
(8 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select ten, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=8.00 loops=1)
   Recheck Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
   Heap Blocks: exact=5
   Buffers: shared hit=128
   ->  Bitmap Index Scan on ten_idx (actual rows=8.00 loops=1)
         Index Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
         Index Searches: 41
         Buffers: shared hit=123
(8 rows)

-- Contradictory qual:
-- XXX consider adding preprocessing to detect this case.
select ten, unique1 from wisconsin where unique1 between 101 and 100;
 ten | unique1 
-----+---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits, patch 0 hits, since patch detects >= and <= related contradictoriness
select ten, unique1 from wisconsin where unique1 between 101 and 100;
                          QUERY PLAN                           
---------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=0.00 loops=1)
   Recheck Cond: ((unique1 >= 101) AND (unique1 <= 100))
   Buffers: shared hit=34
   ->  Bitmap Index Scan on ten_idx (actual rows=0.00 loops=1)
         Index Cond: ((unique1 >= 101) AND (unique1 <= 100))
         Index Searches: 11
         Buffers: shared hit=34
(7 rows)

-- Contradictory qual, > and < strategies:
-- XXX consider adding preprocessing to detect this case.
select ten, unique1 from wisconsin where unique1 > 100 and unique1 < 100;
 ten | unique1 
-----+---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select ten, unique1 from wisconsin where unique1 > 100 and unique1 < 100;
                          QUERY PLAN                           
---------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=0.00 loops=1)
   Recheck Cond: ((unique1 > 100) AND (unique1 < 100))
   Buffers: shared hit=34
   ->  Bitmap Index Scan on ten_idx (actual rows=0.00 loops=1)
         Index Cond: ((unique1 > 100) AND (unique1 < 100))
         Index Searches: 11
         Buffers: shared hit=34
(7 rows)

-- Contradictory qual, > and < strategies, many operators:
-- XXX consider adding preprocessing to detect this case.
select ten, unique1 from wisconsin
where
unique1 > 1 and
unique1 < 400 and
unique1 > 90 and
unique1 > 100 and
unique1 < 100
;
 ten | unique1 
-----+---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select ten, unique1 from wisconsin
where
unique1 > 1 and
unique1 < 400 and
unique1 > 90 and
unique1 > 100 and
unique1 < 100
;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=0.00 loops=1)
   Recheck Cond: ((unique1 > 1) AND (unique1 < 400) AND (unique1 > 90) AND (unique1 > 100) AND (unique1 < 100))
   Buffers: shared hit=34
   ->  Bitmap Index Scan on ten_idx (actual rows=0.00 loops=1)
         Index Cond: ((unique1 > 1) AND (unique1 < 400) AND (unique1 > 90) AND (unique1 > 100) AND (unique1 < 100))
         Index Searches: 11
         Buffers: shared hit=34
(7 rows)

-- Just one constant generate by skip array (100):
select ten, unique1 from wisconsin where unique1 between 100 and 100;
 ten | unique1 
-----+---------
   9 |     100
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select ten, unique1 from wisconsin where unique1 between 100 and 100;
                          QUERY PLAN                           
---------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((unique1 >= 100) AND (unique1 <= 100))
   Heap Blocks: exact=1
   Buffers: shared hit=35
   ->  Bitmap Index Scan on ten_idx (actual rows=1.00 loops=1)
         Index Cond: ((unique1 >= 100) AND (unique1 <= 100))
         Index Searches: 11
         Buffers: shared hit=34
(8 rows)

-- Just one constant generate by skip array (100), > and < strategies:
select unique1 from wisconsin where unique1 > 99 and unique1 < 101;
 unique1 
---------
     100
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select unique1 from wisconsin where unique1 > 99 and unique1 < 101;
                          QUERY PLAN                           
---------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((unique1 > 99) AND (unique1 < 101))
   Heap Blocks: exact=1
   Buffers: shared hit=35
   ->  Bitmap Index Scan on ten_idx (actual rows=1.00 loops=1)
         Index Cond: ((unique1 > 99) AND (unique1 < 101))
         Index Searches: 11
         Buffers: shared hit=34
(8 rows)

-- Just one constant generate by skip array (100), > and < strategies, many operators:
select unique1 from wisconsin
where
unique1 > 1 and
unique1 < 400 and
unique1 > 90 and
unique1 > 99 and
unique1 < 101
;
 unique1 
---------
     100
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select unique1 from wisconsin
where
unique1 > 1 and
unique1 < 400 and
unique1 > 90 and
unique1 > 99 and
unique1 < 101
;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((unique1 > 1) AND (unique1 < 400) AND (unique1 > 90) AND (unique1 > 99) AND (unique1 < 101))
   Heap Blocks: exact=1
   Buffers: shared hit=35
   ->  Bitmap Index Scan on ten_idx (actual rows=1.00 loops=1)
         Index Cond: ((unique1 > 1) AND (unique1 < 400) AND (unique1 > 90) AND (unique1 > 99) AND (unique1 < 101))
         Index Searches: 11
         Buffers: shared hit=34
(8 rows)

drop index ten_idx;
-- Four, ten:
create index four_ten_idx on wisconsin (four, ten, unique1);
-- Point lookup, skips two cols (four and ten):
select four, ten, unique1 from wisconsin where unique1 = 5555;
    four     |     ten     | unique1 
-------------+-------------+---------
           0 |           2 |    5555
  2147483646 |  2147483646 |    5555
  2147483647 |  2147483647 |    5555
 -2147483647 | -2147483647 |    5555
 -2147483648 | -2147483648 |    5555
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 1152 hits
select four, ten, unique1 from wisconsin where unique1 = 5555;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=5.00 loops=1)
   Recheck Cond: (unique1 = 5555)
   Heap Blocks: exact=2
   Buffers: shared hit=125
   ->  Bitmap Index Scan on four_ten_idx (actual rows=5.00 loops=1)
         Index Cond: (unique1 = 5555)
         Index Searches: 41
         Buffers: shared hit=123
(8 rows)

-- Point lookup, skips one col (four), range on other col after that (ten):
select four, ten, unique1 from wisconsin where ten between -10000 and 4 and unique1 = 5555;
 four | ten | unique1 
------+-----+---------
    0 |   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 1152 hits
select four, ten, unique1 from wisconsin where ten between -10000 and 4 and unique1 = 5555;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((ten >= '-10000'::integer) AND (ten <= 4) AND (unique1 = 5555))
   Heap Blocks: exact=1
   Buffers: shared hit=70
   ->  Bitmap Index Scan on four_ten_idx (actual rows=1.00 loops=1)
         Index Cond: ((ten >= '-10000'::integer) AND (ten <= 4) AND (unique1 = 5555))
         Index Searches: 23
         Buffers: shared hit=69
(8 rows)

-- Should be able to handle BETWEEN ranges with same value for >= and <=:
prepare handle_between as
select four, ten, unique1 from wisconsin where four between 0 and 0 and unique1 = 5555;
execute handle_between;
 four | ten | unique1 
------+-----+---------
    0 |   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF)
execute handle_between;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((four >= 0) AND (four <= 0) AND (unique1 = 5555))
   Heap Blocks: exact=1
   Buffers: shared hit=34
   ->  Bitmap Index Scan on four_ten_idx (actual rows=1.00 loops=1)
         Index Cond: ((four >= 0) AND (four <= 0) AND (unique1 = 5555))
         Index Searches: 11
         Buffers: shared hit=33
(8 rows)

-- Missing predicate is in "intermediate" column (ten) here:
select four, ten, unique1 from wisconsin where four = 0 and unique1 = 5555;
 four | ten | unique1 
------+-----+---------
    0 |   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF) -- master 290 hits, patch 33 hits
select four, ten, unique1 from wisconsin where four = 0 and unique1 = 5555;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((four = 0) AND (unique1 = 5555))
   Heap Blocks: exact=1
   Buffers: shared hit=34
   ->  Bitmap Index Scan on four_ten_idx (actual rows=1.00 loops=1)
         Index Cond: ((four = 0) AND (unique1 = 5555))
         Index Searches: 11
         Buffers: shared hit=33
(8 rows)

-- Missing predicate is in "intermediate" column (ten) here, plus we use a
-- SAOP for unique1 this time around:
select four, ten, unique1 from wisconsin where four = 0 and unique1 in (41, 5555, 299118, 300000);
 four | ten | unique1 
------+-----+---------
    0 |   0 |      41
    0 |   2 |    5555
    0 |   8 |  299118
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF) -- master 290 hits, patch 33 hits
select four, ten, unique1 from wisconsin where four = 0 and unique1 in (41, 5555, 299118, 300000);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=3.00 loops=1)
   Recheck Cond: ((four = 0) AND (unique1 = ANY ('{41,5555,299118,300000}'::integer[])))
   Heap Blocks: exact=3
   Buffers: shared hit=36
   ->  Bitmap Index Scan on four_ten_idx (actual rows=3.00 loops=1)
         Index Cond: ((four = 0) AND (unique1 = ANY ('{41,5555,299118,300000}'::integer[])))
         Index Searches: 11
         Buffers: shared hit=33
(8 rows)

-- SAOP:
select four, ten, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
    four     |     ten     | unique1 
-------------+-------------+---------
           1 |           9 |  200000
           3 |           3 |  100000
           1 |           9 |       1
           0 |           2 |    5555
  2147483646 |  2147483646 |    5555
  2147483647 |  2147483647 |    5555
 -2147483647 | -2147483647 |    5555
 -2147483648 | -2147483648 |    5555
(8 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF) -- master 1152 hits
select four, ten, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=8.00 loops=1)
   Recheck Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
   Heap Blocks: exact=5
   Buffers: shared hit=248
   ->  Bitmap Index Scan on four_ten_idx (actual rows=8.00 loops=1)
         Index Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
         Index Searches: 81
         Buffers: shared hit=243
(8 rows)

-- backwards scans:
set enable_bitmapscan to off;
set enable_indexonlyscan to off;
set enable_indexscan to on;
-- Simple backwards scan (failed once, simplified from next test case):
select four, ten, unique1
from wisconsin
where unique1 = 1
order by four desc, ten desc, unique1 desc;
 four | ten | unique1 
------+-----+---------
    1 |   9 |       1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF) -- master 1156 hits
select four, ten, unique1
from wisconsin
where unique1 = 1
order by four desc, ten desc, unique1 desc;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Scan Backward using four_ten_idx on wisconsin (actual rows=1.00 loops=1)
   Index Cond: (unique1 = 1)
   Index Searches: 21
   Buffers: shared hit=64
(4 rows)

-- SAOP backwards scan:
select four, ten, unique1
from wisconsin
where unique1 in (1, 5555, 100000, 200000)
order by four desc, ten desc, unique1 desc;
    four     |     ten     | unique1 
-------------+-------------+---------
  2147483647 |  2147483647 |    5555
  2147483646 |  2147483646 |    5555
           3 |           3 |  100000
           1 |           9 |  200000
           1 |           9 |       1
           0 |           2 |    5555
 -2147483647 | -2147483647 |    5555
 -2147483648 | -2147483648 |    5555
(8 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF) -- master 1156 hits
select four, ten, unique1
from wisconsin
where unique1 in (1, 5555, 100000, 200000)
order by four desc, ten desc, unique1 desc;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Scan Backward using four_ten_idx on wisconsin (actual rows=8.00 loops=1)
   Index Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
   Index Searches: 81
   Buffers: shared hit=249
(4 rows)

-- One omitted attribute (four) followed by two SAOPs
select four, ten, unique1
from wisconsin
where
  ten in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
  and unique1 in (41, 5555, 299118, 300000);
 four | ten | unique1 
------+-----+---------
    0 |   0 |      41
    0 |   2 |    5555
    0 |   8 |  299118
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF)
select four, ten, unique1
from wisconsin
where
  ten in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
  and unique1 in (41, 5555, 299118, 300000);
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Index Scan using four_ten_idx on wisconsin (actual rows=3.00 loops=1)
   Index Cond: ((ten = ANY ('{0,1,2,3,4,5,6,7,8,9}'::integer[])) AND (unique1 = ANY ('{41,5555,299118,300000}'::integer[])))
   Index Searches: 44
   Buffers: shared hit=135
(4 rows)

drop index four_ten_idx;
-- SAOP, DESC index, forward scan (forward relative to DESC direction):
create index four_desc_ten_desc_idx on wisconsin (four desc, ten desc, unique1 desc);
select four, ten, unique1
from wisconsin
where unique1 in (1, 5555, 100000, 200000)
order by four desc, ten desc, unique1 desc;
    four     |     ten     | unique1 
-------------+-------------+---------
  2147483647 |  2147483647 |    5555
  2147483646 |  2147483646 |    5555
           3 |           3 |  100000
           1 |           9 |  200000
           1 |           9 |       1
           0 |           2 |    5555
 -2147483647 | -2147483647 |    5555
 -2147483648 | -2147483648 |    5555
(8 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF) -- master 1156 hits
select four, ten, unique1
from wisconsin
where unique1 in (1, 5555, 100000, 200000)
order by four desc, ten desc, unique1 desc;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Index Scan using four_desc_ten_desc_idx on wisconsin (actual rows=8.00 loops=1)
   Index Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
   Index Searches: 81
   Buffers: shared hit=249
(4 rows)

-- SAOP, DESC index, backward scan (backward relative to DESC direction):
select four, ten, unique1
from wisconsin
where unique1 in (1, 5555, 100000, 200000)
order by four, ten, unique1;
    four     |     ten     | unique1 
-------------+-------------+---------
 -2147483648 | -2147483648 |    5555
 -2147483647 | -2147483647 |    5555
           0 |           2 |    5555
           1 |           9 |       1
           1 |           9 |  200000
           3 |           3 |  100000
  2147483646 |  2147483646 |    5555
  2147483647 |  2147483647 |    5555
(8 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF) -- master 1156 hits
select four, ten, unique1
from wisconsin
where unique1 in (1, 5555, 100000, 200000)
order by four, ten, unique1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Index Scan Backward using four_desc_ten_desc_idx on wisconsin (actual rows=8.00 loops=1)
   Index Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
   Index Searches: 81
   Buffers: shared hit=249
(4 rows)

drop index four_desc_ten_desc_idx;
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
-- Twenty:
create index twenty_idx on wisconsin (twenty, unique1);
-- Point lookup:
select twenty, unique1 from wisconsin where unique1 = 5555;
   twenty    | unique1 
-------------+---------
          12 |    5555
  2147483646 |    5555
  2147483647 |    5555
 -2147483647 |    5555
 -2147483648 |    5555
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select twenty, unique1 from wisconsin where unique1 = 5555;
                            QUERY PLAN                            
------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=5.00 loops=1)
   Recheck Cond: (unique1 = 5555)
   Heap Blocks: exact=2
   Buffers: shared hit=66
   ->  Bitmap Index Scan on twenty_idx (actual rows=5.00 loops=1)
         Index Cond: (unique1 = 5555)
         Index Searches: 21
         Buffers: shared hit=64
(8 rows)

-- SAOP:
select twenty, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
   twenty    | unique1 
-------------+---------
           9 |  200000
           3 |  100000
           9 |       1
          12 |    5555
  2147483646 |    5555
  2147483647 |    5555
 -2147483647 |    5555
 -2147483648 |    5555
(8 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select twenty, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=8.00 loops=1)
   Recheck Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
   Heap Blocks: exact=5
   Buffers: shared hit=245
   ->  Bitmap Index Scan on twenty_idx (actual rows=8.00 loops=1)
         Index Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
         Index Searches: 80
         Buffers: shared hit=240
(8 rows)

drop index twenty_idx;
-- Hundred/onepercent:
create index onepercent_idx on wisconsin (onepercent, unique1);
-- Point lookup:
select onepercent, unique1 from wisconsin where unique1 = 5555;
 onepercent  | unique1 
-------------+---------
          32 |    5555
  2147483646 |    5555
  2147483647 |    5555
 -2147483647 |    5555
 -2147483648 |    5555
(5 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select onepercent, unique1 from wisconsin where unique1 = 5555;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=5.00 loops=1)
   Recheck Cond: (unique1 = 5555)
   Heap Blocks: exact=2
   Buffers: shared hit=306
   ->  Bitmap Index Scan on onepercent_idx (actual rows=5.00 loops=1)
         Index Cond: (unique1 = 5555)
         Index Searches: 101
         Buffers: shared hit=304
(8 rows)

-- SAOP:
select onepercent, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
 onepercent  | unique1 
-------------+---------
          89 |  200000
          43 |  100000
           9 |       1
          32 |    5555
  2147483646 |    5555
  2147483647 |    5555
 -2147483647 |    5555
 -2147483648 |    5555
(8 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select onepercent, unique1 from wisconsin where unique1 in (1, 5555, 100000, 200000);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=8.00 loops=1)
   Recheck Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
   Heap Blocks: exact=5
   Buffers: shared hit=956
   ->  Bitmap Index Scan on onepercent_idx (actual rows=8.00 loops=1)
         Index Cond: (unique1 = ANY ('{1,5555,100000,200000}'::integer[]))
         Index Searches: 317
         Buffers: shared hit=951
(8 rows)

-- (June 14, day after going into JFK 27 to have lunch (later dinner) with
-- jkatz)
--
-- Test case showing bug in _bt_advance_skip_array_increment when we wrap
-- around a scan key whose sk_argument is already INT_MAX.  We should
-- "increment" its scan key to NULL, the true final value.  The bug that we
-- saw here involved not returning the row with a NULL oncepercent and a
-- unique1 value of -666.  We'd actually skip straight past NULL, wrapping
-- back around to INT_MIN again, which was just wrong.
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select 1, 1, 1, 1, 1, 1, 2147483647 from generate_series(1, 1500) i;
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select 1, 1, 1, 1, 1, 1, (-2147483648)::int4 from generate_series(1, 1500) i;
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select -666, 1, 1, 1, 1, 1, 2147483647;
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select -666, 1, 1, 1, 1, 1, (-2147483648)::int4;
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select 1, 1, 1, 1, 1, 1, NULL from generate_series(1, 1500) i;
insert into wisconsin(unique1, unique2, two, four, ten, twenty, onepercent)
select -666, 1, 1, 1, 1, 1, NULL;
vacuum analyze wisconsin;
-- Force index scan
set enable_bitmapscan to off;
set enable_indexonlyscan to off;
set enable_indexscan to on;
-- Main test
select onepercent, unique1 from wisconsin where unique1 = -666;
 onepercent  | unique1 
-------------+---------
 -2147483648 |    -666
  2147483647 |    -666
             |    -666
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select onepercent, unique1 from wisconsin where unique1 = -666;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Index Scan using onepercent_idx on wisconsin (actual rows=3.00 loops=1)
   Index Cond: (unique1 = '-666'::integer)
   Index Searches: 103
   Buffers: shared hit=313
(4 rows)

-- Same again, backwards scan
select onepercent, unique1 from wisconsin where unique1 = -666
order by onepercent desc, unique1 desc;
 onepercent  | unique1 
-------------+---------
             |    -666
  2147483647 |    -666
 -2147483648 |    -666
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select onepercent, unique1 from wisconsin where unique1 = -666
order by onepercent desc, unique1 desc;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Index Scan Backward using onepercent_idx on wisconsin (actual rows=3.00 loops=1)
   Index Cond: (unique1 = '-666'::integer)
   Index Searches: 103
   Buffers: shared hit=315
(4 rows)

drop index onepercent_idx;
-- Hundred/onepercent, nulls first, repeat last two test cases:
create index onepercent_nulls_first_idx on wisconsin (onepercent desc nulls first, unique1 desc nulls first);
-- Main test
select onepercent, unique1 from wisconsin where unique1 = -666;
 onepercent  | unique1 
-------------+---------
             |    -666
  2147483647 |    -666
 -2147483648 |    -666
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select onepercent, unique1 from wisconsin where unique1 = -666;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Index Scan using onepercent_nulls_first_idx on wisconsin (actual rows=3.00 loops=1)
   Index Cond: (unique1 = '-666'::integer)
   Index Searches: 103
   Buffers: shared hit=311
(4 rows)

-- Same again, backwards scan (this variant was broken briefly, when I only
-- had forward scan handling code in _bt_advance_skip_array_increment)
select onepercent, unique1 from wisconsin where unique1 = -666
order by onepercent, unique1;
 onepercent  | unique1 
-------------+---------
 -2147483648 |    -666
  2147483647 |    -666
             |    -666
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select onepercent, unique1 from wisconsin where unique1 = -666
order by onepercent, unique1;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Index Scan Backward using onepercent_nulls_first_idx on wisconsin (actual rows=3.00 loops=1)
   Index Cond: (unique1 = '-666'::integer)
   Index Searches: 103
   Buffers: shared hit=311
(4 rows)

drop index onepercent_nulls_first_idx;
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
-- Four, ten, twenty, unique1 (causes errors about attribute order from
-- _by_preprocess_keys):
create index on wisconsin (four, ten, twenty, unique1);
select four, ten, twenty, unique1
from wisconsin
where
  ten between 1 and 10
  and twenty in (1, 2, 3)
  and unique1 in (84396, 217539, 60814);
 four | ten | twenty | unique1 
------+-----+--------+---------
    2 |   2 |      2 |  217539
    3 |   3 |      3 |   84396
    2 |   2 |      2 |   60814
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select four, ten, twenty, unique1
from wisconsin
where
  ten between 1 and 10
  and twenty in (1, 2, 3)
  and unique1 in (84396, 217539, 60814);
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=3.00 loops=1)
   Recheck Cond: ((ten >= 1) AND (ten <= 10) AND (twenty = ANY ('{1,2,3}'::integer[])) AND (unique1 = ANY ('{84396,217539,60814}'::integer[])))
   Heap Blocks: exact=3
   Buffers: shared hit=93
   ->  Bitmap Index Scan on wisconsin_four_ten_twenty_unique1_idx (actual rows=3.00 loops=1)
         Index Cond: ((ten >= 1) AND (ten <= 10) AND (twenty = ANY ('{1,2,3}'::integer[])) AND (unique1 = ANY ('{84396,217539,60814}'::integer[])))
         Index Searches: 30
         Buffers: shared hit=90
(8 rows)

-- (January 19 2025) Contradictory scan keys should not confuse _bt_preprocess_array_keys
--
-- _bt_preprocess_array_keys shouldn't get confused about contradictory quals
-- with things like a = key and an inequality key on the same attribute.
--
-- Right now, these test cases trick _bt_preprocess_array_keys into throwing
-- errors such as:
-- ERROR:  missing oprcode for skipping equals operator 2437166984
-- Contradictory
prepare contradictory_wisconsin as
select four, ten, unique1
from wisconsin
where
  four = -1 and four between 0 and 3
  and ten between 2 and 15
  and unique1 in (1, 2490, 7777);
execute contradictory_wisconsin;
 four | ten | unique1 
------+-----+---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
execute contradictory_wisconsin;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=0.00 loops=1)
   Recheck Cond: ((four >= 0) AND (four <= 3) AND (four = '-1'::integer) AND (ten >= 2) AND (ten <= 15) AND (unique1 = ANY ('{1,2490,7777}'::integer[])))
   ->  Bitmap Index Scan on wisconsin_four_ten_twenty_unique1_idx (actual rows=0.00 loops=1)
         Index Cond: ((four >= 0) AND (four <= 3) AND (four = '-1'::integer) AND (ten >= 2) AND (ten <= 15) AND (unique1 = ANY ('{1,2490,7777}'::integer[])))
         Index Searches: 0
(5 rows)

deallocate contradictory_wisconsin;
-- Contradictory
prepare contradictory_wisconsin as
select four, ten, unique1
from wisconsin
where
  four between 0 and 3 and four = -1
  and ten between 2 and 15
  and unique1 in (1, 2490, 7777);
execute contradictory_wisconsin;
 four | ten | unique1 
------+-----+---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
execute contradictory_wisconsin;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=0.00 loops=1)
   Recheck Cond: ((four >= 0) AND (four <= 3) AND (four = '-1'::integer) AND (ten >= 2) AND (ten <= 15) AND (unique1 = ANY ('{1,2490,7777}'::integer[])))
   ->  Bitmap Index Scan on wisconsin_four_ten_twenty_unique1_idx (actual rows=0.00 loops=1)
         Index Cond: ((four >= 0) AND (four <= 3) AND (four = '-1'::integer) AND (ten >= 2) AND (ten <= 15) AND (unique1 = ANY ('{1,2490,7777}'::integer[])))
         Index Searches: 0
(5 rows)

deallocate contradictory_wisconsin;
-- Contradictory
prepare contradictory_wisconsin as
select four, ten, unique1
from wisconsin
where
  four = 4 and four between 0 and 3 and four = -1
  and ten between 2 and 15
  and unique1 in (1, 2490, 7777);
execute contradictory_wisconsin;
 four | ten | unique1 
------+-----+---------
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
execute contradictory_wisconsin;
            QUERY PLAN             
-----------------------------------
 Result (actual rows=0.00 loops=1)
   One-Time Filter: false
(2 rows)

deallocate contradictory_wisconsin;
-- Partially redundant
prepare redundant_wisconsin as
select four, ten, unique1
from wisconsin
where
  four = 1 and four between 0 and 3
  and ten between 2 and 15
  and unique1 in (1, 2490, 7777);
execute redundant_wisconsin;
 four | ten | unique1 
------+-----+---------
    1 |   9 |       1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
execute redundant_wisconsin;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((four >= 0) AND (four <= 3) AND (four = 1) AND (ten >= 2) AND (ten <= 15) AND (unique1 = ANY ('{1,2490,7777}'::integer[])))
   Heap Blocks: exact=1
   Buffers: shared hit=34
   ->  Bitmap Index Scan on wisconsin_four_ten_twenty_unique1_idx (actual rows=1.00 loops=1)
         Index Cond: ((four >= 0) AND (four <= 3) AND (four = 1) AND (ten >= 2) AND (ten <= 15) AND (unique1 = ANY ('{1,2490,7777}'::integer[])))
         Index Searches: 11
         Buffers: shared hit=33
(8 rows)

deallocate redundant_wisconsin;
-- Partially redundant
prepare redundant_wisconsin as
select four, ten, unique1
from wisconsin
where
  four between 0 and 3 and four = 1
  and ten between 2 and 15
  and unique1 in (1, 2490, 7777);
execute redundant_wisconsin;
 four | ten | unique1 
------+-----+---------
    1 |   9 |       1
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
execute redundant_wisconsin;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((four >= 0) AND (four <= 3) AND (four = 1) AND (ten >= 2) AND (ten <= 15) AND (unique1 = ANY ('{1,2490,7777}'::integer[])))
   Heap Blocks: exact=1
   Buffers: shared hit=34
   ->  Bitmap Index Scan on wisconsin_four_ten_twenty_unique1_idx (actual rows=1.00 loops=1)
         Index Cond: ((four >= 0) AND (four <= 3) AND (four = 1) AND (ten >= 2) AND (ten <= 15) AND (unique1 = ANY ('{1,2490,7777}'::integer[])))
         Index Searches: 11
         Buffers: shared hit=33
(8 rows)

deallocate redundant_wisconsin;
-------------------------------------------------------------------------------
-- (July 12) Day after going for drinks with jkatz + company in East Village --
-------------------------------------------------------------------------------
drop index wisconsin_four_ten_twenty_unique1_idx;
create index four_ten_unique1_idx on wisconsin (four, ten, unique1);
-- Missing predicate is in "intermediate" column (ten) here:
-- "#define FORCE_NOSKIP_DEBUG + integer wisconsin table" broke with this
-- query at one point, but it's now fine:
prepare force_noskip_debug as
select four, ten, unique1 from wisconsin where four = 0 and unique1 = 5555;
execute force_noskip_debug;
 four | ten | unique1 
------+-----+---------
    0 |   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
execute force_noskip_debug;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin (actual rows=1.00 loops=1)
   Recheck Cond: ((four = 0) AND (unique1 = 5555))
   Heap Blocks: exact=1
   Buffers: shared hit=34
   ->  Bitmap Index Scan on four_ten_unique1_idx (actual rows=1.00 loops=1)
         Index Cond: ((four = 0) AND (unique1 = 5555))
         Index Searches: 11
         Buffers: shared hit=33
(8 rows)

-----------------------------------------
-- (July 10) Wisconsin numeric variant --
-----------------------------------------
set client_min_messages=error;
drop table if exists wisconsin_numeric;
reset client_min_messages;
create unlogged table wisconsin_numeric
(
unique1 numeric,
unique2 numeric,
two numeric,
four numeric,
ten numeric,
twenty numeric,
onepercent numeric,
tenpercent numeric,
twentypercent numeric,
fiftypercent numeric,
unique3 numeric,
evenonepercent numeric,
oddonepercent numeric,
stringu1 text,
stringu2 text,
string4 text
);
\set filename :abs_srcdir '/data/wisconsin.csv'
COPY wisconsin_numeric FROM :'filename' with (format csv, encoding 'win1252', header false, null $$$$, quote $$'$$); -- Fix the syntax highlighting: '
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select
  5555,
  5555,
  2147483646,
  2147483646,
  2147483646,
  2147483646,
  2147483646;
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select
  5555,
  5555,
  2147483647,
  2147483647,
  2147483647,
  2147483647,
  2147483647;
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select
  5555,
  5555,
(-2147483647),
(-2147483647),
(-2147483647),
(-2147483647),
(-2147483647);
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select
  5555,
  5555,(-2147483648),
(-2147483648),
(-2147483648),
(-2147483648),
(-2147483648);
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
vacuum analyze wisconsin_numeric;
-- Ten:
create index numeric_ten_idx on wisconsin_numeric (ten, unique1);
-- Range instead of skip attribute on "ten":
select ten, unique1 from wisconsin_numeric where ten between -10000 and 4 and unique1 = 5555;
 ten | unique1 
-----+---------
   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS OFF, TIMING OFF, COSTS OFF, SUMMARY OFF)
select ten, unique1 from wisconsin_numeric where ten between -10000 and 4 and unique1 = 5555;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin_numeric (actual rows=1.00 loops=1)
   Recheck Cond: ((ten >= '-10000'::numeric) AND (ten <= '4'::numeric) AND (unique1 = '5555'::numeric))
   Heap Blocks: exact=1
   ->  Bitmap Index Scan on numeric_ten_idx (actual rows=1.00 loops=1)
         Index Cond: ((ten >= '-10000'::numeric) AND (ten <= '4'::numeric) AND (unique1 = '5555'::numeric))
         Index Searches: 11
(6 rows)

-- Range instead of skip attribute on "ten", backwards scan:
set enable_bitmapscan to off;
set enable_indexscan to on;
select ten, unique1 from wisconsin_numeric where ten between -10000 and 4 and unique1 = 5555 order by ten desc, unique1 desc;
 ten | unique1 
-----+---------
   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS OFF, TIMING OFF, COSTS OFF, SUMMARY OFF)
select ten, unique1 from wisconsin_numeric where ten between -10000 and 4 and unique1 = 5555 order by ten desc, unique1 desc;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Index Scan Backward using numeric_ten_idx on wisconsin_numeric (actual rows=1.00 loops=1)
   Index Cond: ((ten >= '-10000'::numeric) AND (ten <= '4'::numeric) AND (unique1 = '5555'::numeric))
   Index Searches: 10
(3 rows)

-- (July 23, Week of MIT visit, add test coverage)
--
-- Demonstrate how returning false when decrementing a non-skip-support skip
-- array with a >= inequality early due to the current array element already
-- being == the >= inequality's sk_argument.  This optimization is symmetrical
-- to the similar forward scan <= inequality case, which has plenty of code
-- coverage from other tests.
--
-- XXX UPDATE (January 22 2025) This optimization is now disabled, since it now
-- doesn't seem worth the trouble of keeping around a maybe-cross-type ORDER
-- proc and doing all of those extra comparisons just for this case.
select ten, unique1 from wisconsin_numeric where ten between 2 and 3 and unique1 = 5555 order by ten desc, unique1 desc;
 ten | unique1 
-----+---------
   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS OFF, TIMING OFF, COSTS OFF, SUMMARY OFF) -- 13 buffer hits (was 10 with optimization enabled)
select ten, unique1 from wisconsin_numeric where ten between 2 and 3 and unique1 = 5555 order by ten desc, unique1 desc;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Index Scan Backward using numeric_ten_idx on wisconsin_numeric (actual rows=1.00 loops=1)
   Index Cond: ((ten >= '2'::numeric) AND (ten <= '3'::numeric) AND (unique1 = '5555'::numeric))
   Index Searches: 4
(3 rows)

set enable_bitmapscan to on;
set enable_indexscan to off;
drop index numeric_ten_idx;
-- Four, ten:
create index numeric_four_ten_idx on wisconsin_numeric (four, ten, unique1);
-- (July 18) Make sure that we don't repeatedly access page 1 due to getting
-- confused about -inf value that lands us before the range of the column "ten"
select four, ten, unique1
from wisconsin_numeric
where ten between -10000 and 1 and unique1 = 113
limit 1; -- Just to avoid distraction of other, later pages (just care about page 1)
 four | ten | unique1 
------+-----+---------
    0 |   0 |     113
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select four, ten, unique1
from wisconsin_numeric
where ten between -10000 and 1 and unique1 = 113
limit 1; -- Just to avoid distraction of other, later pages (just care about page 1)
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1.00 loops=1)
   Buffers: shared hit=29
   ->  Bitmap Heap Scan on wisconsin_numeric (actual rows=1.00 loops=1)
         Recheck Cond: ((ten >= '-10000'::numeric) AND (ten <= '1'::numeric) AND (unique1 = '113'::numeric))
         Heap Blocks: exact=1
         Buffers: shared hit=29
         ->  Bitmap Index Scan on numeric_four_ten_idx (actual rows=1.00 loops=1)
               Index Cond: ((ten >= '-10000'::numeric) AND (ten <= '1'::numeric) AND (unique1 = '113'::numeric))
               Index Searches: 9
               Buffers: shared hit=28
(10 rows)

-- Point lookup, skips one col (four), range on other col after that (ten):
select four, ten, unique1 from wisconsin_numeric where ten between -10000 and 4 and unique1 = 5555;
 four | ten | unique1 
------+-----+---------
    0 |   2 |    5555
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select four, ten, unique1 from wisconsin_numeric where ten between -10000 and 4 and unique1 = 5555;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin_numeric (actual rows=1.00 loops=1)
   Recheck Cond: ((ten >= '-10000'::numeric) AND (ten <= '4'::numeric) AND (unique1 = '5555'::numeric))
   Heap Blocks: exact=1
   Buffers: shared hit=76
   ->  Bitmap Index Scan on numeric_four_ten_idx (actual rows=1.00 loops=1)
         Index Cond: ((ten >= '-10000'::numeric) AND (ten <= '4'::numeric) AND (unique1 = '5555'::numeric))
         Index Searches: 25
         Buffers: shared hit=75
(8 rows)

drop index numeric_four_ten_idx;
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select 1, 1, 1, 1, 1, 1, 2147483647 from generate_series(1, 1500) i;
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select 1, 1, 1, 1, 1, 1, (-2147483648)::int4 from generate_series(1, 1500) i;
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select -666, 1, 1, 1, 1, 1, 2147483647;
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select -666, 1, 1, 1, 1, 1, (-2147483648)::int4;
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select 1, 1, 1, 1, 1, 1, NULL from generate_series(1, 1500) i;
insert into wisconsin_numeric(unique1, unique2, two, four, ten, twenty, onepercent)
select -666, 1, 1, 1, 1, 1, NULL;
vacuum analyze wisconsin_numeric;
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
create index numeric_idx_four_ten_twenty_unique1 on wisconsin_numeric (four, ten, twenty, unique1);
-- Simplest version:
select four, ten, twenty, unique1 from wisconsin_numeric where four in (2 , 3) and ten between 3 and 3 and twenty = 3 and unique1 = 84396;
 four | ten | twenty | unique1 
------+-----+--------+---------
    3 |   3 |      3 |   84396
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF)
select four, ten, twenty, unique1 from wisconsin_numeric where four in (2 , 3) and ten between 3 and 3 and twenty = 3 and unique1 = 84396;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin_numeric (actual rows=1.00 loops=1)
   Recheck Cond: ((four = ANY ('{2,3}'::numeric[])) AND (ten >= '3'::numeric) AND (ten <= '3'::numeric) AND (twenty = '3'::numeric) AND (unique1 = '84396'::numeric))
   Heap Blocks: exact=1
   Buffers: shared hit=10
   ->  Bitmap Index Scan on numeric_idx_four_ten_twenty_unique1 (actual rows=1.00 loops=1)
         Index Cond: ((four = ANY ('{2,3}'::numeric[])) AND (ten >= '3'::numeric) AND (ten <= '3'::numeric) AND (twenty = '3'::numeric) AND (unique1 = '84396'::numeric))
         Index Searches: 3
         Buffers: shared hit=9
(8 rows)

-- Simplest version of other, similar bug:
prepare simple_repro as
select four, ten, twenty, unique1 from wisconsin_numeric where four between 2 and 3 and ten between 2 and 3 and twenty = 3 and unique1 = 84396;
execute simple_repro;
 four | ten | twenty | unique1 
------+-----+--------+---------
    3 |   3 |      3 |   84396
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF, COSTS OFF)
execute simple_repro;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin_numeric (actual rows=1.00 loops=1)
   Recheck Cond: ((four >= '2'::numeric) AND (four <= '3'::numeric) AND (ten >= '2'::numeric) AND (ten <= '3'::numeric) AND (twenty = '3'::numeric) AND (unique1 = '84396'::numeric))
   Heap Blocks: exact=1
   Buffers: shared hit=19
   ->  Bitmap Index Scan on numeric_idx_four_ten_twenty_unique1 (actual rows=1.00 loops=1)
         Index Cond: ((four >= '2'::numeric) AND (four <= '3'::numeric) AND (ten >= '2'::numeric) AND (ten <= '3'::numeric) AND (twenty = '3'::numeric) AND (unique1 = '84396'::numeric))
         Index Searches: 6
         Buffers: shared hit=18
(8 rows)

-- SAOP-only version should return 2 rows:
select four, ten, twenty, unique1 from wisconsin_numeric where ten in (2,3) and twenty in (2, 3) and unique1 in (84396, 60814);
 four | ten | twenty | unique1 
------+-----+--------+---------
    3 |   3 |      3 |   84396
    2 |   2 |      2 |   60814
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select four, ten, twenty, unique1 from wisconsin_numeric where ten in (2,3) and twenty in (2, 3) and unique1 in (84396, 60814);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin_numeric (actual rows=2.00 loops=1)
   Recheck Cond: ((ten = ANY ('{2,3}'::numeric[])) AND (twenty = ANY ('{2,3}'::numeric[])) AND (unique1 = ANY ('{84396,60814}'::numeric[])))
   Heap Blocks: exact=2
   Buffers: shared hit=44
   ->  Bitmap Index Scan on numeric_idx_four_ten_twenty_unique1 (actual rows=2.00 loops=1)
         Index Cond: ((ten = ANY ('{2,3}'::numeric[])) AND (twenty = ANY ('{2,3}'::numeric[])) AND (unique1 = ANY ('{84396,60814}'::numeric[])))
         Index Searches: 14
         Buffers: shared hit=42
(8 rows)

-- Equivalent "SAOP, range skip array" version should also return 2 rows:
select four, ten, twenty, unique1 from wisconsin_numeric where ten in (2,3) and twenty between 2 and 3 and unique1 in (84396, 60814);
 four | ten | twenty | unique1 
------+-----+--------+---------
    3 |   3 |      3 |   84396
    2 |   2 |      2 |   60814
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select four, ten, twenty, unique1 from wisconsin_numeric where ten in (2,3) and twenty between 2 and 3 and unique1 in (84396, 60814);
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin_numeric (actual rows=2.00 loops=1)
   Recheck Cond: ((ten = ANY ('{2,3}'::numeric[])) AND (twenty >= '2'::numeric) AND (twenty <= '3'::numeric) AND (unique1 = ANY ('{84396,60814}'::numeric[])))
   Heap Blocks: exact=2
   Buffers: shared hit=47
   ->  Bitmap Index Scan on numeric_idx_four_ten_twenty_unique1 (actual rows=2.00 loops=1)
         Index Cond: ((ten = ANY ('{2,3}'::numeric[])) AND (twenty >= '2'::numeric) AND (twenty <= '3'::numeric) AND (unique1 = ANY ('{84396,60814}'::numeric[])))
         Index Searches: 15
         Buffers: shared hit=45
(8 rows)

-- Equivalent "range skip array, SAOP" version should also return 2 rows:
select four, ten, twenty, unique1 from wisconsin_numeric where ten between 2 and 3 and twenty in (2, 3) and unique1 in (84396, 60814);
 four | ten | twenty | unique1 
------+-----+--------+---------
    3 |   3 |      3 |   84396
    2 |   2 |      2 |   60814
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select four, ten, twenty, unique1 from wisconsin_numeric where ten between 2 and 3 and twenty in (2, 3) and unique1 in (84396, 60814);
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin_numeric (actual rows=2.00 loops=1)
   Recheck Cond: ((ten >= '2'::numeric) AND (ten <= '3'::numeric) AND (twenty = ANY ('{2,3}'::numeric[])) AND (unique1 = ANY ('{84396,60814}'::numeric[])))
   Heap Blocks: exact=2
   Buffers: shared hit=50
   ->  Bitmap Index Scan on numeric_idx_four_ten_twenty_unique1 (actual rows=2.00 loops=1)
         Index Cond: ((ten >= '2'::numeric) AND (ten <= '3'::numeric) AND (twenty = ANY ('{2,3}'::numeric[])) AND (unique1 = ANY ('{84396,60814}'::numeric[])))
         Index Searches: 16
         Buffers: shared hit=48
(8 rows)

-- Equivalent "range skip array, range skip array" version should also return 2 rows:
select four, ten, twenty, unique1 from wisconsin_numeric where ten between 2 and 3 and twenty between 2 and 3 and unique1 in (84396, 60814);
 four | ten | twenty | unique1 
------+-----+--------+---------
    3 |   3 |      3 |   84396
    2 |   2 |      2 |   60814
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select four, ten, twenty, unique1 from wisconsin_numeric where ten between 2 and 3 and twenty between 2 and 3 and unique1 in (84396, 60814);
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin_numeric (actual rows=2.00 loops=1)
   Recheck Cond: ((ten >= '2'::numeric) AND (ten <= '3'::numeric) AND (twenty >= '2'::numeric) AND (twenty <= '3'::numeric) AND (unique1 = ANY ('{84396,60814}'::numeric[])))
   Heap Blocks: exact=2
   Buffers: shared hit=50
   ->  Bitmap Index Scan on numeric_idx_four_ten_twenty_unique1 (actual rows=2.00 loops=1)
         Index Cond: ((ten >= '2'::numeric) AND (ten <= '3'::numeric) AND (twenty >= '2'::numeric) AND (twenty <= '3'::numeric) AND (unique1 = ANY ('{84396,60814}'::numeric[])))
         Index Searches: 16
         Buffers: shared hit=48
(8 rows)

-- Four, ten, twenty, unique1 (causes errors about attribute order from
-- _by_preprocess_keys) -- this is the original and more complicated version
-- of the previous tests (I broke it into smaller parts, but kept the
-- original here):
select four, ten, twenty, unique1
from wisconsin_numeric
where
  ten between 1 and 10
  and twenty in (1, 2, 3)
  and unique1 in (84396, 217539, 60814);
 four | ten | twenty | unique1 
------+-----+--------+---------
    2 |   2 |      2 |  217539
    3 |   3 |      3 |   84396
    2 |   2 |      2 |   60814
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF) -- master 822 hits
select four, ten, twenty, unique1
from wisconsin_numeric
where
  ten between 1 and 10
  and twenty in (1, 2, 3)
  and unique1 in (84396, 217539, 60814);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on wisconsin_numeric (actual rows=3.00 loops=1)
   Recheck Cond: ((ten >= '1'::numeric) AND (ten <= '10'::numeric) AND (twenty = ANY ('{1,2,3}'::numeric[])) AND (unique1 = ANY ('{84396,217539,60814}'::numeric[])))
   Heap Blocks: exact=3
   Buffers: shared hit=93
   ->  Bitmap Index Scan on numeric_idx_four_ten_twenty_unique1 (actual rows=3.00 loops=1)
         Index Cond: ((ten >= '1'::numeric) AND (ten <= '10'::numeric) AND (twenty = ANY ('{1,2,3}'::numeric[])) AND (unique1 = ANY ('{84396,217539,60814}'::numeric[])))
         Index Searches: 30
         Buffers: shared hit=90
(8 rows)

-------------------------------------
-- (June 16) NULLS FIRST test case --
-------------------------------------
set client_min_messages=error;
drop table if exists nulls_first_test;
reset client_min_messages;
create unlogged table nulls_first_test(
  a int,
  b int
);
create index nulls_first_test_idx on nulls_first_test(a nulls first, b);
insert into nulls_first_test(a, b)
select NULL, i from generate_series(1, 3500) i;
insert into nulls_first_test(a, b)
select 2147483647, i from generate_series(1, 3500) i;
set enable_indexscan to on;
set enable_bitmapscan to off;
-- Forwards scan
select * from nulls_first_test where b = 3 order by a nulls first, b;
     a      | b 
------------+---
            | 3
 2147483647 | 3
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from nulls_first_test where b = 3 order by a nulls first, b;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Index Scan using nulls_first_test_idx on nulls_first_test  (cost=0.28..149.18 rows=35 width=8) (actual rows=2.00 loops=1)
   Index Cond: (b = 3)
   Index Searches: 2
   Buffers: shared hit=6
(4 rows)

-- Backwards scan
select * from nulls_first_test where b = 3 order by a desc nulls last, b desc;
     a      | b 
------------+---
 2147483647 | 3
            | 3
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from nulls_first_test where b = 3 order by a desc nulls last, b desc;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using nulls_first_test_idx on nulls_first_test  (cost=0.28..149.18 rows=35 width=8) (actual rows=2.00 loops=1)
   Index Cond: (b = 3)
   Index Searches: 3
   Buffers: shared hit=8
(4 rows)

-- Now add INT_MIN grouping:
insert into nulls_first_test(a, b)
select (-2147483648)::int4, i from generate_series(1, 3500) i;
-- Repeat forwards scan
select * from nulls_first_test where b = 3 order by a nulls first, b;
      a      | b 
-------------+---
             | 3
 -2147483648 | 3
  2147483647 | 3
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from nulls_first_test where b = 3 order by a nulls first, b;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Index Scan using nulls_first_test_idx on nulls_first_test  (cost=0.29..220.48 rows=53 width=8) (actual rows=3.00 loops=1)
   Index Cond: (b = 3)
   Index Searches: 3
   Buffers: shared hit=10
(4 rows)

-- Repeat backwards scan
select * from nulls_first_test where b = 3 order by a desc nulls last, b desc;
      a      | b 
-------------+---
  2147483647 | 3
 -2147483648 | 3
             | 3
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from nulls_first_test where b = 3 order by a desc nulls last, b desc;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using nulls_first_test_idx on nulls_first_test  (cost=0.29..220.48 rows=53 width=8) (actual rows=3.00 loops=1)
   Index Cond: (b = 3)
   Index Searches: 5
   Buffers: shared hit=13
(4 rows)

-- (July 7) NULLS FIRST numeric (i.e. no skip support) test case
set client_min_messages=error;
drop table if exists nulls_first_test_numeric;
reset client_min_messages;
create unlogged table nulls_first_test_numeric(
  a numeric,
  b int
);
create index nulls_first_test_numeric_idx on nulls_first_test_numeric(a nulls first, b);
insert into nulls_first_test_numeric(a, b)
select NULL, i from generate_series(1, 3500) i;
insert into nulls_first_test_numeric(a, b)
select 2147483647, i from generate_series(1, 3500) i;
set enable_indexscan to on;
set enable_bitmapscan to off;
-- Forwards scan
select * from nulls_first_test_numeric where b = 3 order by a nulls first, b;
     a      | b 
------------+---
            | 3
 2147483647 | 3
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from nulls_first_test_numeric where b = 3 order by a nulls first, b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using nulls_first_test_numeric_idx on nulls_first_test_numeric  (cost=0.28..125.84 rows=22 width=36) (actual rows=2.00 loops=1)
   Index Cond: (b = 3)
   Index Searches: 3
   Buffers: shared hit=8
(4 rows)

-- Backwards scan
select * from nulls_first_test_numeric where b = 3 order by a desc nulls last, b desc;
     a      | b 
------------+---
 2147483647 | 3
            | 3
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from nulls_first_test_numeric where b = 3 order by a desc nulls last, b desc;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using nulls_first_test_numeric_idx on nulls_first_test_numeric  (cost=0.28..125.84 rows=22 width=36) (actual rows=2.00 loops=1)
   Index Cond: (b = 3)
   Index Searches: 3
   Buffers: shared hit=8
(4 rows)

-- Now add INT_MIN grouping:
insert into nulls_first_test_numeric(a, b)
select (-2147483648)::int4, i from generate_series(1, 3500) i;
-- Repeat forwards scan
select * from nulls_first_test_numeric where b = 3 order by a nulls first, b;
      a      | b 
-------------+---
             | 3
 -2147483648 | 3
  2147483647 | 3
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from nulls_first_test_numeric where b = 3 order by a nulls first, b;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using nulls_first_test_numeric_idx on nulls_first_test_numeric  (cost=0.28..190.06 rows=34 width=36) (actual rows=3.00 loops=1)
   Index Cond: (b = 3)
   Index Searches: 4
   Buffers: shared hit=13
(4 rows)

-- Repeat backwards scan
select * from nulls_first_test_numeric where b = 3 order by a desc nulls last, b desc;
      a      | b 
-------------+---
  2147483647 | 3
 -2147483648 | 3
             | 3
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from nulls_first_test_numeric where b = 3 order by a desc nulls last, b desc;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using nulls_first_test_numeric_idx on nulls_first_test_numeric  (cost=0.28..190.06 rows=34 width=36) (actual rows=3.00 loops=1)
   Index Cond: (b = 3)
   Index Searches: 5
   Buffers: shared hit=13
(4 rows)

-- (July 16) Coverage for "treat NULL as final value in backwards scan
-- direction" case (without skip support):
select * from nulls_first_test_numeric where b = 3130 order by a desc nulls last, b;
      a      |  b   
-------------+------
  2147483647 | 3130
 -2147483648 | 3130
             | 3130
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- This is 15 buffer hits (not 17) due to optimization
select * from nulls_first_test_numeric where b = 3130 order by a desc nulls last, b;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using nulls_first_test_numeric_idx on nulls_first_test_numeric  (cost=0.28..190.06 rows=34 width=36) (actual rows=3.00 loops=1)
   Index Cond: (b = 3130)
   Index Searches: 6
   Buffers: shared hit=15
(4 rows)

------------------------------------------------------------------------
-- (July 2) Alexander Alekseev failing "char" (not char(1)) test case --
------------------------------------------------------------------------
set client_min_messages=error;
drop table if exists alekseev_test;
reset client_min_messages;
create unlogged table alekseev_test(c "char", n bigint);
select setseed(0.5);
 setseed 
---------
 
(1 row)

insert into alekseev_test
select chr(ascii('a') + random(0,2)) as c,
random(0, 1_000_000_000) as n
from generate_series(0, 10_000);
create index alekseev_test_idx on alekseev_test using btree(c, n);
vacuum analyze alekseev_test;
-- Force bitmap index scan:
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
-- Better not have a buggy btree/char_ops skip support function:
select count(*) from alekseev_test where n > 900_000_000;
 count 
-------
   988
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 11 buffer hits
select count(*) from alekseev_test where n > 900_000_000;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=94.62..94.63 rows=1 width=8) (actual rows=1.00 loops=1)
   Buffers: shared hit=67
   ->  Bitmap Heap Scan on alekseev_test  (cost=24.80..92.15 rows=988 width=0) (actual rows=988.00 loops=1)
         Recheck Cond: (n > 900000000)
         Heap Blocks: exact=54
         Buffers: shared hit=67
         ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..24.55 rows=988 width=0) (actual rows=988.00 loops=1)
               Index Cond: (n > 900000000)
               Index Searches: 4
               Buffers: shared hit=13
(10 rows)

-- More selective query:
select c, n from alekseev_test where n = 952_200_397;
 c |     n     
---+-----------
 c | 952200397
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where n = 952_200_397;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=9.17..11.18 rows=1 width=9) (actual rows=1.00 loops=1)
   Recheck Cond: (n = 952200397)
   Heap Blocks: exact=1
   Buffers: shared hit=11
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..9.17 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: (n = 952200397)
         Index Searches: 5
         Buffers: shared hit=10
(8 rows)

-- More selective query, low value that exists:
select c, n from alekseev_test where n = 24_759;
 c |   n   
---+-------
 b | 24759
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where n = 24_759;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=9.17..11.18 rows=1 width=9) (actual rows=1.00 loops=1)
   Recheck Cond: (n = 24759)
   Heap Blocks: exact=1
   Buffers: shared hit=9
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..9.17 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: (n = 24759)
         Index Searches: 4
         Buffers: shared hit=8
(8 rows)

-- More selective query, low value that does not exist:
select c, n from alekseev_test where n = -1000;
 c | n 
---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where n = -1000;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=9.17..11.18 rows=1 width=9) (actual rows=0.00 loops=1)
   Recheck Cond: (n = '-1000'::integer)
   Buffers: shared hit=8
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..9.17 rows=1 width=0) (actual rows=0.00 loops=1)
         Index Cond: (n = '-1000'::integer)
         Index Searches: 4
         Buffers: shared hit=8
(7 rows)

-- Extremal elements so that scan visits leftmost and rightmost tuples within
-- each individual "c" grouping:
select c, n from alekseev_test where n in (1, 24759, 999843016);
 c |     n     
---+-----------
 b |     24759
 c | 999843016
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 8 buffer hits
select c, n from alekseev_test where n in (1, 24759, 999843016);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=25.51..30.85 rows=3 width=9) (actual rows=2.00 loops=1)
   Recheck Cond: (n = ANY ('{1,24759,999843016}'::bigint[]))
   Heap Blocks: exact=2
   Buffers: shared hit=10
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..25.51 rows=3 width=0) (actual rows=2.00 loops=1)
         Index Cond: (n = ANY ('{1,24759,999843016}'::bigint[]))
         Index Searches: 4
         Buffers: shared hit=8
(8 rows)

-- Middling elements in SAOP test:
select c, n
from
  alekseev_test
where
n in (500_048_538,
      500_061_970,
      500_129_489,
      500_143_236,
      500_164_863,
      500_229_159,
      500_255_696,
      500_411_856,
      500_448_495,
      500_630_870);
 c |     n     
---+-----------
 c | 500061970
 a | 500048538
 a | 500411856
 b | 500143236
 b | 500164863
 a | 500129489
 b | 500448495
 a | 500229159
 a | 500255696
 a | 500630870
(10 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 10 buffer hits
select c, n
from
  alekseev_test
where
n in (500_048_538,
      500_061_970,
      500_129_489,
      500_143_236,
      500_164_863,
      500_229_159,
      500_255_696,
      500_411_856,
      500_448_495,
      500_630_870);
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=28.12..44.01 rows=10 width=9) (actual rows=10.00 loops=1)
   Recheck Cond: (n = ANY ('{500048538,500061970,500129489,500143236,500164863,500229159,500255696,500411856,500448495,500630870}'::bigint[]))
   Heap Blocks: exact=10
   Buffers: shared hit=20
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..28.09 rows=10 width=0) (actual rows=10.00 loops=1)
         Index Cond: (n = ANY ('{500048538,500061970,500129489,500143236,500164863,500229159,500255696,500411856,500448495,500630870}'::bigint[]))
         Index Searches: 5
         Buffers: shared hit=10
(8 rows)

-- Force index scan:
set enable_bitmapscan to off;
set enable_indexonlyscan to off;
set enable_indexscan to on;
---------------------------------
-- "char" backwards scan tests --
---------------------------------
-- Extremal elements so that scan visits leftmost and rightmost tuples within
-- each individual "c" grouping:
select c, n from alekseev_test where n in (1, 24759, 999843016) order by c desc, n desc;
 c |     n     
---+-----------
 c | 999843016
 b |     24759
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 12 buffer hits
select c, n from alekseev_test where n in (1, 24759, 999843016) order by c desc, n desc;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using alekseev_test_idx on alekseev_test  (cost=0.29..31.29 rows=3 width=9) (actual rows=2.00 loops=1)
   Index Cond: (n = ANY ('{1,24759,999843016}'::bigint[]))
   Index Searches: 4
   Buffers: shared hit=10
(4 rows)

-------------------------------------------------------
-- Text tests, which can't use skip support function --
-------------------------------------------------------
-- Make "more selective query" work with text, so we have somewhat of a basis
-- of comparison:
alter table alekseev_test alter column c type text;
-- Force bitmap index scan:
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
------------------------------------
-- Now repeat queries from before --
------------------------------------
-- "Better not have a buggy btree/char_ops skip support function", but no skip
-- support function this time around (since this is text):
select count(*) from alekseev_test where n > 900_000_000;
 count 
-------
   988
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- parity with "char" test, 11 buffer hits
select count(*) from alekseev_test where n > 900_000_000;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=236.36..236.37 rows=1 width=8) (actual rows=1.00 loops=1)
   Buffers: shared hit=67
   ->  Bitmap Heap Scan on alekseev_test  (cost=157.54..233.89 rows=988 width=0) (actual rows=988.00 loops=1)
         Recheck Cond: (n > 900000000)
         Heap Blocks: exact=54
         Buffers: shared hit=67
         ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..157.29 rows=988 width=0) (actual rows=988.00 loops=1)
               Index Cond: (n > 900000000)
               Index Searches: 4
               Buffers: shared hit=13
(10 rows)

-- More selective query:
select c, n from alekseev_test where n = 952_200_397;
 c |     n     
---+-----------
 c | 952200397
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where n = 952_200_397;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=157.29..159.31 rows=1 width=40) (actual rows=1.00 loops=1)
   Recheck Cond: (n = 952200397)
   Heap Blocks: exact=1
   Buffers: shared hit=13
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..157.29 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: (n = 952200397)
         Index Searches: 6
         Buffers: shared hit=12
(8 rows)

-- More selective query, low value that exists:
select c, n from alekseev_test where n = 24_759;
 c |   n   
---+-------
 b | 24759
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where n = 24_759;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=157.29..159.31 rows=1 width=40) (actual rows=1.00 loops=1)
   Recheck Cond: (n = 24759)
   Heap Blocks: exact=1
   Buffers: shared hit=9
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..157.29 rows=1 width=0) (actual rows=1.00 loops=1)
         Index Cond: (n = 24759)
         Index Searches: 4
         Buffers: shared hit=8
(8 rows)

-- More selective query, low value that does not exist:
select c, n from alekseev_test where n = -1000;
 c | n 
---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where n = -1000;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=157.29..159.31 rows=1 width=40) (actual rows=0.00 loops=1)
   Recheck Cond: (n = '-1000'::integer)
   Buffers: shared hit=8
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..157.29 rows=1 width=0) (actual rows=0.00 loops=1)
         Index Cond: (n = '-1000'::integer)
         Index Searches: 4
         Buffers: shared hit=8
(7 rows)

-- Extremal elements so that scan visits leftmost and rightmost tuples within
-- each individual "c" grouping:
select c, n from alekseev_test where n in (1, 24759, 999843016);
 c |     n     
---+-----------
 b |     24759
 c | 999843016
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- parity with "char" test, 8 buffer hits
select c, n from alekseev_test where n in (1, 24759, 999843016);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=157.29..162.68 rows=3 width=40) (actual rows=2.00 loops=1)
   Recheck Cond: (n = ANY ('{1,24759,999843016}'::bigint[]))
   Heap Blocks: exact=2
   Buffers: shared hit=10
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..157.29 rows=3 width=0) (actual rows=2.00 loops=1)
         Index Cond: (n = ANY ('{1,24759,999843016}'::bigint[]))
         Index Searches: 4
         Buffers: shared hit=8
(8 rows)

-- Middling elements in SAOP test:
select c, n
from
  alekseev_test
where
n in (500_048_538,
      500_061_970,
      500_129_489,
      500_143_236,
      500_164_863,
      500_229_159,
      500_255_696,
      500_411_856,
      500_448_495,
      500_630_870);
 c |     n     
---+-----------
 c | 500061970
 a | 500048538
 a | 500411856
 b | 500143236
 b | 500164863
 a | 500129489
 b | 500448495
 a | 500229159
 a | 500255696
 a | 500630870
(10 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 14 buffer hits vs 10 for "char" due to not naturally needing to visit extremal n values
select c, n
from
  alekseev_test
where
n in (500_048_538,
      500_061_970,
      500_129_489,
      500_143_236,
      500_164_863,
      500_229_159,
      500_255_696,
      500_411_856,
      500_448_495,
      500_630_870);
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on alekseev_test  (cost=157.32..173.52 rows=10 width=40) (actual rows=10.00 loops=1)
   Recheck Cond: (n = ANY ('{500048538,500061970,500129489,500143236,500164863,500229159,500255696,500411856,500448495,500630870}'::bigint[]))
   Heap Blocks: exact=10
   Buffers: shared hit=24
   ->  Bitmap Index Scan on alekseev_test_idx  (cost=0.00..157.29 rows=10 width=0) (actual rows=10.00 loops=1)
         Index Cond: (n = ANY ('{500048538,500061970,500129489,500143236,500164863,500229159,500255696,500411856,500448495,500630870}'::bigint[]))
         Index Searches: 7
         Buffers: shared hit=14
(8 rows)

-- Force index scan:
set enable_bitmapscan to off;
set enable_indexonlyscan to off;
set enable_indexscan to on;
-------------------------------
-- text backwards scan tests --
-------------------------------
-- Extremal elements so that scan visits leftmost and rightmost tuples within
-- each individual "c" grouping:
select c, n from alekseev_test where n in (1, 24759, 999843016) order by c desc, n desc;
 c |     n     
---+-----------
 c | 999843016
 b |     24759
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 12 buffer hits
select c, n from alekseev_test where n in (1, 24759, 999843016) order by c desc, n desc;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using alekseev_test_idx on alekseev_test  (cost=0.29..163.32 rows=3 width=40) (actual rows=2.00 loops=1)
   Index Cond: (n = ANY ('{1,24759,999843016}'::bigint[]))
   Index Searches: 4
   Buffers: shared hit=10
(4 rows)

------------------------------
-- text NULL tests (July 7) --
------------------------------
insert into alekseev_test
select null, n from alekseev_test;
-- More selective query:
select c, n from alekseev_test where n = 952_200_397;
 c |     n     
---+-----------
 c | 952200397
   | 952200397
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where n = 952_200_397;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..312.88 rows=1 width=40) (actual rows=2.00 loops=1)
   Index Cond: (n = 952200397)
   Index Searches: 7
   Buffers: shared hit=16
(4 rows)

-- More selective query, low value that exists:
select c, n from alekseev_test where n = 24_759;
 c |   n   
---+-------
 b | 24759
   | 24759
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where n = 24_759;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..312.88 rows=1 width=40) (actual rows=2.00 loops=1)
   Index Cond: (n = 24759)
   Index Searches: 4
   Buffers: shared hit=10
(4 rows)

-- More selective query, low value that does not exist:
select c, n from alekseev_test where n = -1000;
 c | n 
---+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where n = -1000;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..312.88 rows=1 width=40) (actual rows=0.00 loops=1)
   Index Cond: (n = '-1000'::integer)
   Index Searches: 4
   Buffers: shared hit=8
(4 rows)

-- Extremal elements so that scan visits leftmost and rightmost tuples within
-- each individual "c" grouping:
select c, n from alekseev_test where n in (1, 24759, 999843016);
 c |     n     
---+-----------
 b |     24759
 c | 999843016
   |     24759
   | 999843016
(4 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- parity with "char" test, 8 buffer hits
select c, n from alekseev_test where n in (1, 24759, 999843016);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..316.89 rows=3 width=40) (actual rows=4.00 loops=1)
   Index Cond: (n = ANY ('{1,24759,999843016}'::bigint[]))
   Index Searches: 5
   Buffers: shared hit=14
(4 rows)

-- Same again, but IS NOT NULL inequality used on skip attribute:
select c, n from alekseev_test where c is not null and n in (1, 24759, 999843016);
 c |     n     
---+-----------
 b |     24759
 c | 999843016
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- parity with "char" test, 8 buffer hits
select c, n from alekseev_test where c is not null and n in (1, 24759, 999843016);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..358.25 rows=3 width=40) (actual rows=2.00 loops=1)
   Index Cond: ((c IS NOT NULL) AND (n = ANY ('{1,24759,999843016}'::bigint[])))
   Index Searches: 4
   Buffers: shared hit=10
(4 rows)

-- Same again, but with regular > inequality used on skip attribute:
select c, n from alekseev_test where c  > 'a' and n in (1, 24759, 999843016);
 c |     n     
---+-----------
 b |     24759
 c | 999843016
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- parity with "char" test, 8 buffer hits
select c, n from alekseev_test where c  > 'a' and n in (1, 24759, 999843016);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..120.56 rows=1 width=40) (actual rows=2.00 loops=1)
   Index Cond: ((c > 'a'::text) AND (n = ANY ('{1,24759,999843016}'::bigint[])))
   Index Searches: 3
   Buffers: shared hit=8
(4 rows)

-- Same again, but with regular < inequality used on skip attribute:
select c, n from alekseev_test where c  < 'c' and n in (1, 24759, 999843016);
 c |   n   
---+-------
 b | 24759
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- parity with "char" test, 8 buffer hits
select c, n from alekseev_test where c  < 'c' and n in (1, 24759, 999843016);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..120.56 rows=1 width=40) (actual rows=1.00 loops=1)
   Index Cond: ((c < 'c'::text) AND (n = ANY ('{1,24759,999843016}'::bigint[])))
   Index Searches: 3
   Buffers: shared hit=7
(4 rows)

-- Middling elements in SAOP test:
select c, n
from
  alekseev_test
where
n in (500_048_538,
      500_061_970,
      500_129_489,
      500_143_236,
      500_164_863,
      500_229_159,
      500_255_696,
      500_411_856,
      500_448_495,
      500_630_870);
 c |     n     
---+-----------
 a | 500048538
 a | 500129489
 a | 500229159
 a | 500255696
 a | 500411856
 a | 500630870
 b | 500143236
 b | 500164863
 b | 500448495
 c | 500061970
   | 500048538
   | 500061970
   | 500129489
   | 500143236
   | 500164863
   | 500229159
   | 500255696
   | 500411856
   | 500448495
   | 500630870
(20 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 14 buffer hits vs 10 for "char" due to not naturally needing to visit extremal n values
select c, n
from
  alekseev_test
where
n in (500_048_538,
      500_061_970,
      500_129_489,
      500_143_236,
      500_164_863,
      500_229_159,
      500_255_696,
      500_411_856,
      500_448_495,
      500_630_870);
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..330.97 rows=10 width=40) (actual rows=20.00 loops=1)
   Index Cond: (n = ANY ('{500048538,500061970,500129489,500143236,500164863,500229159,500255696,500411856,500448495,500630870}'::bigint[]))
   Index Searches: 8
   Buffers: shared hit=36
(4 rows)

---------------------------
-- NULL + Backwards scan --
---------------------------
-- Extremal elements so that scan visits leftmost and rightmost tuples within
-- each individual "c" grouping:
select c, n from alekseev_test where n in (1, 24759, 999843016) order by c desc, n desc;
 c |     n     
---+-----------
   | 999843016
   |     24759
 c | 999843016
 b |     24759
(4 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 12 buffer hits
select c, n from alekseev_test where n in (1, 24759, 999843016) order by c desc, n desc;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using alekseev_test_idx on alekseev_test  (cost=0.29..316.89 rows=3 width=40) (actual rows=4.00 loops=1)
   Index Cond: (n = ANY ('{1,24759,999843016}'::bigint[]))
   Index Searches: 5
   Buffers: shared hit=14
(4 rows)

-- Same again, but with IS NOT NULL on c:
select c, n from alekseev_test where c is not null and n in (1, 24759, 999843016) order by c desc, n desc;
 c |     n     
---+-----------
 c | 999843016
 b |     24759
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- 12 buffer hits
select c, n from alekseev_test where c is not null and n in (1, 24759, 999843016) order by c desc, n desc;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using alekseev_test_idx on alekseev_test  (cost=0.29..358.25 rows=3 width=40) (actual rows=2.00 loops=1)
   Index Cond: ((c IS NOT NULL) AND (n = ANY ('{1,24759,999843016}'::bigint[])))
   Index Searches: 4
   Buffers: shared hit=10
(4 rows)

-- Same again, but with regular > inequality used on skip attribute:
select c, n from alekseev_test where c  > 'a' and n in (1, 24759, 999843016) order by c desc, n desc;
 c |     n     
---+-----------
 c | 999843016
 b |     24759
(2 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- parity with "char" test, 8 buffer hits
select c, n from alekseev_test where c  > 'a' and n in (1, 24759, 999843016) order by c desc, n desc;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using alekseev_test_idx on alekseev_test  (cost=0.29..120.56 rows=1 width=40) (actual rows=2.00 loops=1)
   Index Cond: ((c > 'a'::text) AND (n = ANY ('{1,24759,999843016}'::bigint[])))
   Index Searches: 3
   Buffers: shared hit=8
(4 rows)

-- Same again, but with regular < inequality used on skip attribute:
select c, n from alekseev_test where c  < 'c' and n in (1, 24759, 999843016) order by c desc, n desc;
 c |   n   
---+-------
 b | 24759
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF) -- parity with "char" test, 8 buffer hits
select c, n from alekseev_test where c  < 'c' and n in (1, 24759, 999843016) order by c desc, n desc;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using alekseev_test_idx on alekseev_test  (cost=0.29..120.56 rows=1 width=40) (actual rows=1.00 loops=1)
   Index Cond: ((c < 'c'::text) AND (n = ANY ('{1,24759,999843016}'::bigint[])))
   Index Searches: 3
   Buffers: shared hit=7
(4 rows)

-- Almost the same query again, but now it's an <=:
select c, n from alekseev_test where c  <= 'b' and n in (1, 24759, 999843016) order by c desc, n desc;
 c |   n   
---+-------
 b | 24759
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where c  <= 'b' and n in (1, 24759, 999843016) order by c desc, n desc;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using alekseev_test_idx on alekseev_test  (cost=0.29..120.56 rows=1 width=40) (actual rows=1.00 loops=1)
   Index Cond: ((c <= 'b'::text) AND (n = ANY ('{1,24759,999843016}'::bigint[])))
   Index Searches: 3
   Buffers: shared hit=7
(4 rows)

-- Same exact query again, but now it's a forwards scan:
select c, n from alekseev_test where c  < 'c' and n in (1, 24759, 999843016);
 c |   n   
---+-------
 b | 24759
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where c  < 'c' and n in (1, 24759, 999843016);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..120.56 rows=1 width=40) (actual rows=1.00 loops=1)
   Index Cond: ((c < 'c'::text) AND (n = ANY ('{1,24759,999843016}'::bigint[])))
   Index Searches: 3
   Buffers: shared hit=7
(4 rows)

-- Almost the same query again, but now it's an <=:
select c, n from alekseev_test where c  <= 'b' and n in (1, 24759, 999843016);
 c |   n   
---+-------
 b | 24759
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select c, n from alekseev_test where c  <= 'b' and n in (1, 24759, 999843016);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using alekseev_test_idx on alekseev_test  (cost=0.29..120.56 rows=1 width=40) (actual rows=1.00 loops=1)
   Index Cond: ((c <= 'b'::text) AND (n = ANY ('{1,24759,999843016}'::bigint[])))
   Index Searches: 3
   Buffers: shared hit=7
(4 rows)

--
--
-- (June 6) Check behavior with duplicate index column contents
--
-- From create_index.sql, failed when you first added support for skip scan on
-- an ocplass lacking a skip support routine
--
set client_min_messages=error;
drop table if exists dupindexcols;
reset client_min_messages;
CREATE UNLOGGED TABLE dupindexcols AS
  SELECT unique1 as id, stringu2::text as f1 FROM tenk1_skipscan;
CREATE INDEX dupindexcols_i ON dupindexcols (f1, id, f1 text_pattern_ops);
ANALYZE dupindexcols;
SELECT count(*) FROM dupindexcols
  WHERE f1 BETWEEN 'WA' AND 'ZZZ' and id < 1000 and f1 ~<~ 'YX';
 count 
-------
    97
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
  SELECT count(*) FROM dupindexcols
    WHERE f1 BETWEEN 'WA' AND 'ZZZ' and id < 1000 and f1 ~<~ 'YX';
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=156.56..156.57 rows=1 width=8) (actual rows=1.00 loops=1)
   Buffers: shared hit=104
   ->  Index Scan using dupindexcols_i on dupindexcols  (cost=0.29..156.30 rows=104 width=0) (actual rows=97.00 loops=1)
         Index Cond: ((f1 >= 'WA'::text) AND (f1 <= 'ZZZ'::text) AND (id < 1000) AND (f1 ~<~ 'YX'::text))
         Index Searches: 1
         Buffers: shared hit=104
 Planning:
   Buffers: shared hit=3
(8 rows)

-- (July 12) One of the last failing test cases when adding support for
-- non-skip-support opclasses.
--
-- This is based on int tests from Postgres 17 SAOP test suite, which failed
-- when I forced nbtree to not use skip support as a simple smoke test
--
-- This turned out to be an issue with NULLs, fixed like so:
-- diff --git a/src/backend/access/nbtree/nbtutils.c b/src/backend/access/nbtree/nbtutils.c
-- index 2e4cccde9..1c9519283 100644
-- --- a/src/backend/access/nbtree/nbtutils.c
-- +++ b/src/backend/access/nbtree/nbtutils.c
-- @@ -2002,20 +2002,10 @@ _bt_binsrch_skiparray_skey(FmgrInfo *orderproc,
--      {
--          if (tupnull && !array->null_elem)
--          {
-- -            if (ScanDirectionIsForward(dir))
-- -            {
-- -                if (!(cur->sk_flags & SK_BT_NULLS_FIRST))
-- -                    *set_elem_result = 1;
-- -                else
-- -                    *set_elem_result = -1;
-- -            }
-- +            if (!(cur->sk_flags & SK_BT_NULLS_FIRST))
-- +                *set_elem_result = 1;
--              else
-- -            {
-- -                if (!(cur->sk_flags & SK_BT_NULLS_FIRST))
-- -                    *set_elem_result = -1;
-- -                else
-- -                    *set_elem_result = 1;
-- -            }
-- +                *set_elem_result = -1;
--
--              return;
--          }
set client_min_messages=error;
drop table if exists redescend_numeric_test;
reset client_min_messages;
create unlogged table redescend_numeric_test (district numeric, warehouse numeric, orderid numeric, orderline numeric);
create index must_not_full_scan_numeric on redescend_numeric_test (district, warehouse, orderid, orderline) with (fillfactor=30);
insert into redescend_numeric_test
select district, warehouse, orderid, orderline
from
  generate_series(1, 3) district,
  generate_series(1, 5) warehouse,
  generate_series(1, 150) orderid,
  generate_series(1, 10) orderline
order by
district, warehouse, orderid, orderline;
-- prewarm
select count(*) from redescend_numeric_test;
 count 
-------
 22500
(1 row)

vacuum analyze redescend_numeric_test;
---------------------------------------------------------------------------------
-- Index scan:
set enable_bitmapscan to off;
set enable_indexonlyscan to off;
set enable_indexscan to on;
set client_min_messages=error;
drop table if exists redescend_numeric_test;
reset client_min_messages;
create unlogged table redescend_numeric_test (district numeric, warehouse numeric, orderid numeric, orderline numeric);
create index must_not_full_scan_numeric_idx on redescend_numeric_test (district, warehouse, orderid, orderline) with (fillfactor=30);
insert into redescend_numeric_test
select district, warehouse, orderid, orderline
from
  generate_series(1, 3) district,
  generate_series(1, 5) warehouse,
  generate_series(1, 150) orderid,
  generate_series(1, 10) orderline
order by
district, warehouse, orderid, orderline;
-- prewarm
select count(*) from redescend_numeric_test;
 count 
-------
 22500
(1 row)

vacuum analyze redescend_numeric_test;
---------------------------------------------------------------------------------
insert into redescend_numeric_test
select district, NULL, NULL, NULL
from
  generate_series(1, 3) district,
  generate_series(1, 5) want_five_nulls_per_district;
-- (July 16) Suspected that this was a bug, but master is also affected (no
-- skip arrays here).
--
-- The fact that we have to read page 217 twice here is okay, AFAICT, because
-- the second read cannot possibly find matching tuples that are returned to
-- the scan.
--
-- Note: a bunch of later tests also read page 217 twice, in much the same
-- way.  This test memorializes the fact that this issue isn't unique to skip
-- scan.
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse = 1 and orderid = 1 and orderline in (-1, 2) -- "orderline in (-1, 1)" won't do here
order by district desc, warehouse desc, orderid desc, orderline desc;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |       1 |         2
        2 |         1 |       1 |         2
        1 |         1 |       1 |         2
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse = 1 and orderid = 1 and orderline in (-1, 2)
order by district desc, warehouse desc, orderid desc, orderline desc;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..17.46 rows=2 width=20) (actual rows=3.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse = '1'::numeric) AND (orderid = '1'::numeric) AND (orderline = ANY ('{-1,2}'::numeric[])))
   Index Searches: 4
   Buffers: shared hit=17
(4 rows)

-- Simplest possible repro:
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid = 1 and orderline = 6
order by district desc, warehouse desc, orderid desc, orderline desc;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |       1 |         6
        2 |         1 |       1 |         6
        1 |         1 |       1 |         6
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid = 1 and orderline = 6
order by district desc, warehouse desc, orderid desc, orderline desc;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..10.18 rows=2 width=20) (actual rows=3.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse <= '1'::numeric) AND (orderid = '1'::numeric) AND (orderline = '6'::numeric))
   Index Searches: 4
   Buffers: shared hit=17
(4 rows)

select * from redescend_numeric_test where district in (1,2,3) and warehouse > 4 and orderid > 149;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        1 |         5 |     150 |         1
        1 |         5 |     150 |         2
        1 |         5 |     150 |         3
        1 |         5 |     150 |         4
        1 |         5 |     150 |         5
        1 |         5 |     150 |         6
        1 |         5 |     150 |         7
        1 |         5 |     150 |         8
        1 |         5 |     150 |         9
        1 |         5 |     150 |        10
        2 |         5 |     150 |         1
        2 |         5 |     150 |         2
        2 |         5 |     150 |         3
        2 |         5 |     150 |         4
        2 |         5 |     150 |         5
        2 |         5 |     150 |         6
        2 |         5 |     150 |         7
        2 |         5 |     150 |         8
        2 |         5 |     150 |         9
        2 |         5 |     150 |        10
        3 |         5 |     150 |         1
        3 |         5 |     150 |         2
        3 |         5 |     150 |         3
        3 |         5 |     150 |         4
        3 |         5 |     150 |         5
        3 |         5 |     150 |         6
        3 |         5 |     150 |         7
        3 |         5 |     150 |         8
        3 |         5 |     150 |         9
        3 |         5 |     150 |        10
(30 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test where district in (1,2,3) and warehouse > 4 and orderid > 149; -- 24 buffer hits patch, 76 buffer hits master
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..27.22 rows=22 width=20) (actual rows=30.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse > '4'::numeric) AND (orderid > '149'::numeric))
   Index Searches: 6
   Buffers: shared hit=24
(4 rows)

select * from redescend_numeric_test where district in (1,2,3) and warehouse = 5 and orderid > 149;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        1 |         5 |     150 |         1
        1 |         5 |     150 |         2
        1 |         5 |     150 |         3
        1 |         5 |     150 |         4
        1 |         5 |     150 |         5
        1 |         5 |     150 |         6
        1 |         5 |     150 |         7
        1 |         5 |     150 |         8
        1 |         5 |     150 |         9
        1 |         5 |     150 |        10
        2 |         5 |     150 |         1
        2 |         5 |     150 |         2
        2 |         5 |     150 |         3
        2 |         5 |     150 |         4
        2 |         5 |     150 |         5
        2 |         5 |     150 |         6
        2 |         5 |     150 |         7
        2 |         5 |     150 |         8
        2 |         5 |     150 |         9
        2 |         5 |     150 |        10
        3 |         5 |     150 |         1
        3 |         5 |     150 |         2
        3 |         5 |     150 |         3
        3 |         5 |     150 |         4
        3 |         5 |     150 |         5
        3 |         5 |     150 |         6
        3 |         5 |     150 |         7
        3 |         5 |     150 |         8
        3 |         5 |     150 |         9
        3 |         5 |     150 |        10
(30 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test where district in (1,2,3) and warehouse = 5 and orderid > 149; -- 13 buffer hits (patch + master)
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..27.22 rows=22 width=20) (actual rows=30.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse = '5'::numeric) AND (orderid > '149'::numeric))
   Index Searches: 3
   Buffers: shared hit=13
(4 rows)

select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse < 2 and orderid < 2 and orderline in (6, 7, 8)
order by district desc, warehouse desc, orderid desc, orderline desc;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |       1 |         8
        3 |         1 |       1 |         7
        3 |         1 |       1 |         6
        2 |         1 |       1 |         8
        2 |         1 |       1 |         7
        2 |         1 |       1 |         6
        1 |         1 |       1 |         8
        1 |         1 |       1 |         7
        1 |         1 |       1 |         6
(9 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse < 2 and orderid < 2 and orderline in (6, 7, 8)
order by district desc, warehouse desc, orderid desc, orderline desc;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..28.28 rows=6 width=20) (actual rows=9.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse < '2'::numeric) AND (orderid < '2'::numeric) AND (orderline = ANY ('{6,7,8}'::numeric[])))
   Index Searches: 7
   Buffers: shared hit=26
(4 rows)

select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid <= 1 and orderline in (6, 7, 8)
order by district desc, warehouse desc, orderid desc, orderline desc;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |       1 |         8
        3 |         1 |       1 |         7
        3 |         1 |       1 |         6
        2 |         1 |       1 |         8
        2 |         1 |       1 |         7
        2 |         1 |       1 |         6
        1 |         1 |       1 |         8
        1 |         1 |       1 |         7
        1 |         1 |       1 |         6
(9 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid <= 1 and orderline in (6, 7, 8)
order by district desc, warehouse desc, orderid desc, orderline desc;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..28.28 rows=6 width=20) (actual rows=9.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse <= '1'::numeric) AND (orderid <= '1'::numeric) AND (orderline = ANY ('{6,7,8}'::numeric[])))
   Index Searches: 4
   Buffers: shared hit=17
(4 rows)

select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid in (0, 1) and orderline >= any ('{6,7,8}')
order by district desc, warehouse desc, orderid desc, orderline desc;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |       1 |        10
        3 |         1 |       1 |         9
        3 |         1 |       1 |         8
        3 |         1 |       1 |         7
        3 |         1 |       1 |         6
        2 |         1 |       1 |        10
        2 |         1 |       1 |         9
        2 |         1 |       1 |         8
        2 |         1 |       1 |         7
        2 |         1 |       1 |         6
        1 |         1 |       1 |        10
        1 |         1 |       1 |         9
        1 |         1 |       1 |         8
        1 |         1 |       1 |         7
        1 |         1 |       1 |         6
(15 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid in (0, 1) and orderline >= any ('{6,7,8}')
order by district desc, warehouse desc, orderid desc, orderline desc;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..71.67 rows=33 width=20) (actual rows=15.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse <= '1'::numeric) AND (orderid = ANY ('{0,1}'::numeric[])) AND (orderline >= ANY ('{6,7,8}'::numeric[])))
   Index Searches: 4
   Buffers: shared hit=17
(4 rows)

select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid <= 1 and orderline in (-1, 6, 8, 1000)
order by district desc, warehouse desc, orderid desc, orderline desc;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |       1 |         8
        3 |         1 |       1 |         6
        2 |         1 |       1 |         8
        2 |         1 |       1 |         6
        1 |         1 |       1 |         8
        1 |         1 |       1 |         6
(6 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid <= 1 and orderline in (-1, 6, 8, 1000)
order by district desc, warehouse desc, orderid desc, orderline desc;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..33.80 rows=4 width=20) (actual rows=6.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse <= '1'::numeric) AND (orderid <= '1'::numeric) AND (orderline = ANY ('{-1,6,8,1000}'::numeric[])))
   Index Searches: 4
   Buffers: shared hit=17
(4 rows)

select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid < 2 and orderline in (6, 7, 8)
order by district desc, warehouse desc, orderid desc, orderline desc;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |       1 |         8
        3 |         1 |       1 |         7
        3 |         1 |       1 |         6
        2 |         1 |       1 |         8
        2 |         1 |       1 |         7
        2 |         1 |       1 |         6
        1 |         1 |       1 |         8
        1 |         1 |       1 |         7
        1 |         1 |       1 |         6
(9 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse <= 1 and orderid < 2 and orderline in (6, 7, 8)
order by district desc, warehouse desc, orderid desc, orderline desc;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..28.28 rows=6 width=20) (actual rows=9.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse <= '1'::numeric) AND (orderid < '2'::numeric) AND (orderline = ANY ('{6,7,8}'::numeric[])))
   Index Searches: 4
   Buffers: shared hit=17
(4 rows)

select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse < 2 and orderid <= 1 and orderline in (6, 7, 8)
order by district desc, warehouse desc, orderid desc, orderline desc;
 district | warehouse | orderid | orderline 
----------+-----------+---------+-----------
        3 |         1 |       1 |         8
        3 |         1 |       1 |         7
        3 |         1 |       1 |         6
        2 |         1 |       1 |         8
        2 |         1 |       1 |         7
        2 |         1 |       1 |         6
        1 |         1 |       1 |         8
        1 |         1 |       1 |         7
        1 |         1 |       1 |         6
(9 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from redescend_numeric_test
where district in (1, 2, 3) and warehouse < 2 and orderid <= 1 and orderline in (6, 7, 8)
order by district desc, warehouse desc, orderid desc, orderline desc;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using must_not_full_scan_numeric_idx on redescend_numeric_test  (cost=0.41..28.28 rows=6 width=20) (actual rows=9.00 loops=1)
   Index Cond: ((district = ANY ('{1,2,3}'::numeric[])) AND (warehouse < '2'::numeric) AND (orderid <= '1'::numeric) AND (orderline = ANY ('{6,7,8}'::numeric[])))
   Index Searches: 7
   Buffers: shared hit=26
(4 rows)

----------------------------------------------------------------------------
-- Inequalties required in opposite direction only with skip arrays tests --
----------------------------------------------------------------------------
-- (August 6) These tests were added when you finally started to get serious
-- about the need for skip-array-specific heuristics
set client_min_messages=error;
drop table if exists lessthan_skip_test;
reset client_min_messages;
-- Bitmap index scans
set enable_bitmapscan to on;
set enable_indexonlyscan to off;
set enable_indexscan to off;
create unlogged table lessthan_skip_test(skipattr int4, i int4);
create index ltidx on lessthan_skip_test (skipattr , i);
insert into lessthan_skip_test
select val, dups_per_val from generate_series(1, 90) val,
                generate_series(1,50) dups_per_val;
-- ltidx key space shows that we've truncated every pivot tuple's i key column:
-- pg@regression:5432 [309814]=# :leafkeyspace
-- ┌────┬───────┬───────┬────────┬────────┬────────────┬───────┬───────┬───────────────────┬─────────┬───────────┬────────────────────┐
-- │ i  │ blkno │ flags │ nhtids │ nhblks │ ndeadhblks │ nlive │ ndead │ nhtidschecksimple │ avgsize │ freespace │      highkey       │
-- ├────┼───────┼───────┼────────┼────────┼────────────┼───────┼───────┼───────────────────┼─────────┼───────────┼────────────────────┤
-- │  1 │     1 │     1 │    350 │     20 │          0 │   351 │     0 │                 0 │      16 │     1,128 │ (skipattr, i)=(8)  │
-- │  2 │    17 │     1 │    150 │     20 │          0 │   151 │     0 │                 0 │      16 │     5,128 │ (skipattr, i)=(11) │
-- │  3 │    12 │     1 │     50 │     20 │          0 │    51 │     0 │                 0 │      16 │     7,128 │ (skipattr, i)=(12) │
-- │  4 │    11 │     1 │    350 │     20 │          0 │   351 │     0 │                 0 │      16 │     1,128 │ (skipattr, i)=(19) │
-- │  5 │     6 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(24) │
-- │  6 │    18 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(29) │
-- │  7 │    10 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(34) │
-- │  8 │    19 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(39) │
-- │  9 │     4 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(44) │
-- │ 10 │    20 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(49) │
-- │ 11 │    13 │     1 │     50 │     20 │          0 │    51 │     0 │                 0 │      16 │     7,128 │ (skipattr, i)=(50) │
-- │ 12 │     8 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(55) │
-- │ 13 │    21 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(60) │
-- │ 14 │    14 │     1 │     50 │     20 │          0 │    51 │     0 │                 0 │      16 │     7,128 │ (skipattr, i)=(61) │
-- │ 15 │     9 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(66) │
-- │ 16 │    22 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(71) │
-- │ 17 │    15 │     1 │     50 │     20 │          0 │    51 │     0 │                 0 │      16 │     7,128 │ (skipattr, i)=(72) │
-- │ 18 │     7 │     1 │    200 │     20 │          0 │   201 │     0 │                 0 │      16 │     4,128 │ (skipattr, i)=(76) │
-- │ 19 │     5 │     1 │    200 │     20 │          0 │   201 │     0 │                 0 │      16 │     4,128 │ (skipattr, i)=(80) │
-- │ 20 │     2 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(85) │
-- │ 21 │    23 │     1 │    250 │     20 │          0 │   251 │     0 │                 0 │      16 │     3,128 │ (skipattr, i)=(90) │
-- │ 22 │    16 │     1 │     50 │     20 │          0 │    50 │     0 │                 0 │      16 │     7,148 │ ∅                  │
-- └────┴───────┴───────┴────────┴────────┴────────────┴───────┴───────┴───────────────────┴─────────┴───────────┴────────────────────┘
-- (22 rows)
--
-- This is :rootitems, just to avoid test regressions:
select itemoffset, ctid, itemlen, nulls from bt_page_items('ltidx',
  (select fastroot::int4 from bt_metap('ltidx')));
 itemoffset |  ctid  | itemlen | nulls 
------------+--------+---------+-------
          1 | (1,0)  |       8 | f
          2 | (17,1) |      16 | f
          3 | (12,1) |      16 | f
          4 | (11,1) |      16 | f
          5 | (6,1)  |      16 | f
          6 | (18,1) |      16 | f
          7 | (10,1) |      16 | f
          8 | (19,1) |      16 | f
          9 | (4,1)  |      16 | f
         10 | (20,1) |      16 | f
         11 | (13,1) |      16 | f
         12 | (8,1)  |      16 | f
         13 | (21,1) |      16 | f
         14 | (14,1) |      16 | f
         15 | (9,1)  |      16 | f
         16 | (22,1) |      16 | f
         17 | (15,1) |      16 | f
         18 | (7,1)  |      16 | f
         19 | (5,1)  |      16 | f
         20 | (2,1)  |      16 | f
         21 | (23,1) |      16 | f
         22 | (16,1) |      16 | f
(22 rows)

-- 23 index buffer hits (parity with master):
select * from lessthan_skip_test where i = 2;
 skipattr | i 
----------+---
        1 | 2
        2 | 2
        3 | 2
        4 | 2
        5 | 2
        6 | 2
        7 | 2
        8 | 2
        9 | 2
       10 | 2
       11 | 2
       12 | 2
       13 | 2
       14 | 2
       15 | 2
       16 | 2
       17 | 2
       18 | 2
       19 | 2
       20 | 2
       21 | 2
       22 | 2
       23 | 2
       24 | 2
       25 | 2
       26 | 2
       27 | 2
       28 | 2
       29 | 2
       30 | 2
       31 | 2
       32 | 2
       33 | 2
       34 | 2
       35 | 2
       36 | 2
       37 | 2
       38 | 2
       39 | 2
       40 | 2
       41 | 2
       42 | 2
       43 | 2
       44 | 2
       45 | 2
       46 | 2
       47 | 2
       48 | 2
       49 | 2
       50 | 2
       51 | 2
       52 | 2
       53 | 2
       54 | 2
       55 | 2
       56 | 2
       57 | 2
       58 | 2
       59 | 2
       60 | 2
       61 | 2
       62 | 2
       63 | 2
       64 | 2
       65 | 2
       66 | 2
       67 | 2
       68 | 2
       69 | 2
       70 | 2
       71 | 2
       72 | 2
       73 | 2
       74 | 2
       75 | 2
       76 | 2
       77 | 2
       78 | 2
       79 | 2
       80 | 2
       81 | 2
       82 | 2
       83 | 2
       84 | 2
       85 | 2
       86 | 2
       87 | 2
       88 | 2
       89 | 2
       90 | 2
(90 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i = 2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on lessthan_skip_test  (cost=82.19..99.49 rows=23 width=8) (actual rows=90.00 loops=1)
   Recheck Cond: (i = 2)
   Heap Blocks: exact=1
   Buffers: shared hit=24
   ->  Bitmap Index Scan on ltidx  (cost=0.00..82.18 rows=23 width=0) (actual rows=90.00 loops=1)
         Index Cond: (i = 2)
         Index Searches: 1
         Buffers: shared hit=23
(8 rows)

-- Also 23 index buffer hits (also parity with master):
select * from lessthan_skip_test where i < 2;
 skipattr | i 
----------+---
        1 | 1
        2 | 1
        3 | 1
        4 | 1
        5 | 1
        6 | 1
        7 | 1
        8 | 1
        9 | 1
       10 | 1
       11 | 1
       12 | 1
       13 | 1
       14 | 1
       15 | 1
       16 | 1
       17 | 1
       18 | 1
       19 | 1
       20 | 1
       21 | 1
       22 | 1
       23 | 1
       24 | 1
       25 | 1
       26 | 1
       27 | 1
       28 | 1
       29 | 1
       30 | 1
       31 | 1
       32 | 1
       33 | 1
       34 | 1
       35 | 1
       36 | 1
       37 | 1
       38 | 1
       39 | 1
       40 | 1
       41 | 1
       42 | 1
       43 | 1
       44 | 1
       45 | 1
       46 | 1
       47 | 1
       48 | 1
       49 | 1
       50 | 1
       51 | 1
       52 | 1
       53 | 1
       54 | 1
       55 | 1
       56 | 1
       57 | 1
       58 | 1
       59 | 1
       60 | 1
       61 | 1
       62 | 1
       63 | 1
       64 | 1
       65 | 1
       66 | 1
       67 | 1
       68 | 1
       69 | 1
       70 | 1
       71 | 1
       72 | 1
       73 | 1
       74 | 1
       75 | 1
       76 | 1
       77 | 1
       78 | 1
       79 | 1
       80 | 1
       81 | 1
       82 | 1
       83 | 1
       84 | 1
       85 | 1
       86 | 1
       87 | 1
       88 | 1
       89 | 1
       90 | 1
(90 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i < 2;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on lessthan_skip_test  (cost=82.56..121.40 rows=1507 width=8) (actual rows=90.00 loops=1)
   Recheck Cond: (i < 2)
   Heap Blocks: exact=1
   Buffers: shared hit=24
   ->  Bitmap Index Scan on ltidx  (cost=0.00..82.18 rows=1507 width=0) (actual rows=90.00 loops=1)
         Index Cond: (i < 2)
         Index Searches: 1
         Buffers: shared hit=23
(8 rows)

-- Problematic case where we also expect 23 index buffer hits, for parity with
-- master:
select * from lessthan_skip_test where i > 46;
 skipattr | i  
----------+----
        1 | 47
        2 | 47
        3 | 47
        4 | 47
        5 | 47
        6 | 47
        7 | 47
        8 | 47
        9 | 47
       10 | 47
       11 | 47
       12 | 47
       13 | 47
       14 | 47
       15 | 47
       16 | 47
       17 | 47
       18 | 47
       19 | 47
       20 | 47
       21 | 47
       22 | 47
       23 | 47
       24 | 47
       25 | 47
       26 | 47
       27 | 47
       28 | 47
       29 | 47
       30 | 47
       31 | 47
       32 | 47
       33 | 47
       34 | 47
       35 | 47
       36 | 47
       37 | 47
       38 | 47
       39 | 47
       40 | 47
       41 | 47
       42 | 47
       43 | 47
       44 | 47
       45 | 47
       46 | 47
       47 | 47
       48 | 47
       49 | 47
       50 | 47
       51 | 47
       52 | 47
       53 | 47
       54 | 47
       55 | 47
       56 | 47
       57 | 47
       58 | 47
       59 | 47
       60 | 47
       61 | 47
       62 | 47
       63 | 47
       64 | 47
       65 | 47
       66 | 47
       67 | 47
       68 | 47
       69 | 47
       70 | 47
       71 | 47
       72 | 47
       73 | 47
       74 | 47
       75 | 47
       76 | 47
       77 | 47
       78 | 47
       79 | 47
       80 | 47
       81 | 47
       82 | 47
       83 | 47
       84 | 47
       85 | 47
       86 | 47
       87 | 47
       88 | 47
       89 | 47
       90 | 47
        1 | 48
        2 | 48
        3 | 48
        4 | 48
        5 | 48
        6 | 48
        7 | 48
        8 | 48
        9 | 48
       10 | 48
       11 | 48
       12 | 48
       13 | 48
       14 | 48
       15 | 48
       16 | 48
       17 | 48
       18 | 48
       19 | 48
       20 | 48
       21 | 48
       22 | 48
       23 | 48
       24 | 48
       25 | 48
       26 | 48
       27 | 48
       28 | 48
       29 | 48
       30 | 48
       31 | 48
       32 | 48
       33 | 48
       34 | 48
       35 | 48
       36 | 48
       37 | 48
       38 | 48
       39 | 48
       40 | 48
       41 | 48
       42 | 48
       43 | 48
       44 | 48
       45 | 48
       46 | 48
       47 | 48
       48 | 48
       49 | 48
       50 | 48
       51 | 48
       52 | 48
       53 | 48
       54 | 48
       55 | 48
       56 | 48
       57 | 48
       58 | 48
       59 | 48
       60 | 48
       61 | 48
       62 | 48
       63 | 48
       64 | 48
       65 | 48
       66 | 48
       67 | 48
       68 | 48
       69 | 48
       70 | 48
       71 | 48
       72 | 48
       73 | 48
       74 | 48
       75 | 48
       76 | 48
       77 | 48
       78 | 48
       79 | 48
       80 | 48
       81 | 48
       82 | 48
       83 | 48
       84 | 48
       85 | 48
       86 | 48
       87 | 48
       88 | 48
       89 | 48
       90 | 48
        1 | 49
        2 | 49
        3 | 49
        4 | 49
        5 | 49
        6 | 49
        7 | 49
        8 | 49
        9 | 49
       10 | 49
       11 | 49
       12 | 49
       13 | 49
       14 | 49
       15 | 49
       16 | 49
       17 | 49
       18 | 49
       19 | 49
       20 | 49
       21 | 49
       22 | 49
       23 | 49
       24 | 49
       25 | 49
       26 | 49
       27 | 49
       28 | 49
       29 | 49
       30 | 49
       31 | 49
       32 | 49
       33 | 49
       34 | 49
       35 | 49
       36 | 49
       37 | 49
       38 | 49
       39 | 49
       40 | 49
       41 | 49
       42 | 49
       43 | 49
       44 | 49
       45 | 49
       46 | 49
       47 | 49
       48 | 49
       49 | 49
       50 | 49
       51 | 49
       52 | 49
       53 | 49
       54 | 49
       55 | 49
       56 | 49
       57 | 49
       58 | 49
       59 | 49
       60 | 49
       61 | 49
       62 | 49
       63 | 49
       64 | 49
       65 | 49
       66 | 49
       67 | 49
       68 | 49
       69 | 49
       70 | 49
       71 | 49
       72 | 49
       73 | 49
       74 | 49
       75 | 49
       76 | 49
       77 | 49
       78 | 49
       79 | 49
       80 | 49
       81 | 49
       82 | 49
       83 | 49
       84 | 49
       85 | 49
       86 | 49
       87 | 49
       88 | 49
       89 | 49
       90 | 49
        1 | 50
        2 | 50
        3 | 50
        4 | 50
        5 | 50
        6 | 50
        7 | 50
        8 | 50
        9 | 50
       10 | 50
       11 | 50
       12 | 50
       13 | 50
       14 | 50
       15 | 50
       16 | 50
       17 | 50
       18 | 50
       19 | 50
       20 | 50
       21 | 50
       22 | 50
       23 | 50
       24 | 50
       25 | 50
       26 | 50
       27 | 50
       28 | 50
       29 | 50
       30 | 50
       31 | 50
       32 | 50
       33 | 50
       34 | 50
       35 | 50
       36 | 50
       37 | 50
       38 | 50
       39 | 50
       40 | 50
       41 | 50
       42 | 50
       43 | 50
       44 | 50
       45 | 50
       46 | 50
       47 | 50
       48 | 50
       49 | 50
       50 | 50
       51 | 50
       52 | 50
       53 | 50
       54 | 50
       55 | 50
       56 | 50
       57 | 50
       58 | 50
       59 | 50
       60 | 50
       61 | 50
       62 | 50
       63 | 50
       64 | 50
       65 | 50
       66 | 50
       67 | 50
       68 | 50
       69 | 50
       70 | 50
       71 | 50
       72 | 50
       73 | 50
       74 | 50
       75 | 50
       76 | 50
       77 | 50
       78 | 50
       79 | 50
       80 | 50
       81 | 50
       82 | 50
       83 | 50
       84 | 50
       85 | 50
       86 | 50
       87 | 50
       88 | 50
       89 | 50
       90 | 50
(360 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i > 46;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on lessthan_skip_test  (cost=82.56..121.40 rows=1507 width=8) (actual rows=360.00 loops=1)
   Recheck Cond: (i > 46)
   Heap Blocks: exact=2
   Buffers: shared hit=25
   ->  Bitmap Index Scan on ltidx  (cost=0.00..82.18 rows=1507 width=0) (actual rows=360.00 loops=1)
         Index Cond: (i > 46)
         Index Searches: 1
         Buffers: shared hit=23
(8 rows)

-- Another problematic case where we also expect 23 index buffer hits, for
-- parity with master:
select * from lessthan_skip_test where i between 40 and 46;
 skipattr | i  
----------+----
        1 | 40
        2 | 40
        3 | 40
        4 | 40
        5 | 40
        6 | 40
        7 | 40
        8 | 40
        9 | 40
       10 | 40
       11 | 40
       12 | 40
       13 | 40
       14 | 40
       15 | 40
       16 | 40
       17 | 40
       18 | 40
       19 | 40
       20 | 40
       21 | 40
       22 | 40
       23 | 40
       24 | 40
       25 | 40
       26 | 40
       27 | 40
       28 | 40
       29 | 40
       30 | 40
       31 | 40
       32 | 40
       33 | 40
       34 | 40
       35 | 40
       36 | 40
       37 | 40
       38 | 40
       39 | 40
       40 | 40
       41 | 40
       42 | 40
       43 | 40
       44 | 40
       45 | 40
       46 | 40
       47 | 40
       48 | 40
       49 | 40
       50 | 40
       51 | 40
       52 | 40
       53 | 40
       54 | 40
       55 | 40
       56 | 40
       57 | 40
       58 | 40
       59 | 40
       60 | 40
       61 | 40
       62 | 40
       63 | 40
       64 | 40
       65 | 40
       66 | 40
       67 | 40
       68 | 40
       69 | 40
       70 | 40
       71 | 40
       72 | 40
       73 | 40
       74 | 40
       75 | 40
       76 | 40
       77 | 40
       78 | 40
       79 | 40
       80 | 40
       81 | 40
       82 | 40
       83 | 40
       84 | 40
       85 | 40
       86 | 40
       87 | 40
       88 | 40
       89 | 40
       90 | 40
        1 | 41
        2 | 41
        3 | 41
        4 | 41
        5 | 41
        6 | 41
        7 | 41
        8 | 41
        9 | 41
       10 | 41
       11 | 41
       12 | 41
       13 | 41
       14 | 41
       15 | 41
       16 | 41
       17 | 41
       18 | 41
       19 | 41
       20 | 41
       21 | 41
       22 | 41
       23 | 41
       24 | 41
       25 | 41
       26 | 41
       27 | 41
       28 | 41
       29 | 41
       30 | 41
       31 | 41
       32 | 41
       33 | 41
       34 | 41
       35 | 41
       36 | 41
       37 | 41
       38 | 41
       39 | 41
       40 | 41
       41 | 41
       42 | 41
       43 | 41
       44 | 41
       45 | 41
       46 | 41
       47 | 41
       48 | 41
       49 | 41
       50 | 41
       51 | 41
       52 | 41
       53 | 41
       54 | 41
       55 | 41
       56 | 41
       57 | 41
       58 | 41
       59 | 41
       60 | 41
       61 | 41
       62 | 41
       63 | 41
       64 | 41
       65 | 41
       66 | 41
       67 | 41
       68 | 41
       69 | 41
       70 | 41
       71 | 41
       72 | 41
       73 | 41
       74 | 41
       75 | 41
       76 | 41
       77 | 41
       78 | 41
       79 | 41
       80 | 41
       81 | 41
       82 | 41
       83 | 41
       84 | 41
       85 | 41
       86 | 41
       87 | 41
       88 | 41
       89 | 41
       90 | 41
        1 | 42
        2 | 42
        3 | 42
        4 | 42
        5 | 42
        6 | 42
        7 | 42
        8 | 42
        9 | 42
       10 | 42
       11 | 42
       12 | 42
       13 | 42
       14 | 42
       15 | 42
       16 | 42
       17 | 42
       18 | 42
       19 | 42
       20 | 42
       21 | 42
       22 | 42
       23 | 42
       24 | 42
       25 | 42
       26 | 42
       27 | 42
       28 | 42
       29 | 42
       30 | 42
       31 | 42
       32 | 42
       33 | 42
       34 | 42
       35 | 42
       36 | 42
       37 | 42
       38 | 42
       39 | 42
       40 | 42
       41 | 42
       42 | 42
       43 | 42
       44 | 42
       45 | 42
       46 | 42
       47 | 42
       48 | 42
       49 | 42
       50 | 42
       51 | 42
       52 | 42
       53 | 42
       54 | 42
       55 | 42
       56 | 42
       57 | 42
       58 | 42
       59 | 42
       60 | 42
       61 | 42
       62 | 42
       63 | 42
       64 | 42
       65 | 42
       66 | 42
       67 | 42
       68 | 42
       69 | 42
       70 | 42
       71 | 42
       72 | 42
       73 | 42
       74 | 42
       75 | 42
       76 | 42
       77 | 42
       78 | 42
       79 | 42
       80 | 42
       81 | 42
       82 | 42
       83 | 42
       84 | 42
       85 | 42
       86 | 42
       87 | 42
       88 | 42
       89 | 42
       90 | 42
        1 | 43
        2 | 43
        3 | 43
        4 | 43
        5 | 43
        6 | 43
        7 | 43
        8 | 43
        9 | 43
       10 | 43
       11 | 43
       12 | 43
       13 | 43
       14 | 43
       15 | 43
       16 | 43
       17 | 43
       18 | 43
       19 | 43
       20 | 43
       21 | 43
       22 | 43
       23 | 43
       24 | 43
       25 | 43
       26 | 43
       27 | 43
       28 | 43
       29 | 43
       30 | 43
       31 | 43
       32 | 43
       33 | 43
       34 | 43
       35 | 43
       36 | 43
       37 | 43
       38 | 43
       39 | 43
       40 | 43
       41 | 43
       42 | 43
       43 | 43
       44 | 43
       45 | 43
       46 | 43
       47 | 43
       48 | 43
       49 | 43
       50 | 43
       51 | 43
       52 | 43
       53 | 43
       54 | 43
       55 | 43
       56 | 43
       57 | 43
       58 | 43
       59 | 43
       60 | 43
       61 | 43
       62 | 43
       63 | 43
       64 | 43
       65 | 43
       66 | 43
       67 | 43
       68 | 43
       69 | 43
       70 | 43
       71 | 43
       72 | 43
       73 | 43
       74 | 43
       75 | 43
       76 | 43
       77 | 43
       78 | 43
       79 | 43
       80 | 43
       81 | 43
       82 | 43
       83 | 43
       84 | 43
       85 | 43
       86 | 43
       87 | 43
       88 | 43
       89 | 43
       90 | 43
        1 | 44
        2 | 44
        3 | 44
        4 | 44
        5 | 44
        6 | 44
        7 | 44
        8 | 44
        9 | 44
       10 | 44
       11 | 44
       12 | 44
       13 | 44
       14 | 44
       15 | 44
       16 | 44
       17 | 44
       18 | 44
       19 | 44
       20 | 44
       21 | 44
       22 | 44
       23 | 44
       24 | 44
       25 | 44
       26 | 44
       27 | 44
       28 | 44
       29 | 44
       30 | 44
       31 | 44
       32 | 44
       33 | 44
       34 | 44
       35 | 44
       36 | 44
       37 | 44
       38 | 44
       39 | 44
       40 | 44
       41 | 44
       42 | 44
       43 | 44
       44 | 44
       45 | 44
       46 | 44
       47 | 44
       48 | 44
       49 | 44
       50 | 44
       51 | 44
       52 | 44
       53 | 44
       54 | 44
       55 | 44
       56 | 44
       57 | 44
       58 | 44
       59 | 44
       60 | 44
       61 | 44
       62 | 44
       63 | 44
       64 | 44
       65 | 44
       66 | 44
       67 | 44
       68 | 44
       69 | 44
       70 | 44
       71 | 44
       72 | 44
       73 | 44
       74 | 44
       75 | 44
       76 | 44
       77 | 44
       78 | 44
       79 | 44
       80 | 44
       81 | 44
       82 | 44
       83 | 44
       84 | 44
       85 | 44
       86 | 44
       87 | 44
       88 | 44
       89 | 44
       90 | 44
        1 | 45
        2 | 45
        3 | 45
        4 | 45
        5 | 45
        6 | 45
        7 | 45
        8 | 45
        9 | 45
       10 | 45
       11 | 45
       12 | 45
       13 | 45
       14 | 45
       15 | 45
       16 | 45
       17 | 45
       18 | 45
       19 | 45
       20 | 45
       21 | 45
       22 | 45
       23 | 45
       24 | 45
       25 | 45
       26 | 45
       27 | 45
       28 | 45
       29 | 45
       30 | 45
       31 | 45
       32 | 45
       33 | 45
       34 | 45
       35 | 45
       36 | 45
       37 | 45
       38 | 45
       39 | 45
       40 | 45
       41 | 45
       42 | 45
       43 | 45
       44 | 45
       45 | 45
       46 | 45
       47 | 45
       48 | 45
       49 | 45
       50 | 45
       51 | 45
       52 | 45
       53 | 45
       54 | 45
       55 | 45
       56 | 45
       57 | 45
       58 | 45
       59 | 45
       60 | 45
       61 | 45
       62 | 45
       63 | 45
       64 | 45
       65 | 45
       66 | 45
       67 | 45
       68 | 45
       69 | 45
       70 | 45
       71 | 45
       72 | 45
       73 | 45
       74 | 45
       75 | 45
       76 | 45
       77 | 45
       78 | 45
       79 | 45
       80 | 45
       81 | 45
       82 | 45
       83 | 45
       84 | 45
       85 | 45
       86 | 45
       87 | 45
       88 | 45
       89 | 45
       90 | 45
        1 | 46
        2 | 46
        3 | 46
        4 | 46
        5 | 46
        6 | 46
        7 | 46
        8 | 46
        9 | 46
       10 | 46
       11 | 46
       12 | 46
       13 | 46
       14 | 46
       15 | 46
       16 | 46
       17 | 46
       18 | 46
       19 | 46
       20 | 46
       21 | 46
       22 | 46
       23 | 46
       24 | 46
       25 | 46
       26 | 46
       27 | 46
       28 | 46
       29 | 46
       30 | 46
       31 | 46
       32 | 46
       33 | 46
       34 | 46
       35 | 46
       36 | 46
       37 | 46
       38 | 46
       39 | 46
       40 | 46
       41 | 46
       42 | 46
       43 | 46
       44 | 46
       45 | 46
       46 | 46
       47 | 46
       48 | 46
       49 | 46
       50 | 46
       51 | 46
       52 | 46
       53 | 46
       54 | 46
       55 | 46
       56 | 46
       57 | 46
       58 | 46
       59 | 46
       60 | 46
       61 | 46
       62 | 46
       63 | 46
       64 | 46
       65 | 46
       66 | 46
       67 | 46
       68 | 46
       69 | 46
       70 | 46
       71 | 46
       72 | 46
       73 | 46
       74 | 46
       75 | 46
       76 | 46
       77 | 46
       78 | 46
       79 | 46
       80 | 46
       81 | 46
       82 | 46
       83 | 46
       84 | 46
       85 | 46
       86 | 46
       87 | 46
       88 | 46
       89 | 46
       90 | 46
(630 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i between 40 and 46;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on lessthan_skip_test  (cost=93.49..110.84 rows=23 width=8) (actual rows=630.00 loops=1)
   Recheck Cond: ((i >= 40) AND (i <= 46))
   Heap Blocks: exact=4
   Buffers: shared hit=27
   ->  Bitmap Index Scan on ltidx  (cost=0.00..93.48 rows=23 width=0) (actual rows=630.00 loops=1)
         Index Cond: ((i >= 40) AND (i <= 46))
         Index Searches: 1
         Buffers: shared hit=23
(8 rows)

-- Another problematic case where we also expect 23 index buffer hits, for
-- parity with master:
select * from lessthan_skip_test where i between 50 and 51;
 skipattr | i  
----------+----
        1 | 50
        2 | 50
        3 | 50
        4 | 50
        5 | 50
        6 | 50
        7 | 50
        8 | 50
        9 | 50
       10 | 50
       11 | 50
       12 | 50
       13 | 50
       14 | 50
       15 | 50
       16 | 50
       17 | 50
       18 | 50
       19 | 50
       20 | 50
       21 | 50
       22 | 50
       23 | 50
       24 | 50
       25 | 50
       26 | 50
       27 | 50
       28 | 50
       29 | 50
       30 | 50
       31 | 50
       32 | 50
       33 | 50
       34 | 50
       35 | 50
       36 | 50
       37 | 50
       38 | 50
       39 | 50
       40 | 50
       41 | 50
       42 | 50
       43 | 50
       44 | 50
       45 | 50
       46 | 50
       47 | 50
       48 | 50
       49 | 50
       50 | 50
       51 | 50
       52 | 50
       53 | 50
       54 | 50
       55 | 50
       56 | 50
       57 | 50
       58 | 50
       59 | 50
       60 | 50
       61 | 50
       62 | 50
       63 | 50
       64 | 50
       65 | 50
       66 | 50
       67 | 50
       68 | 50
       69 | 50
       70 | 50
       71 | 50
       72 | 50
       73 | 50
       74 | 50
       75 | 50
       76 | 50
       77 | 50
       78 | 50
       79 | 50
       80 | 50
       81 | 50
       82 | 50
       83 | 50
       84 | 50
       85 | 50
       86 | 50
       87 | 50
       88 | 50
       89 | 50
       90 | 50
(90 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i between 50 and 51;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on lessthan_skip_test  (cost=93.49..110.84 rows=23 width=8) (actual rows=90.00 loops=1)
   Recheck Cond: ((i >= 50) AND (i <= 51))
   Heap Blocks: exact=1
   Buffers: shared hit=24
   ->  Bitmap Index Scan on ltidx  (cost=0.00..93.48 rows=23 width=0) (actual rows=90.00 loops=1)
         Index Cond: ((i >= 50) AND (i <= 51))
         Index Searches: 1
         Buffers: shared hit=23
(8 rows)

-- Another problematic case where master gets 23 index buffer hits:
select * from lessthan_skip_test where i between 51 and 50;
 skipattr | i 
----------+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i between 51 and 50;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on lessthan_skip_test  (cost=93.49..110.84 rows=23 width=8) (actual rows=0.00 loops=1)
   Recheck Cond: ((i >= 51) AND (i <= 50))
   Buffers: shared hit=23
   ->  Bitmap Index Scan on ltidx  (cost=0.00..93.48 rows=23 width=0) (actual rows=0.00 loops=1)
         Index Cond: ((i >= 51) AND (i <= 50))
         Index Searches: 1
         Buffers: shared hit=23
(7 rows)

-- backwards scans:
set enable_bitmapscan to off;
set enable_indexonlyscan to off;
set enable_indexscan to on;
-- 24 index buffer hits on master:
select * from lessthan_skip_test where i = 2 order by skipattr desc, i desc;
 skipattr | i 
----------+---
       90 | 2
       89 | 2
       88 | 2
       87 | 2
       86 | 2
       85 | 2
       84 | 2
       83 | 2
       82 | 2
       81 | 2
       80 | 2
       79 | 2
       78 | 2
       77 | 2
       76 | 2
       75 | 2
       74 | 2
       73 | 2
       72 | 2
       71 | 2
       70 | 2
       69 | 2
       68 | 2
       67 | 2
       66 | 2
       65 | 2
       64 | 2
       63 | 2
       62 | 2
       61 | 2
       60 | 2
       59 | 2
       58 | 2
       57 | 2
       56 | 2
       55 | 2
       54 | 2
       53 | 2
       52 | 2
       51 | 2
       50 | 2
       49 | 2
       48 | 2
       47 | 2
       46 | 2
       45 | 2
       44 | 2
       43 | 2
       42 | 2
       41 | 2
       40 | 2
       39 | 2
       38 | 2
       37 | 2
       36 | 2
       35 | 2
       34 | 2
       33 | 2
       32 | 2
       31 | 2
       30 | 2
       29 | 2
       28 | 2
       27 | 2
       26 | 2
       25 | 2
       24 | 2
       23 | 2
       22 | 2
       21 | 2
       20 | 2
       19 | 2
       18 | 2
       17 | 2
       16 | 2
       15 | 2
       14 | 2
       13 | 2
       12 | 2
       11 | 2
       10 | 2
        9 | 2
        8 | 2
        7 | 2
        6 | 2
        5 | 2
        4 | 2
        3 | 2
        2 | 2
        1 | 2
(90 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i = 2 order by skipattr desc, i desc;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using ltidx on lessthan_skip_test  (cost=0.28..112.41 rows=23 width=8) (actual rows=90.00 loops=1)
   Index Cond: (i = 2)
   Index Searches: 2
   Buffers: shared hit=25
(4 rows)

-- 24 index buffer hits on master:
select * from lessthan_skip_test where i < 2 order by skipattr desc, i desc;
 skipattr | i 
----------+---
       90 | 1
       89 | 1
       88 | 1
       87 | 1
       86 | 1
       85 | 1
       84 | 1
       83 | 1
       82 | 1
       81 | 1
       80 | 1
       79 | 1
       78 | 1
       77 | 1
       76 | 1
       75 | 1
       74 | 1
       73 | 1
       72 | 1
       71 | 1
       70 | 1
       69 | 1
       68 | 1
       67 | 1
       66 | 1
       65 | 1
       64 | 1
       63 | 1
       62 | 1
       61 | 1
       60 | 1
       59 | 1
       58 | 1
       57 | 1
       56 | 1
       55 | 1
       54 | 1
       53 | 1
       52 | 1
       51 | 1
       50 | 1
       49 | 1
       48 | 1
       47 | 1
       46 | 1
       45 | 1
       44 | 1
       43 | 1
       42 | 1
       41 | 1
       40 | 1
       39 | 1
       38 | 1
       37 | 1
       36 | 1
       35 | 1
       34 | 1
       33 | 1
       32 | 1
       31 | 1
       30 | 1
       29 | 1
       28 | 1
       27 | 1
       26 | 1
       25 | 1
       24 | 1
       23 | 1
       22 | 1
       21 | 1
       20 | 1
       19 | 1
       18 | 1
       17 | 1
       16 | 1
       15 | 1
       14 | 1
       13 | 1
       12 | 1
       11 | 1
       10 | 1
        9 | 1
        8 | 1
        7 | 1
        6 | 1
        5 | 1
        4 | 1
        3 | 1
        2 | 1
        1 | 1
(90 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i < 2 order by skipattr desc, i desc;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using ltidx on lessthan_skip_test  (cost=0.28..137.25 rows=1507 width=8) (actual rows=90.00 loops=1)
   Index Cond: (i < 2)
   Index Searches: 1
   Buffers: shared hit=24
(4 rows)

-- 203 buffer hits on master:
select * from lessthan_skip_test where i > 46 order by skipattr desc, i desc;
 skipattr | i  
----------+----
       90 | 50
       90 | 49
       90 | 48
       90 | 47
       89 | 50
       89 | 49
       89 | 48
       89 | 47
       88 | 50
       88 | 49
       88 | 48
       88 | 47
       87 | 50
       87 | 49
       87 | 48
       87 | 47
       86 | 50
       86 | 49
       86 | 48
       86 | 47
       85 | 50
       85 | 49
       85 | 48
       85 | 47
       84 | 50
       84 | 49
       84 | 48
       84 | 47
       83 | 50
       83 | 49
       83 | 48
       83 | 47
       82 | 50
       82 | 49
       82 | 48
       82 | 47
       81 | 50
       81 | 49
       81 | 48
       81 | 47
       80 | 50
       80 | 49
       80 | 48
       80 | 47
       79 | 50
       79 | 49
       79 | 48
       79 | 47
       78 | 50
       78 | 49
       78 | 48
       78 | 47
       77 | 50
       77 | 49
       77 | 48
       77 | 47
       76 | 50
       76 | 49
       76 | 48
       76 | 47
       75 | 50
       75 | 49
       75 | 48
       75 | 47
       74 | 50
       74 | 49
       74 | 48
       74 | 47
       73 | 50
       73 | 49
       73 | 48
       73 | 47
       72 | 50
       72 | 49
       72 | 48
       72 | 47
       71 | 50
       71 | 49
       71 | 48
       71 | 47
       70 | 50
       70 | 49
       70 | 48
       70 | 47
       69 | 50
       69 | 49
       69 | 48
       69 | 47
       68 | 50
       68 | 49
       68 | 48
       68 | 47
       67 | 50
       67 | 49
       67 | 48
       67 | 47
       66 | 50
       66 | 49
       66 | 48
       66 | 47
       65 | 50
       65 | 49
       65 | 48
       65 | 47
       64 | 50
       64 | 49
       64 | 48
       64 | 47
       63 | 50
       63 | 49
       63 | 48
       63 | 47
       62 | 50
       62 | 49
       62 | 48
       62 | 47
       61 | 50
       61 | 49
       61 | 48
       61 | 47
       60 | 50
       60 | 49
       60 | 48
       60 | 47
       59 | 50
       59 | 49
       59 | 48
       59 | 47
       58 | 50
       58 | 49
       58 | 48
       58 | 47
       57 | 50
       57 | 49
       57 | 48
       57 | 47
       56 | 50
       56 | 49
       56 | 48
       56 | 47
       55 | 50
       55 | 49
       55 | 48
       55 | 47
       54 | 50
       54 | 49
       54 | 48
       54 | 47
       53 | 50
       53 | 49
       53 | 48
       53 | 47
       52 | 50
       52 | 49
       52 | 48
       52 | 47
       51 | 50
       51 | 49
       51 | 48
       51 | 47
       50 | 50
       50 | 49
       50 | 48
       50 | 47
       49 | 50
       49 | 49
       49 | 48
       49 | 47
       48 | 50
       48 | 49
       48 | 48
       48 | 47
       47 | 50
       47 | 49
       47 | 48
       47 | 47
       46 | 50
       46 | 49
       46 | 48
       46 | 47
       45 | 50
       45 | 49
       45 | 48
       45 | 47
       44 | 50
       44 | 49
       44 | 48
       44 | 47
       43 | 50
       43 | 49
       43 | 48
       43 | 47
       42 | 50
       42 | 49
       42 | 48
       42 | 47
       41 | 50
       41 | 49
       41 | 48
       41 | 47
       40 | 50
       40 | 49
       40 | 48
       40 | 47
       39 | 50
       39 | 49
       39 | 48
       39 | 47
       38 | 50
       38 | 49
       38 | 48
       38 | 47
       37 | 50
       37 | 49
       37 | 48
       37 | 47
       36 | 50
       36 | 49
       36 | 48
       36 | 47
       35 | 50
       35 | 49
       35 | 48
       35 | 47
       34 | 50
       34 | 49
       34 | 48
       34 | 47
       33 | 50
       33 | 49
       33 | 48
       33 | 47
       32 | 50
       32 | 49
       32 | 48
       32 | 47
       31 | 50
       31 | 49
       31 | 48
       31 | 47
       30 | 50
       30 | 49
       30 | 48
       30 | 47
       29 | 50
       29 | 49
       29 | 48
       29 | 47
       28 | 50
       28 | 49
       28 | 48
       28 | 47
       27 | 50
       27 | 49
       27 | 48
       27 | 47
       26 | 50
       26 | 49
       26 | 48
       26 | 47
       25 | 50
       25 | 49
       25 | 48
       25 | 47
       24 | 50
       24 | 49
       24 | 48
       24 | 47
       23 | 50
       23 | 49
       23 | 48
       23 | 47
       22 | 50
       22 | 49
       22 | 48
       22 | 47
       21 | 50
       21 | 49
       21 | 48
       21 | 47
       20 | 50
       20 | 49
       20 | 48
       20 | 47
       19 | 50
       19 | 49
       19 | 48
       19 | 47
       18 | 50
       18 | 49
       18 | 48
       18 | 47
       17 | 50
       17 | 49
       17 | 48
       17 | 47
       16 | 50
       16 | 49
       16 | 48
       16 | 47
       15 | 50
       15 | 49
       15 | 48
       15 | 47
       14 | 50
       14 | 49
       14 | 48
       14 | 47
       13 | 50
       13 | 49
       13 | 48
       13 | 47
       12 | 50
       12 | 49
       12 | 48
       12 | 47
       11 | 50
       11 | 49
       11 | 48
       11 | 47
       10 | 50
       10 | 49
       10 | 48
       10 | 47
        9 | 50
        9 | 49
        9 | 48
        9 | 47
        8 | 50
        8 | 49
        8 | 48
        8 | 47
        7 | 50
        7 | 49
        7 | 48
        7 | 47
        6 | 50
        6 | 49
        6 | 48
        6 | 47
        5 | 50
        5 | 49
        5 | 48
        5 | 47
        4 | 50
        4 | 49
        4 | 48
        4 | 47
        3 | 50
        3 | 49
        3 | 48
        3 | 47
        2 | 50
        2 | 49
        2 | 48
        2 | 47
        1 | 50
        1 | 49
        1 | 48
        1 | 47
(360 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i > 46 order by skipattr desc, i desc;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using ltidx on lessthan_skip_test  (cost=0.28..137.25 rows=1507 width=8) (actual rows=360.00 loops=1)
   Index Cond: (i > 46)
   Index Searches: 2
   Buffers: shared hit=204
(4 rows)

-- 365 buffer hits on master:
select * from lessthan_skip_test where i between 40 and 46 order by skipattr desc, i desc;
 skipattr | i  
----------+----
       90 | 46
       90 | 45
       90 | 44
       90 | 43
       90 | 42
       90 | 41
       90 | 40
       89 | 46
       89 | 45
       89 | 44
       89 | 43
       89 | 42
       89 | 41
       89 | 40
       88 | 46
       88 | 45
       88 | 44
       88 | 43
       88 | 42
       88 | 41
       88 | 40
       87 | 46
       87 | 45
       87 | 44
       87 | 43
       87 | 42
       87 | 41
       87 | 40
       86 | 46
       86 | 45
       86 | 44
       86 | 43
       86 | 42
       86 | 41
       86 | 40
       85 | 46
       85 | 45
       85 | 44
       85 | 43
       85 | 42
       85 | 41
       85 | 40
       84 | 46
       84 | 45
       84 | 44
       84 | 43
       84 | 42
       84 | 41
       84 | 40
       83 | 46
       83 | 45
       83 | 44
       83 | 43
       83 | 42
       83 | 41
       83 | 40
       82 | 46
       82 | 45
       82 | 44
       82 | 43
       82 | 42
       82 | 41
       82 | 40
       81 | 46
       81 | 45
       81 | 44
       81 | 43
       81 | 42
       81 | 41
       81 | 40
       80 | 46
       80 | 45
       80 | 44
       80 | 43
       80 | 42
       80 | 41
       80 | 40
       79 | 46
       79 | 45
       79 | 44
       79 | 43
       79 | 42
       79 | 41
       79 | 40
       78 | 46
       78 | 45
       78 | 44
       78 | 43
       78 | 42
       78 | 41
       78 | 40
       77 | 46
       77 | 45
       77 | 44
       77 | 43
       77 | 42
       77 | 41
       77 | 40
       76 | 46
       76 | 45
       76 | 44
       76 | 43
       76 | 42
       76 | 41
       76 | 40
       75 | 46
       75 | 45
       75 | 44
       75 | 43
       75 | 42
       75 | 41
       75 | 40
       74 | 46
       74 | 45
       74 | 44
       74 | 43
       74 | 42
       74 | 41
       74 | 40
       73 | 46
       73 | 45
       73 | 44
       73 | 43
       73 | 42
       73 | 41
       73 | 40
       72 | 46
       72 | 45
       72 | 44
       72 | 43
       72 | 42
       72 | 41
       72 | 40
       71 | 46
       71 | 45
       71 | 44
       71 | 43
       71 | 42
       71 | 41
       71 | 40
       70 | 46
       70 | 45
       70 | 44
       70 | 43
       70 | 42
       70 | 41
       70 | 40
       69 | 46
       69 | 45
       69 | 44
       69 | 43
       69 | 42
       69 | 41
       69 | 40
       68 | 46
       68 | 45
       68 | 44
       68 | 43
       68 | 42
       68 | 41
       68 | 40
       67 | 46
       67 | 45
       67 | 44
       67 | 43
       67 | 42
       67 | 41
       67 | 40
       66 | 46
       66 | 45
       66 | 44
       66 | 43
       66 | 42
       66 | 41
       66 | 40
       65 | 46
       65 | 45
       65 | 44
       65 | 43
       65 | 42
       65 | 41
       65 | 40
       64 | 46
       64 | 45
       64 | 44
       64 | 43
       64 | 42
       64 | 41
       64 | 40
       63 | 46
       63 | 45
       63 | 44
       63 | 43
       63 | 42
       63 | 41
       63 | 40
       62 | 46
       62 | 45
       62 | 44
       62 | 43
       62 | 42
       62 | 41
       62 | 40
       61 | 46
       61 | 45
       61 | 44
       61 | 43
       61 | 42
       61 | 41
       61 | 40
       60 | 46
       60 | 45
       60 | 44
       60 | 43
       60 | 42
       60 | 41
       60 | 40
       59 | 46
       59 | 45
       59 | 44
       59 | 43
       59 | 42
       59 | 41
       59 | 40
       58 | 46
       58 | 45
       58 | 44
       58 | 43
       58 | 42
       58 | 41
       58 | 40
       57 | 46
       57 | 45
       57 | 44
       57 | 43
       57 | 42
       57 | 41
       57 | 40
       56 | 46
       56 | 45
       56 | 44
       56 | 43
       56 | 42
       56 | 41
       56 | 40
       55 | 46
       55 | 45
       55 | 44
       55 | 43
       55 | 42
       55 | 41
       55 | 40
       54 | 46
       54 | 45
       54 | 44
       54 | 43
       54 | 42
       54 | 41
       54 | 40
       53 | 46
       53 | 45
       53 | 44
       53 | 43
       53 | 42
       53 | 41
       53 | 40
       52 | 46
       52 | 45
       52 | 44
       52 | 43
       52 | 42
       52 | 41
       52 | 40
       51 | 46
       51 | 45
       51 | 44
       51 | 43
       51 | 42
       51 | 41
       51 | 40
       50 | 46
       50 | 45
       50 | 44
       50 | 43
       50 | 42
       50 | 41
       50 | 40
       49 | 46
       49 | 45
       49 | 44
       49 | 43
       49 | 42
       49 | 41
       49 | 40
       48 | 46
       48 | 45
       48 | 44
       48 | 43
       48 | 42
       48 | 41
       48 | 40
       47 | 46
       47 | 45
       47 | 44
       47 | 43
       47 | 42
       47 | 41
       47 | 40
       46 | 46
       46 | 45
       46 | 44
       46 | 43
       46 | 42
       46 | 41
       46 | 40
       45 | 46
       45 | 45
       45 | 44
       45 | 43
       45 | 42
       45 | 41
       45 | 40
       44 | 46
       44 | 45
       44 | 44
       44 | 43
       44 | 42
       44 | 41
       44 | 40
       43 | 46
       43 | 45
       43 | 44
       43 | 43
       43 | 42
       43 | 41
       43 | 40
       42 | 46
       42 | 45
       42 | 44
       42 | 43
       42 | 42
       42 | 41
       42 | 40
       41 | 46
       41 | 45
       41 | 44
       41 | 43
       41 | 42
       41 | 41
       41 | 40
       40 | 46
       40 | 45
       40 | 44
       40 | 43
       40 | 42
       40 | 41
       40 | 40
       39 | 46
       39 | 45
       39 | 44
       39 | 43
       39 | 42
       39 | 41
       39 | 40
       38 | 46
       38 | 45
       38 | 44
       38 | 43
       38 | 42
       38 | 41
       38 | 40
       37 | 46
       37 | 45
       37 | 44
       37 | 43
       37 | 42
       37 | 41
       37 | 40
       36 | 46
       36 | 45
       36 | 44
       36 | 43
       36 | 42
       36 | 41
       36 | 40
       35 | 46
       35 | 45
       35 | 44
       35 | 43
       35 | 42
       35 | 41
       35 | 40
       34 | 46
       34 | 45
       34 | 44
       34 | 43
       34 | 42
       34 | 41
       34 | 40
       33 | 46
       33 | 45
       33 | 44
       33 | 43
       33 | 42
       33 | 41
       33 | 40
       32 | 46
       32 | 45
       32 | 44
       32 | 43
       32 | 42
       32 | 41
       32 | 40
       31 | 46
       31 | 45
       31 | 44
       31 | 43
       31 | 42
       31 | 41
       31 | 40
       30 | 46
       30 | 45
       30 | 44
       30 | 43
       30 | 42
       30 | 41
       30 | 40
       29 | 46
       29 | 45
       29 | 44
       29 | 43
       29 | 42
       29 | 41
       29 | 40
       28 | 46
       28 | 45
       28 | 44
       28 | 43
       28 | 42
       28 | 41
       28 | 40
       27 | 46
       27 | 45
       27 | 44
       27 | 43
       27 | 42
       27 | 41
       27 | 40
       26 | 46
       26 | 45
       26 | 44
       26 | 43
       26 | 42
       26 | 41
       26 | 40
       25 | 46
       25 | 45
       25 | 44
       25 | 43
       25 | 42
       25 | 41
       25 | 40
       24 | 46
       24 | 45
       24 | 44
       24 | 43
       24 | 42
       24 | 41
       24 | 40
       23 | 46
       23 | 45
       23 | 44
       23 | 43
       23 | 42
       23 | 41
       23 | 40
       22 | 46
       22 | 45
       22 | 44
       22 | 43
       22 | 42
       22 | 41
       22 | 40
       21 | 46
       21 | 45
       21 | 44
       21 | 43
       21 | 42
       21 | 41
       21 | 40
       20 | 46
       20 | 45
       20 | 44
       20 | 43
       20 | 42
       20 | 41
       20 | 40
       19 | 46
       19 | 45
       19 | 44
       19 | 43
       19 | 42
       19 | 41
       19 | 40
       18 | 46
       18 | 45
       18 | 44
       18 | 43
       18 | 42
       18 | 41
       18 | 40
       17 | 46
       17 | 45
       17 | 44
       17 | 43
       17 | 42
       17 | 41
       17 | 40
       16 | 46
       16 | 45
       16 | 44
       16 | 43
       16 | 42
       16 | 41
       16 | 40
       15 | 46
       15 | 45
       15 | 44
       15 | 43
       15 | 42
       15 | 41
       15 | 40
       14 | 46
       14 | 45
       14 | 44
       14 | 43
       14 | 42
       14 | 41
       14 | 40
       13 | 46
       13 | 45
       13 | 44
       13 | 43
       13 | 42
       13 | 41
       13 | 40
       12 | 46
       12 | 45
       12 | 44
       12 | 43
       12 | 42
       12 | 41
       12 | 40
       11 | 46
       11 | 45
       11 | 44
       11 | 43
       11 | 42
       11 | 41
       11 | 40
       10 | 46
       10 | 45
       10 | 44
       10 | 43
       10 | 42
       10 | 41
       10 | 40
        9 | 46
        9 | 45
        9 | 44
        9 | 43
        9 | 42
        9 | 41
        9 | 40
        8 | 46
        8 | 45
        8 | 44
        8 | 43
        8 | 42
        8 | 41
        8 | 40
        7 | 46
        7 | 45
        7 | 44
        7 | 43
        7 | 42
        7 | 41
        7 | 40
        6 | 46
        6 | 45
        6 | 44
        6 | 43
        6 | 42
        6 | 41
        6 | 40
        5 | 46
        5 | 45
        5 | 44
        5 | 43
        5 | 42
        5 | 41
        5 | 40
        4 | 46
        4 | 45
        4 | 44
        4 | 43
        4 | 42
        4 | 41
        4 | 40
        3 | 46
        3 | 45
        3 | 44
        3 | 43
        3 | 42
        3 | 41
        3 | 40
        2 | 46
        2 | 45
        2 | 44
        2 | 43
        2 | 42
        2 | 41
        2 | 40
        1 | 46
        1 | 45
        1 | 44
        1 | 43
        1 | 42
        1 | 41
        1 | 40
(630 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i between 40 and 46 order by skipattr desc, i desc;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using ltidx on lessthan_skip_test  (cost=0.28..123.71 rows=23 width=8) (actual rows=630.00 loops=1)
   Index Cond: ((i >= 40) AND (i <= 46))
   Index Searches: 2
   Buffers: shared hit=366
(4 rows)

-- 24 index buffer hits on master:
select * from lessthan_skip_test where i between 50 and 51 order by skipattr desc, i desc;
 skipattr | i  
----------+----
       90 | 50
       89 | 50
       88 | 50
       87 | 50
       86 | 50
       85 | 50
       84 | 50
       83 | 50
       82 | 50
       81 | 50
       80 | 50
       79 | 50
       78 | 50
       77 | 50
       76 | 50
       75 | 50
       74 | 50
       73 | 50
       72 | 50
       71 | 50
       70 | 50
       69 | 50
       68 | 50
       67 | 50
       66 | 50
       65 | 50
       64 | 50
       63 | 50
       62 | 50
       61 | 50
       60 | 50
       59 | 50
       58 | 50
       57 | 50
       56 | 50
       55 | 50
       54 | 50
       53 | 50
       52 | 50
       51 | 50
       50 | 50
       49 | 50
       48 | 50
       47 | 50
       46 | 50
       45 | 50
       44 | 50
       43 | 50
       42 | 50
       41 | 50
       40 | 50
       39 | 50
       38 | 50
       37 | 50
       36 | 50
       35 | 50
       34 | 50
       33 | 50
       32 | 50
       31 | 50
       30 | 50
       29 | 50
       28 | 50
       27 | 50
       26 | 50
       25 | 50
       24 | 50
       23 | 50
       22 | 50
       21 | 50
       20 | 50
       19 | 50
       18 | 50
       17 | 50
       16 | 50
       15 | 50
       14 | 50
       13 | 50
       12 | 50
       11 | 50
       10 | 50
        9 | 50
        8 | 50
        7 | 50
        6 | 50
        5 | 50
        4 | 50
        3 | 50
        2 | 50
        1 | 50
(90 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i between 50 and 51 order by skipattr desc, i desc;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using ltidx on lessthan_skip_test  (cost=0.28..123.71 rows=23 width=8) (actual rows=90.00 loops=1)
   Index Cond: ((i >= 50) AND (i <= 51))
   Index Searches: 2
   Buffers: shared hit=25
(4 rows)

-- 23 index buffer hits on master:
select * from lessthan_skip_test where i between 51 and 50 order by skipattr desc, i desc;
 skipattr | i 
----------+---
(0 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from lessthan_skip_test where i between 51 and 50 order by skipattr desc, i desc;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using ltidx on lessthan_skip_test  (cost=0.28..123.71 rows=23 width=8) (actual rows=0.00 loops=1)
   Index Cond: ((i >= 51) AND (i <= 50))
   Index Searches: 2
   Buffers: shared hit=24
(4 rows)

-- (September 22 2024)
--
-- Sunday after Andrew's birthday.  Test case proved that I was right to be
-- paranoid about reusing NEXTPRIOR flag for backwards and forwards scans --
-- it is indeed subtly broken.
--
-- What if the scan changes direction, and "5 + infinitesimal" becomes
-- "5 - infinitesimal" without our intending it?  That wouldn't be obviously
-- broken in most cases, but it would be broken if the scan happened to have a
-- lower-order SAOP array mixed in.
set work_mem = 64;
set enable_sort = off;
-- Index scan:
set enable_bitmapscan to off;
set enable_indexonlyscan to off;
set enable_indexscan to on;
set client_min_messages=error;
drop table if exists nextprior_duplicate_test;
reset client_min_messages;
create unlogged table nextprior_duplicate_test(dup numeric, dups_per_val numeric);
create index nextprior_test_idx on nextprior_duplicate_test (dup, dups_per_val);
insert into nextprior_duplicate_test(dup, dups_per_val)
select val, dups_per_val from generate_series(1, 20) val,
                generate_series(1,900) dups_per_val;
vacuum analyze nextprior_duplicate_test; -- Be tidy
begin;
declare nextprior_cursor cursor for
select * from nextprior_duplicate_test where dups_per_val in (1, 450) order by dup, dups_per_val;
fetch forward 2 from nextprior_cursor;
 dup | dups_per_val 
-----+--------------
   1 |            1
   1 |          450
(2 rows)

fetch forward 2 from nextprior_cursor;
 dup | dups_per_val 
-----+--------------
   2 |            1
   2 |          450
(2 rows)

fetch forward 2 from nextprior_cursor;
 dup | dups_per_val 
-----+--------------
   3 |            1
   3 |          450
(2 rows)

-- First wrong answer was seen here with initial failing test:
fetch backward 1 from nextprior_cursor;
 dup | dups_per_val 
-----+--------------
   3 |            1
(1 row)

-- Note: this line hit the familiar "precheck has invalid array keys"
-- assertion failure from the top of _bt_checkkeys, too:
-- TRAP: failed Assert("!_bt_tuple_before_array_skeys(scan, dir, tuple, tupdesc, tupnatts, false, 0, NULL)")
-- Naturally, these were also wrong, since the state of the array keys is now
-- corrupt:
fetch backward 1 from nextprior_cursor;
 dup | dups_per_val 
-----+--------------
   2 |          450
(1 row)

fetch forward 1 from nextprior_cursor;
 dup | dups_per_val 
-----+--------------
   3 |            1
(1 row)

fetch forward 1 from nextprior_cursor;
 dup | dups_per_val 
-----+--------------
   3 |          450
(1 row)

fetch forward 1 from nextprior_cursor;
 dup | dups_per_val 
-----+--------------
   4 |            1
(1 row)

fetch forward 1 from nextprior_cursor;
 dup | dups_per_val 
-----+--------------
   4 |          450
(1 row)

/* nextprior_cursor  */ commit;
EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
declare nextprior_cursor cursor for
select * from nextprior_duplicate_test where dups_per_val in (1, 450) order by dup, dups_per_val;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Index Scan using nextprior_test_idx on nextprior_duplicate_test  (cost=0.29..80.53 rows=40 width=10) (actual rows=40.00 loops=1)
   Index Cond: (dups_per_val = ANY ('{1,450}'::numeric[]))
   Index Searches: 39
   Buffers: shared hit=124
(4 rows)

-- (September 23) DESC variant
--
-- Same again, but this time use "order by dup desc, dups_per_val desc".  This
-- can independently fail; it adds coverage for _bt_tuple_before_array_skeys
-- code path where the initial scan order was forward, and then becomes
-- backward due to cursor direction changing (original tested the opposite
-- transition, from forward direction to backward direction)
EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
declare nextprior_cursor_desc cursor for
select * from nextprior_duplicate_test where dups_per_val in (450, 899)
order by dup desc, dups_per_val desc;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using nextprior_test_idx on nextprior_duplicate_test  (cost=0.29..80.53 rows=40 width=10) (actual rows=40.00 loops=1)
   Index Cond: (dups_per_val = ANY ('{450,899}'::numeric[]))
   Index Searches: 41
   Buffers: shared hit=122
(4 rows)

begin;
declare nextprior_cursor_desc cursor for
select * from nextprior_duplicate_test where dups_per_val in (450, 899)
order by dup desc, dups_per_val desc;
fetch forward 2 from nextprior_cursor_desc;
 dup | dups_per_val 
-----+--------------
  20 |          899
  20 |          450
(2 rows)

fetch forward 2 from nextprior_cursor_desc;
 dup | dups_per_val 
-----+--------------
  19 |          899
  19 |          450
(2 rows)

fetch forward 2 from nextprior_cursor_desc;
 dup | dups_per_val 
-----+--------------
  18 |          899
  18 |          450
(2 rows)

-- First wrong answer was seen here, just like original "order by dup asc,
-- dups_per_val asc" version:
fetch backward 1 from nextprior_cursor_desc;
 dup | dups_per_val 
-----+--------------
  18 |          899
(1 row)

-- Naturally, these were also wrong, since the state of the array keys is now
-- corrupt:
fetch backward 1 from nextprior_cursor_desc;
 dup | dups_per_val 
-----+--------------
  19 |          450
(1 row)

fetch forward 1 from nextprior_cursor_desc;
 dup | dups_per_val 
-----+--------------
  18 |          899
(1 row)

fetch forward 1 from nextprior_cursor_desc;
 dup | dups_per_val 
-----+--------------
  18 |          450
(1 row)

fetch forward 1 from nextprior_cursor_desc;
 dup | dups_per_val 
-----+--------------
  17 |          899
(1 row)

fetch forward 1 from nextprior_cursor_desc;
 dup | dups_per_val 
-----+--------------
  17 |          450
(1 row)

/* nextprior_cursor_desc  */ commit;
-- (November 23) Add test coverage for "mixed cardinality" cases where
-- leftmost pages have lots of distinct values in leading skippy column, but
-- then we encounter a few very large groupings across the index key space
--
-- Original intent of this was to get test coverage for experimental
-- optimization:
/*
commit b4a50b6441440b2a56d84c2c357b31befa945cc3
Refs: [skip-scan-2024-v17.1]
Author:     Peter Geoghegan <pg@bowt.ie>
AuthorDate: 2024-11-23 13:09:59 -0500
Commit:     Peter Geoghegan <pg@bowt.ie>
CommitDate: 2024-11-23 14:20:45 -0500

    Experiment, which doesn't increase any buffers accessed by more than one or two, suggesting a gap in test coverage
---
 src/backend/access/nbtree/nbtsearch.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/backend/access/nbtree/nbtsearch.c b/src/backend/access/nbtree/nbtsearch.c
index 34deb970e..1cb8ffc93 100644
--- a/src/backend/access/nbtree/nbtsearch.c
+++ b/src/backend/access/nbtree/nbtsearch.c
@@ -1841,16 +1841,16 @@ _bt_readpage(IndexScanDesc scan, ScanDirection dir, OffsetNumber offnum,
            IndexTuple  itup = (IndexTuple) PageGetItem(page, iid);
            int         truncatt;

-           truncatt = BTreeTupleGetNAtts(itup, rel);
-           pstate.prechecked = false;  / precheck didn't cover HIKEY /
            if (pstate.skipskip)
            {
                Assert(itup == pstate.finaltup);
-
-               _bt_start_array_keys(scan, dir);
-               pstate.skipskip = false;    / reset for finaltup /
            }
-           _bt_checkkeys(scan, &pstate, arrayKeys, itup, truncatt);
+           else
+           {
+               truncatt = BTreeTupleGetNAtts(itup, rel);
+               pstate.prechecked = false;  / precheck didn't cover HIKEY /
+               _bt_checkkeys(scan, &pstate, arrayKeys, itup, truncatt);
+           }
        }

        if (!pstate.continuescan)
*/
set client_min_messages=error;
drop table if exists high_low_high_card;
reset client_min_messages;
create unlogged table high_low_high_card(
  skippy int4,
  key int4,
  type text
);
create index on high_low_high_card(skippy, key);
insert into high_low_high_card
select
  -- "+ 250" here to make sure that there are leftmost pages full of tuples with
  -- distinct "skippy" vals:
  (abs(hashint4(i % 5)) + 250) % (10000 + 250),
  abs(hashint4(i + 42)) % 100_000,
  'fat'
from
  generate_series(1, 100_000) i;
with card as (
  select
    i skippy,
    abs(hashint4(i + j)) % 10000,
    'skinny'
  from
    generate_series(1, 10000) i,
    generate_series(1, 10) j
),
oth as (
  select
    *
  from
    card c
  where
    not exists (
      select
        *
      from
        high_low_high_card h
      where
        c.skippy = h.skippy)
)
insert into high_low_high_card
select
  *
from
  oth;
vacuum analyze high_low_high_card;
-- Index scan:
set enable_bitmapscan to off;
set enable_indexonlyscan to off;
set enable_indexscan to on;
--------------------
-- Forwards scans --
--------------------
select * from high_low_high_card where key = 40 order by skippy, key;
 skippy | key |  type  
--------+-----+--------
   1615 |  40 | skinny
   1616 |  40 | skinny
   1617 |  40 | skinny
   1618 |  40 | skinny
   1619 |  40 | skinny
   1620 |  40 | skinny
   1621 |  40 | skinny
   1622 |  40 | skinny
   1623 |  40 | skinny
   1624 |  40 | skinny
   5526 |  40 | fat
   9481 |  40 | skinny
   9482 |  40 | skinny
   9483 |  40 | skinny
   9484 |  40 | skinny
   9485 |  40 | skinny
   9486 |  40 | skinny
   9487 |  40 | skinny
   9488 |  40 | skinny
   9489 |  40 | skinny
   9490 |  40 | skinny
(21 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 40 order by skippy, key;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Index Scan using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=21.00 loops=1)
   Index Cond: (key = 40)
   Index Searches: 6
   Buffers: shared hit=433
(4 rows)

select * from high_low_high_card where key = 37 order by skippy, key;
 skippy | key |  type  
--------+-----+--------
    255 |  37 | fat
   7080 |  37 | skinny
   7081 |  37 | skinny
   7082 |  37 | skinny
   7083 |  37 | skinny
   7084 |  37 | skinny
   7085 |  37 | skinny
   7086 |  37 | skinny
   7087 |  37 | skinny
   7088 |  37 | skinny
   7089 |  37 | skinny
(11 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 37 order by skippy, key;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Index Scan using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=11.00 loops=1)
   Index Cond: (key = 37)
   Index Searches: 6
   Buffers: shared hit=423
(4 rows)

select * from high_low_high_card where key = 38 order by skippy, key;
 skippy | key | type 
--------+-----+------
   5526 |  38 | fat
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 38 order by skippy, key;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Index Scan using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=1.00 loops=1)
   Index Cond: (key = 38)
   Index Searches: 6
   Buffers: shared hit=413
(4 rows)

select * from high_low_high_card where key = 13 order by skippy, key;
 skippy | key |  type  
--------+-----+--------
   4381 |  13 | skinny
   4382 |  13 | skinny
   4383 |  13 | skinny
   4384 |  13 | skinny
   4385 |  13 | skinny
   4386 |  13 | skinny
   4387 |  13 | skinny
   4388 |  13 | skinny
   4389 |  13 | skinny
   4390 |  13 | skinny
   4726 |  13 | fat
   7836 |  13 | skinny
   7837 |  13 | skinny
   7838 |  13 | skinny
   7839 |  13 | skinny
   7840 |  13 | skinny
   7841 |  13 | skinny
   7842 |  13 | skinny
   7843 |  13 | skinny
   7844 |  13 | skinny
   7845 |  13 | skinny
(21 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 13 order by skippy, key;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Index Scan using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=21.00 loops=1)
   Index Cond: (key = 13)
   Index Searches: 6
   Buffers: shared hit=433
(4 rows)

select * from high_low_high_card where key = 15 order by skippy, key;
 skippy | key | type 
--------+-----+------
   4726 |  15 | fat
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 15 order by skippy, key;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Index Scan using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=1.00 loops=1)
   Index Cond: (key = 15)
   Index Searches: 6
   Buffers: shared hit=413
(4 rows)

---------------------
-- Backwards scans --
---------------------
select * from high_low_high_card where key = 40 order by skippy desc, key desc;
 skippy | key |  type  
--------+-----+--------
   9490 |  40 | skinny
   9489 |  40 | skinny
   9488 |  40 | skinny
   9487 |  40 | skinny
   9486 |  40 | skinny
   9485 |  40 | skinny
   9484 |  40 | skinny
   9483 |  40 | skinny
   9482 |  40 | skinny
   9481 |  40 | skinny
   5526 |  40 | fat
   1624 |  40 | skinny
   1623 |  40 | skinny
   1622 |  40 | skinny
   1621 |  40 | skinny
   1620 |  40 | skinny
   1619 |  40 | skinny
   1618 |  40 | skinny
   1617 |  40 | skinny
   1616 |  40 | skinny
   1615 |  40 | skinny
(21 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 40 order by skippy desc, key desc;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Index Scan Backward using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=21.00 loops=1)
   Index Cond: (key = 40)
   Index Searches: 8
   Buffers: shared hit=437
(4 rows)

select * from high_low_high_card where key = 37 order by skippy desc, key desc;
 skippy | key |  type  
--------+-----+--------
   7089 |  37 | skinny
   7088 |  37 | skinny
   7087 |  37 | skinny
   7086 |  37 | skinny
   7085 |  37 | skinny
   7084 |  37 | skinny
   7083 |  37 | skinny
   7082 |  37 | skinny
   7081 |  37 | skinny
   7080 |  37 | skinny
    255 |  37 | fat
(11 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 37 order by skippy desc, key desc;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Index Scan Backward using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=11.00 loops=1)
   Index Cond: (key = 37)
   Index Searches: 8
   Buffers: shared hit=427
(4 rows)

select * from high_low_high_card where key = 38 order by skippy desc, key desc;
 skippy | key | type 
--------+-----+------
   5526 |  38 | fat
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 38 order by skippy desc, key desc;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Index Scan Backward using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=1.00 loops=1)
   Index Cond: (key = 38)
   Index Searches: 8
   Buffers: shared hit=417
(4 rows)

select * from high_low_high_card where key = 13 order by skippy desc, key desc;
 skippy | key |  type  
--------+-----+--------
   7845 |  13 | skinny
   7844 |  13 | skinny
   7843 |  13 | skinny
   7842 |  13 | skinny
   7841 |  13 | skinny
   7840 |  13 | skinny
   7839 |  13 | skinny
   7838 |  13 | skinny
   7837 |  13 | skinny
   7836 |  13 | skinny
   4726 |  13 | fat
   4390 |  13 | skinny
   4389 |  13 | skinny
   4388 |  13 | skinny
   4387 |  13 | skinny
   4386 |  13 | skinny
   4385 |  13 | skinny
   4384 |  13 | skinny
   4383 |  13 | skinny
   4382 |  13 | skinny
   4381 |  13 | skinny
(21 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 13 order by skippy desc, key desc;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Index Scan Backward using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=21.00 loops=1)
   Index Cond: (key = 13)
   Index Searches: 8
   Buffers: shared hit=437
(4 rows)

select * from high_low_high_card where key = 15 order by skippy desc, key desc;
 skippy | key | type 
--------+-----+------
   4726 |  15 | fat
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, COSTS OFF, SUMMARY OFF)
select * from high_low_high_card where key = 15 order by skippy desc, key desc;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Index Scan Backward using high_low_high_card_skippy_key_idx on high_low_high_card (actual rows=1.00 loops=1)
   Index Cond: (key = 15)
   Index Searches: 8
   Buffers: shared hit=417
(4 rows)

-----------------------------------------------
-- RowCompare skipskip test (January 1 2025) --
-----------------------------------------------
set client_min_messages=error;
drop table if exists rowcompare_skipskip_test;
reset client_min_messages;
create unlogged table rowcompare_skipskip_test(
  a int4,
  b int4,
  c int4
);
create index on rowcompare_skipskip_test(a, b, c);
-- Create table with 3 columns, all of which are high cardinality -- making
-- this a poor target for skip scan in general:
insert into rowcompare_skipskip_test
select
  i, i, i
from generate_series(1, 1000) i;
-- Lower-order RowCompare query, which makes use of skipskip optimization to
-- avoid perf regressions relative to master branch:
--
-- Original assertion failure caused by this query:
--
-- TRAP: failed Assert("!pstate->skipskip"), File:
-- "../source/src/backend/access/nbtree/nbtutils.c", Line: 4995, PID: 3455365
-- [0x5624bbbb24aa] _bt_checkkeys: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/nbtree/nbtutils.c:4995
-- [0x5624bbbab19c] _bt_readpage: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/nbtree/nbtsearch.c:1790
-- [0x5624bbbaa10d] _bt_readnextpage: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/nbtree/nbtsearch.c:2405
-- [0x5624bbbaa7bd] _bt_next: /mnt/nvme/postgresql/patch/build_meson_dc/../source/src/backend/access/nbtree/nbtsearch.c:0
select * from rowcompare_skipskip_test where (b,c) < (4, 2);
 a | b | c 
---+---+---
 1 | 1 | 1
 2 | 2 | 2
 3 | 3 | 3
(3 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from rowcompare_skipskip_test where (b,c) < (4, 2);
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using rowcompare_skipskip_test_a_b_c_idx on rowcompare_skipskip_test  (cost=0.28..54.38 rows=680 width=12) (actual rows=3.00 loops=1)
   Index Cond: (ROW(b, c) < ROW(4, 2))
   Index Searches: 1
   Buffers: shared hit=6
(4 rows)

-----------------------------------------------------------------------------------------------------
-- (Feb 11 2025) test for logic in _bt_forcenonrequired with mixed range and non-range skip arrays --
-----------------------------------------------------------------------------------------------------
set client_min_messages=error;
drop table if exists forcenonrequired_test;
reset client_min_messages;
create unlogged table forcenonrequired_test(a int, b int, c int);
create index forcenonrequired_test_idx on forcenonrequired_test (a, b, c);
-- Setup
-- set skipscan_prefix_cols = 0;
select setseed(0.5);
 setseed 
---------
 
(1 row)

insert into forcenonrequired_test
select
  (random() * 100)::int4 as a,
  (random() * 10)::int4 as b,
  (random() * 10)::int4 as c from generate_series(1, 20_000) i;
-- This was wrong because I somehow got the idea that a non-range skip array
-- doesn't represent the lack of an inequality constraint (regardless of
-- whether or not we proved that its column value never changed on the page):
select count(*) from forcenonrequired_test where b between 6 and 6 and c = 1;
 count 
-------
   206
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select count(*) from forcenonrequired_test where b between 6 and 6 and c = 1;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=424.25..424.26 rows=1 width=8) (actual rows=1.00 loops=1)
   Buffers: shared hit=273
   ->  Index Scan using forcenonrequired_test_idx on forcenonrequired_test  (cost=0.29..424.25 rows=1 width=0) (actual rows=206.00 loops=1)
         Index Cond: ((b >= 6) AND (b <= 6) AND (c = 1))
         Index Searches: 1
         Buffers: shared hit=273
(6 rows)

-- This variant that gives the same answer was okay at the time, though:
select count(*) from forcenonrequired_test where a between 0 and 100 and b between 6 and 6 and c = 1;
 count 
-------
   206
(1 row)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select count(*) from forcenonrequired_test where a between 0 and 100 and b between 6 and 6 and c = 1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=6.24..6.25 rows=1 width=8) (actual rows=1.00 loops=1)
   Buffers: shared hit=273
   ->  Index Scan using forcenonrequired_test_idx on forcenonrequired_test  (cost=0.29..6.24 rows=1 width=0) (actual rows=206.00 loops=1)
         Index Cond: ((a >= 0) AND (a <= 100) AND (b >= 6) AND (b <= 6) AND (c = 1))
         Index Searches: 1
         Buffers: shared hit=273
(6 rows)

-- (Feb 11 2025) SAOP array test case had wrong answers because we didn't
-- actually check if "a" scan key is satisfied by any "a" value on the page,
-- spuriously deciding that "a" scan key must be satisfied just because "a"
-- only has one distinct value.  This causes wrong answers on the page that
-- exclusively contains "a = 93" values, which shouldn't be returning any
-- tuples here.
select * from forcenonrequired_test where a in (91,92,94) and c = 1 order by a desc, b desc;
 a  | b  | c 
----+----+---
 94 | 10 | 1
 94 |  9 | 1
 94 |  9 | 1
 94 |  8 | 1
 94 |  8 | 1
 94 |  6 | 1
 94 |  6 | 1
 94 |  5 | 1
 94 |  5 | 1
 94 |  4 | 1
 94 |  4 | 1
 94 |  4 | 1
 94 |  4 | 1
 94 |  4 | 1
 94 |  3 | 1
 94 |  2 | 1
 94 |  2 | 1
 94 |  2 | 1
 94 |  2 | 1
 94 |  1 | 1
 94 |  1 | 1
 94 |  1 | 1
 94 |  0 | 1
 94 |  0 | 1
 92 |  9 | 1
 92 |  9 | 1
 92 |  9 | 1
 92 |  9 | 1
 92 |  8 | 1
 92 |  8 | 1
 92 |  8 | 1
 92 |  7 | 1
 92 |  7 | 1
 92 |  6 | 1
 92 |  5 | 1
 92 |  5 | 1
 92 |  3 | 1
 92 |  2 | 1
 92 |  1 | 1
 92 |  1 | 1
 92 |  1 | 1
 92 |  1 | 1
 92 |  1 | 1
 92 |  1 | 1
 91 | 10 | 1
 91 | 10 | 1
 91 |  9 | 1
 91 |  9 | 1
 91 |  8 | 1
 91 |  7 | 1
 91 |  7 | 1
 91 |  7 | 1
 91 |  7 | 1
 91 |  6 | 1
 91 |  6 | 1
 91 |  5 | 1
 91 |  4 | 1
 91 |  4 | 1
 91 |  2 | 1
 91 |  1 | 1
 91 |  1 | 1
 91 |  0 | 1
 91 |  0 | 1
 91 |  0 | 1
(64 rows)

EXPLAIN (ANALYZE, BUFFERS, TIMING OFF, SUMMARY OFF)
select * from forcenonrequired_test where a in (91,92,94) and c = 1 order by a desc, b desc;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan Backward using forcenonrequired_test_idx on forcenonrequired_test  (cost=0.29..14.21 rows=2 width=12) (actual rows=64.00 loops=1)
   Index Cond: ((a = ANY ('{91,92,94}'::integer[])) AND (c = 1))
   Index Searches: 1
   Buffers: shared hit=69
(4 rows)

